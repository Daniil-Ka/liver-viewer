import io
import os

import numpy as np
from PIL import Image, ImageOps, ImageChops
import pydicom
from dicom2jpg import io2img

from model.model import model  # –ü–æ–¥–∫–ª—é—á–∞–µ–º YOLO

# üìÇ –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
input_folder = r"C:\Users\dkrap\Desktop\liver\DICOM_anon"
output_folder = r"C:\Users\dkrap\Desktop\liver\DICOM_anon_result"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(output_folder, exist_ok=True)

# üîç –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
for file_name in os.listdir(input_folder):
    file_path = os.path.join(input_folder, file_name)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ DICOM-—Ñ–∞–π–ª—ã
    if not file_name.lower().endswith(".dcm"):
        continue

    print(f"üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_name}")

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º DICOM-—Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é file_content
        with open(file_path, "rb") as f:
            file_content = f.read()

        dicom_io = io.BytesIO(file_content)
        img_data = io2img(dicom_io)

        # üìå –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–æ–π, –µ—Å–ª–∏ DICOM –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π
        if len(img_data.shape) == 3:
            img_data = img_data[:, :, 0]

        # ‚öôÔ∏è –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 255]
        img_data = (img_data - np.min(img_data)) / (np.max(img_data) - np.min(img_data)) * 255
        img_data = img_data.astype(np.uint8)

        # üé® –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ PIL (–≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ)
        base_image = Image.fromarray(img_data).convert("L")

        # üîç –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 640x640
        base_image = ImageOps.fit(base_image, (640, 640), Image.Resampling.LANCZOS)

        # üîç –ü—Ä–æ–≥–æ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YOLO
        img_data_rgb = np.array(base_image.convert("RGB"))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGB –¥–ª—è YOLO
        results = model.predict(img_data_rgb)

        # üü° –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —á–µ—Ä–Ω—É—é –º–∞—Å–∫—É
        mask_layer = Image.new("L", base_image.size, 0)

        # üé≠ –ï—Å–ª–∏ YOLO –Ω–∞—à–ª–∞ –º–∞—Å–∫—É ‚Äì –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–µ –±–µ–ª—ã–º (255)
        if results[0].masks is not None:
            masks = results[0].masks.data.cpu().numpy()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy

            for mask in masks:
                mask_image = Image.fromarray((mask * 255).astype(np.uint8))  # –ú–∞—Å–∫–∞ –≤ –≥—Ä–∞–¥–∞—Ü–∏—è—Ö —Å–µ—Ä–æ–≥–æ
                mask_layer = ImageChops.lighter(mask_layer, mask_image)

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –º–∞—Å–∫—É –≤ `DICOM_anon_result`
        mask_output_path = os.path.join(output_folder, file_name.replace(".dcm", "_mask.png"))
        mask_layer.save(mask_output_path, format="PNG")
        print(f"‚úÖ –ú–∞—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {mask_output_path}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_name}: {e}")

print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
