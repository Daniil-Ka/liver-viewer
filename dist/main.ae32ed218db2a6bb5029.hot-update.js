"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateitk_vtk_viewer"]("main",{

/***/ "./src/UI/Layers/createLayersUIMachine.js":
/*!************************************************!*\
  !*** ./src/UI/Layers/createLayersUIMachine.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! xstate */ \"./node_modules/xstate/es/index.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! xstate */ \"./node_modules/xstate/es/interpreter.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! xstate */ \"./node_modules/xstate/es/actions.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! xstate */ \"./node_modules/xstate/es/Machine.js\");\n/* harmony import */ var itk_wasm__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! itk-wasm */ \"./node_modules/itk-wasm/dist/core/PixelTypes.js\");\n/* harmony import */ var _createLayerUIActor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createLayerUIActor */ \"./src/UI/Layers/createLayerUIActor.js\");\n/* harmony import */ var _Context_LayerActorContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Context/LayerActorContext */ \"./src/Context/LayerActorContext.js\");\n/* harmony import */ var _Context_ImageActorContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Context/ImageActorContext */ \"./src/Context/ImageActorContext.js\");\n/* harmony import */ var _Rendering_Images_createImageRenderingActor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Rendering/Images/createImageRenderingActor */ \"./src/Rendering/Images/createImageRenderingActor.js\");\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\nfunction resize(arr, newSize, defaultValue) {\n  return [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(arr), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Array(Math.max(newSize - arr.length, 0)).fill(defaultValue)));\n}\nfunction spawnLayerRenderingActor(options) {\n  return (0,xstate__WEBPACK_IMPORTED_MODULE_7__.assign)({\n    layers: function layers(context, event) {\n      var layers = context.layers;\n      switch (event.type) {\n        case 'ADD_IMAGE':\n          {\n            var _layers$actorContext$;\n            var name = event.data.name;\n            // Ensure unique name\n            var nameNumber = 0;\n            while (layers.layerUIActors.has(name)) {\n              name = \"\".concat(event.data.name, \"-\").concat(nameNumber + 1);\n              nameNumber++;\n            }\n            var actorContext = (_layers$actorContext$ = layers.actorContext.get(name)) !== null && _layers$actorContext$ !== void 0 ? _layers$actorContext$ : new _Context_LayerActorContext__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n            actorContext.type = 'image';\n            actorContext.bbox = false;\n            layers.actorContext.set(name, actorContext);\n            layers.lastAddedData = {\n              name: name,\n              data: event.data\n            };\n            layers.layerUIActors.set(name, (0,xstate__WEBPACK_IMPORTED_MODULE_8__.spawn)((0,_createLayerUIActor__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options, context, actorContext), \"layerUIActor-\".concat(name), actorContext));\n            break;\n          }\n        case 'ADD_LABEL_IMAGE':\n          {\n            var _layers$actorContext$2;\n            var _name = event.data.labelImage.name;\n            // Ensure unique name\n            var _nameNumber = 0;\n            while (layers.layerUIActors.has(_name)) {\n              _name = \"\".concat(event.data.labelImage.name, \"-\").concat(_nameNumber + 1);\n              _nameNumber++;\n            }\n            var _actorContext = (_layers$actorContext$2 = layers.actorContext.get(_name)) !== null && _layers$actorContext$2 !== void 0 ? _layers$actorContext$2 : new _Context_LayerActorContext__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n            _actorContext.type = 'labelImage';\n            _actorContext.bbox = false;\n            layers.actorContext.set(_name, _actorContext);\n            layers.lastAddedData = {\n              name: _name,\n              data: event.data\n            };\n            layers.layerUIActors.set(_name, (0,xstate__WEBPACK_IMPORTED_MODULE_8__.spawn)((0,_createLayerUIActor__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options, context, _actorContext), \"layerUIActor-\".concat(_name)));\n            break;\n          }\n        default:\n          throw new Error(\"Unexpected event type: \".concat(event.type));\n      }\n      return layers;\n    }\n  });\n}\nvar assignImageContext = (0,xstate__WEBPACK_IMPORTED_MODULE_7__.assign)({\n  images: function images(context) {\n    var _images$actorContext$;\n    var images = context.images;\n    var actorName = null;\n    var image = null;\n    var labelImage = null;\n    var imageName = null;\n    var labelImageName = null;\n    if ('labelImage' in context.layers.lastAddedData.data) {\n      var _context$layers$lastA, _imageName;\n      labelImage = context.layers.lastAddedData.data.labelImage;\n      imageName = (_context$layers$lastA = context.layers.lastAddedData.data.imageName) !== null && _context$layers$lastA !== void 0 ? _context$layers$lastA : context.images.selectedName;\n      actorName = (_imageName = imageName) !== null && _imageName !== void 0 ? _imageName : context.layers.lastAddedData.data.labelImage.name;\n      labelImageName = context.layers.lastAddedData.name;\n    } else {\n      var _Array$from$find;\n      imageName = context.layers.lastAddedData.name;\n      // find Map key with ImageActorContext with matching image name.  Needed if image loaded after labelImage\n      var _ref = (_Array$from$find = Array.from(images.actorContext.entries()).find(function (_ref3) {\n          var _ref4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref3, 2),\n            actorImageName = _ref4[1].imageName;\n          return actorImageName === imageName;\n        })) !== null && _Array$from$find !== void 0 ? _Array$from$find : [],\n        _ref2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, 1),\n        keyName = _ref2[0];\n      actorName = keyName !== null && keyName !== void 0 ? keyName : imageName;\n    }\n    images.selectedName = actorName;\n    var actorContext = (_images$actorContext$ = images.actorContext.get(actorName)) !== null && _images$actorContext$ !== void 0 ? _images$actorContext$ : new _Context_ImageActorContext__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n    var layerContext;\n    if (labelImage) {\n      var _imageName2;\n      if (actorContext.image && labelImage.imageType.dimension !== actorContext.image.imageType.dimension) throw new Error('Label image dimensions do not match Image dimensions');\n      actorContext.labelImage = labelImage;\n      actorContext.labelImageName = labelImageName;\n      layerContext = context.layers.actorContext.get(labelImageName);\n      actorContext.imageName = (_imageName2 = imageName) !== null && _imageName2 !== void 0 ? _imageName2 : 'Image';\n    } else {\n      if (actorContext.labelImage && image.imageType.dimensions !== actorContext.labelImage.imageType.dimensions) throw new Error('Label image dimensions do not match Image dimensions');\n      image = context.layers.lastAddedData.data;\n      actorContext.image = image;\n      layerContext = context.layers.actorContext.get(imageName);\n    }\n    layerContext.imageActorContext = actorContext;\n    images.actorContext.set(actorName, actorContext);\n    if (image === null) {\n      return images;\n    }\n    var components = image.imageType.components;\n\n    // Assign default independentComponents\n    if (actorContext.independentComponents === null) {\n      // If a 2D RGB image\n      if (image.imageType.pixelType === itk_wasm__WEBPACK_IMPORTED_MODULE_9__[\"default\"].RGB || image.imageType.pixelType === itk_wasm__WEBPACK_IMPORTED_MODULE_9__[\"default\"].RGBA) {\n        actorContext.independentComponents = false;\n      } else {\n        actorContext.independentComponents = true;\n      }\n    }\n\n    // Assign default colorMaps\n    for (var component = 0; component < components; component++) {\n      if (actorContext.colorMaps.has(component)) {\n        continue;\n      }\n      var colorMap = 'TestMap';\n      // If a 2D RGB or RGBA\n      if (components === 2) {\n        switch (component) {\n          case 0:\n            colorMap = 'BkMa';\n            break;\n          case 1:\n            colorMap = 'BkCy';\n            break;\n        }\n      } else if (actorContext.independentComponents) {\n        if (components === 3) {\n          switch (component) {\n            case 0:\n              colorMap = 'BkRd';\n              break;\n            case 1:\n              colorMap = 'BkGn';\n              break;\n            case 2:\n              colorMap = 'BkBu';\n              break;\n          }\n        } else if (components >= 4) {\n          switch (component) {\n            case 0:\n              colorMap = 'BkRd';\n              break;\n            case 1:\n              colorMap = 'BkGn';\n              break;\n            case 2:\n              colorMap = 'BkBu';\n              break;\n            case 3:\n              colorMap = 'Grayscale';\n              break;\n          }\n        }\n      }\n      actorContext.colorMaps.set(component, colorMap);\n    }\n    for (var _component = 0; _component < components; _component++) {\n      if (!actorContext.piecewiseFunctionPoints.has(_component)) {\n        // Assign default piecewiseFunction\n        var points = context.use2D ? [[0.5, 1]] : [\n          // ТУТ\n        ];\n        if (context.use2D && components === 1) {\n          // For 2D ImageMapper, if multiple components,\n          // opacity function sets component contribution factor.\n          // If just 1 component, opacity function is irrelevant.\n          points.length = 0;\n        }\n        actorContext.piecewiseFunctionPoints.set(_component, points);\n      }\n      actorContext.colorRanges.set(_component, [0.2, 0.8]);\n    }\n\n    // make Maps like this: { 0: true, 1: true, ... n: true}\n    var trueForAll = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Array(components).keys()).map(function (c) {\n      return [c, true];\n    });\n    actorContext.colorRangeMinAutoAdjust = new Map((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(trueForAll));\n    actorContext.colorRangeMaxAutoAdjust = new Map((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(trueForAll));\n    actorContext.colorRangeBoundsAutoAdjust = new Map((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(trueForAll));\n    actorContext.piecewiseFunctionPointsAutoAdjust = new Map((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(trueForAll));\n    return images;\n  }\n});\nvar assignComponentVisibilities = (0,xstate__WEBPACK_IMPORTED_MODULE_7__.assign)({\n  images: function images(_ref5, event) {\n    var _images = _ref5.images;\n    var actorContext = _images.actorContext.get(event.data.name);\n    var componentCount = (0,_Rendering_Images_createImageRenderingActor__WEBPACK_IMPORTED_MODULE_6__.getOutputIntensityComponentCount)(actorContext);\n    actorContext.componentVisibilities = resize(actorContext.componentVisibilities, componentCount, true);\n    return _images;\n  }\n});\nvar sendComponentVisibilitiesUpdated = function sendComponentVisibilitiesUpdated(c, _ref6) {\n  var name = _ref6.data.name;\n  c.service.send({\n    type: 'COMPONENT_VISIBILITIES_UPDATED',\n    data: {\n      name: name\n    }\n  });\n};\nvar assignSelectedName = (0,xstate__WEBPACK_IMPORTED_MODULE_7__.assign)({\n  images: function images(context, event) {\n    var images = context.images;\n    var name = event.data;\n    var type = context.layers.layersUIActors.get(name).type;\n    if (type === 'image' || type === 'labelImage') {\n      images.selectedName = name;\n    }\n    return images;\n  }\n});\nvar forwardToNamedActor = (0,xstate__WEBPACK_IMPORTED_MODULE_7__.send)(function (_, e) {\n  return e;\n}, {\n  to: function to(c, e) {\n    return \"layerUIActor-\".concat(e.name);\n  }\n});\nvar sendEventToAllActors = xstate__WEBPACK_IMPORTED_MODULE_10__.pure(function (_ref7, event) {\n  var _layerUIActors$values;\n  var layerUIActors = _ref7.layers.layerUIActors;\n  return Array.from((_layerUIActors$values = layerUIActors === null || layerUIActors === void 0 ? void 0 : layerUIActors.values()) !== null && _layerUIActors$values !== void 0 ? _layerUIActors$values : []).map(function (actor) {\n    return (0,xstate__WEBPACK_IMPORTED_MODULE_7__.send)(event, {\n      to: actor\n    });\n  });\n});\nfunction createLayersUIMachine(options, context) {\n  var layerUIActor = options.layerUIActor;\n  return (0,xstate__WEBPACK_IMPORTED_MODULE_11__.Machine)({\n    id: 'layers',\n    initial: 'idle',\n    context: context,\n    states: {\n      idle: {\n        always: {\n          target: 'active',\n          actions: ['createLayersInterface']\n        }\n      },\n      active: {\n        invoke: [{\n          id: 'compareUI',\n          src: 'compareUI'\n        }],\n        on: {\n          SELECT_LAYER: {\n            assignSelectedName: assignSelectedName,\n            actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_7__.send)(function (_, e) {\n              return e;\n            }, {\n              to: function to(c, e) {\n                return \"layerUIActor-\".concat(e.data);\n              }\n            })]\n          },\n          TOGGLE_LAYER_VISIBILITY: {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_7__.send)(function (_, e) {\n              return e;\n            }, {\n              to: function to(c, e) {\n                return \"layerUIActor-\".concat(e.data);\n              }\n            })\n          },\n          ADD_IMAGE: {\n            actions: [spawnLayerRenderingActor(layerUIActor), assignImageContext, assignComponentVisibilities, function (c) {\n              return c.service.send({\n                type: 'IMAGE_ASSIGNED',\n                data: c.images.selectedName\n              });\n            }, function (c) {\n              return c.service.send({\n                type: 'SELECT_LAYER',\n                data: c.images.selectedName\n              });\n            }]\n          },\n          ADD_LABEL_IMAGE: {\n            actions: [spawnLayerRenderingActor(layerUIActor), assignImageContext, function (c) {\n              return c.service.send({\n                type: 'LABEL_IMAGE_ASSIGNED',\n                data: c.images.selectedName\n              });\n            }, function (c) {\n              return c.service.send({\n                type: 'SELECT_LAYER',\n                data: c.images.selectedName\n              });\n            }]\n          },\n          START_DATA_UPDATE: {\n            actions: forwardToNamedActor\n          },\n          FINISH_DATA_UPDATE: {\n            actions: forwardToNamedActor\n          },\n          POST_RENDER: {\n            actions: sendEventToAllActors\n          },\n          COMPARE_UPDATED: {\n            actions: [assignComponentVisibilities, sendComponentVisibilitiesUpdated, (0,xstate__WEBPACK_IMPORTED_MODULE_7__.send)(function (_, e) {\n              return e;\n            }, {\n              to: function to(c, e) {\n                return \"layerUIActor-\".concat(e.data.name);\n              }\n            }), (0,xstate__WEBPACK_IMPORTED_MODULE_7__.forwardTo)('compareUI')]\n          }\n        }\n      }\n    }\n  }, // need service stub to avoid errors if overridden options does not define\n  _objectSpread({\n    services: {\n      compareUI: function compareUI() {\n        return function () {\n          return undefined;\n        };\n      }\n    }\n  }, options));\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createLayersUIMachine);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/UI/Layers/createLayersUIMachine.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("f4a529fb7eb433dafb2a")
/******/ })();
/******/ 
/******/ }
);