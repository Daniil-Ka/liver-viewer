/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/worker-loader/dist/runtime/inline.js":
/*!***********************************************************!*\
  !*** ./node_modules/worker-loader/dist/runtime/inline.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5saW5lLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4vbm9kZV9tb2R1bGVzL3dvcmtlci1sb2FkZXIvZGlzdC9ydW50aW1lL2lubGluZS5qcz9lY2Q2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYsIG5vLXVzZS1iZWZvcmUtZGVmaW5lLCBuZXctY2FwICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb250ZW50LCB3b3JrZXJDb25zdHJ1Y3Rvciwgd29ya2VyT3B0aW9ucywgdXJsKSB7XG4gIHZhciBnbG9iYWxTY29wZSA9IHNlbGYgfHwgd2luZG93O1xuXG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBibG9iO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBOZXcgQVBJXG4gICAgICAgIGJsb2IgPSBuZXcgZ2xvYmFsU2NvcGUuQmxvYihbY29udGVudF0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBCbG9iQnVpbGRlciA9IERlcHJlY2F0ZWQsIGJ1dCB3aWRlbHkgaW1wbGVtZW50ZWRcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gZ2xvYmFsU2NvcGUuQmxvYkJ1aWxkZXIgfHwgZ2xvYmFsU2NvcGUuV2ViS2l0QmxvYkJ1aWxkZXIgfHwgZ2xvYmFsU2NvcGUuTW96QmxvYkJ1aWxkZXIgfHwgZ2xvYmFsU2NvcGUuTVNCbG9iQnVpbGRlcjtcbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuICAgICAgICBibG9iLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgYmxvYiA9IGJsb2IuZ2V0QmxvYigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgVVJMID0gZ2xvYmFsU2NvcGUuVVJMIHx8IGdsb2JhbFNjb3BlLndlYmtpdFVSTDtcbiAgICAgIHZhciBvYmplY3RVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgdmFyIHdvcmtlciA9IG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0ob2JqZWN0VVJMLCB3b3JrZXJPcHRpb25zKTtcbiAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwob2JqZWN0VVJMKTtcbiAgICAgIHJldHVybiB3b3JrZXI7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0oXCJkYXRhOmFwcGxpY2F0aW9uL2phdmFzY3JpcHQsXCIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChjb250ZW50KSksIHdvcmtlck9wdGlvbnMpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcIklubGluZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IGdsb2JhbFNjb3BlW3dvcmtlckNvbnN0cnVjdG9yXSh1cmwsIHdvcmtlck9wdGlvbnMpO1xuICB9XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/runtime/inline.js\n");

/***/ }),

/***/ "./node_modules/itk-wasm/dist/web-workers/pipeline.worker.js":
/*!*******************************************************************!*\
  !*** ./node_modules/itk-wasm/dist/web-workers/pipeline.worker.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !!../../../worker-loader/dist/runtime/inline.js */ \"./node_modules/worker-loader/dist/runtime/inline.js\");\n\nfunction Worker_fn() {\n  return _worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__(\"/*\\n * ATTENTION: An \\\"eval-source-map\\\" devtool has been used.\\n * This devtool is neither made for production nor for readable output files.\\n * It uses \\\"eval()\\\" calls to create a separate source file with attached SourceMaps in the browser devtools.\\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\\n * or disable the default devtool with \\\"devtool: false\\\".\\n * If you are looking for production-ready output files, see mode: \\\"production\\\" (https://webpack.js.org/configuration/mode/).\\n */\\n/******/ (() => { // webpackBootstrap\\n/******/ \\tvar __webpack_modules__ = ({\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/index.js\\\":\\n/*!***********************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/index.js ***!\\n  \\\\***********************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\neval(\\\"module.exports = __webpack_require__(/*! ./lib/axios */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/axios.js\\\\\\\");//# sourceURL=[module]\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/adapters/xhr.js\\\":\\n/*!**********************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/adapters/xhr.js ***!\\n  \\\\**********************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nvar settle = __webpack_require__(/*! ./../core/settle */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/settle.js\\\\\\\");\\\\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/cookies.js\\\\\\\");\\\\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/buildURL.js\\\\\\\");\\\\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/buildFullPath.js\\\\\\\");\\\\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/parseHeaders.js\\\\\\\");\\\\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/isURLSameOrigin.js\\\\\\\");\\\\nvar createError = __webpack_require__(/*! ../core/createError */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/createError.js\\\\\\\");\\\\nvar defaults = __webpack_require__(/*! ../defaults */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/defaults.js\\\\\\\");\\\\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/Cancel.js\\\\\\\");\\\\nmodule.exports = function xhrAdapter(config) {\\\\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\\\\n    var requestData = config.data;\\\\n    var requestHeaders = config.headers;\\\\n    var responseType = config.responseType;\\\\n    var onCanceled;\\\\n    function done() {\\\\n      if (config.cancelToken) {\\\\n        config.cancelToken.unsubscribe(onCanceled);\\\\n      }\\\\n      if (config.signal) {\\\\n        config.signal.removeEventListener('abort', onCanceled);\\\\n      }\\\\n    }\\\\n    if (utils.isFormData(requestData)) {\\\\n      delete requestHeaders['Content-Type']; // Let the browser set it\\\\n    }\\\\n\\\\n    var request = new XMLHttpRequest();\\\\n\\\\n    // HTTP basic authentication\\\\n    if (config.auth) {\\\\n      var username = config.auth.username || '';\\\\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\\\\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\\\\n    }\\\\n    var fullPath = buildFullPath(config.baseURL, config.url);\\\\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\\\\n\\\\n    // Set the request timeout in MS\\\\n    request.timeout = config.timeout;\\\\n    function onloadend() {\\\\n      if (!request) {\\\\n        return;\\\\n      }\\\\n      // Prepare the response\\\\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\\\\n      var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;\\\\n      var response = {\\\\n        data: responseData,\\\\n        status: request.status,\\\\n        statusText: request.statusText,\\\\n        headers: responseHeaders,\\\\n        config: config,\\\\n        request: request\\\\n      };\\\\n      settle(function _resolve(value) {\\\\n        resolve(value);\\\\n        done();\\\\n      }, function _reject(err) {\\\\n        reject(err);\\\\n        done();\\\\n      }, response);\\\\n\\\\n      // Clean up request\\\\n      request = null;\\\\n    }\\\\n    if ('onloadend' in request) {\\\\n      // Use onloadend if available\\\\n      request.onloadend = onloadend;\\\\n    } else {\\\\n      // Listen for ready state to emulate onloadend\\\\n      request.onreadystatechange = function handleLoad() {\\\\n        if (!request || request.readyState !== 4) {\\\\n          return;\\\\n        }\\\\n\\\\n        // The request errored out and we didn't get a response, this will be\\\\n        // handled by onerror instead\\\\n        // With one exception: request that using file: protocol, most browsers\\\\n        // will return status as 0 even though it's a successful request\\\\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\\\\n          return;\\\\n        }\\\\n        // readystate handler is calling before onerror or ontimeout handlers,\\\\n        // so we should call onloadend on the next 'tick'\\\\n        setTimeout(onloadend);\\\\n      };\\\\n    }\\\\n\\\\n    // Handle browser request cancellation (as opposed to a manual cancellation)\\\\n    request.onabort = function handleAbort() {\\\\n      if (!request) {\\\\n        return;\\\\n      }\\\\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\\\\n\\\\n      // Clean up request\\\\n      request = null;\\\\n    };\\\\n\\\\n    // Handle low level network errors\\\\n    request.onerror = function handleError() {\\\\n      // Real errors are hidden from us by the browser\\\\n      // onerror should only fire if it's a network error\\\\n      reject(createError('Network Error', config, null, request));\\\\n\\\\n      // Clean up request\\\\n      request = null;\\\\n    };\\\\n\\\\n    // Handle timeout\\\\n    request.ontimeout = function handleTimeout() {\\\\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\\\\n      var transitional = config.transitional || defaults.transitional;\\\\n      if (config.timeoutErrorMessage) {\\\\n        timeoutErrorMessage = config.timeoutErrorMessage;\\\\n      }\\\\n      reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', request));\\\\n\\\\n      // Clean up request\\\\n      request = null;\\\\n    };\\\\n\\\\n    // Add xsrf header\\\\n    // This is only done if running in a standard browser environment.\\\\n    // Specifically not if we're in a web worker, or react-native.\\\\n    if (utils.isStandardBrowserEnv()) {\\\\n      // Add xsrf header\\\\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;\\\\n      if (xsrfValue) {\\\\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\\\\n      }\\\\n    }\\\\n\\\\n    // Add headers to the request\\\\n    if ('setRequestHeader' in request) {\\\\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\\\\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\\\\n          // Remove Content-Type if data is undefined\\\\n          delete requestHeaders[key];\\\\n        } else {\\\\n          // Otherwise add header to the request\\\\n          request.setRequestHeader(key, val);\\\\n        }\\\\n      });\\\\n    }\\\\n\\\\n    // Add withCredentials to request if needed\\\\n    if (!utils.isUndefined(config.withCredentials)) {\\\\n      request.withCredentials = !!config.withCredentials;\\\\n    }\\\\n\\\\n    // Add responseType to request if needed\\\\n    if (responseType && responseType !== 'json') {\\\\n      request.responseType = config.responseType;\\\\n    }\\\\n\\\\n    // Handle progress if needed\\\\n    if (typeof config.onDownloadProgress === 'function') {\\\\n      request.addEventListener('progress', config.onDownloadProgress);\\\\n    }\\\\n\\\\n    // Not all browsers support upload events\\\\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\\\\n      request.upload.addEventListener('progress', config.onUploadProgress);\\\\n    }\\\\n    if (config.cancelToken || config.signal) {\\\\n      // Handle cancellation\\\\n      // eslint-disable-next-line func-names\\\\n      onCanceled = function (cancel) {\\\\n        if (!request) {\\\\n          return;\\\\n        }\\\\n        reject(!cancel || cancel && cancel.type ? new Cancel('canceled') : cancel);\\\\n        request.abort();\\\\n        request = null;\\\\n      };\\\\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\\\\n      if (config.signal) {\\\\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\\\\n      }\\\\n    }\\\\n    if (!requestData) {\\\\n      requestData = null;\\\\n    }\\\\n\\\\n    // Send the request\\\\n    request.send(requestData);\\\\n  });\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/adapters/xhr.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/axios.js\\\":\\n/*!***************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/axios.js ***!\\n  \\\\***************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nvar bind = __webpack_require__(/*! ./helpers/bind */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/bind.js\\\\\\\");\\\\nvar Axios = __webpack_require__(/*! ./core/Axios */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/Axios.js\\\\\\\");\\\\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/mergeConfig.js\\\\\\\");\\\\nvar defaults = __webpack_require__(/*! ./defaults */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/defaults.js\\\\\\\");\\\\n\\\\n/**\\\\n * Create an instance of Axios\\\\n *\\\\n * @param {Object} defaultConfig The default config for the instance\\\\n * @return {Axios} A new instance of Axios\\\\n */\\\\nfunction createInstance(defaultConfig) {\\\\n  var context = new Axios(defaultConfig);\\\\n  var instance = bind(Axios.prototype.request, context);\\\\n\\\\n  // Copy axios.prototype to instance\\\\n  utils.extend(instance, Axios.prototype, context);\\\\n\\\\n  // Copy context to instance\\\\n  utils.extend(instance, context);\\\\n\\\\n  // Factory for creating new instances\\\\n  instance.create = function create(instanceConfig) {\\\\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\\\\n  };\\\\n  return instance;\\\\n}\\\\n\\\\n// Create the default instance to be exported\\\\nvar axios = createInstance(defaults);\\\\n\\\\n// Expose Axios class to allow class inheritance\\\\naxios.Axios = Axios;\\\\n\\\\n// Expose Cancel & CancelToken\\\\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/Cancel.js\\\\\\\");\\\\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/CancelToken.js\\\\\\\");\\\\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/isCancel.js\\\\\\\");\\\\naxios.VERSION = (__webpack_require__(/*! ./env/data */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/env/data.js\\\\\\\").version);\\\\n\\\\n// Expose all/spread\\\\naxios.all = function all(promises) {\\\\n  return Promise.all(promises);\\\\n};\\\\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/spread.js\\\\\\\");\\\\n\\\\n// Expose isAxiosError\\\\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/isAxiosError.js\\\\\\\");\\\\nmodule.exports = axios;\\\\n\\\\n// Allow use of default import syntax in TypeScript\\\\nmodule.exports[\\\\\\\"default\\\\\\\"] = axios;//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsd0VBQVMsQ0FBQztBQUM5QixJQUFJQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsc0ZBQWdCLENBQUM7QUFDcEMsSUFBSUUsS0FBSyxHQUFHRixtQkFBTyxDQUFDLGtGQUFjLENBQUM7QUFDbkMsSUFBSUcsV0FBVyxHQUFHSCxtQkFBTyxDQUFDLDhGQUFvQixDQUFDO0FBQy9DLElBQUlJLFFBQVEsR0FBR0osbUJBQU8sQ0FBQyw4RUFBWSxDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSyxjQUFjQSxDQUFDQyxhQUFhLEVBQUU7RUFDckMsSUFBSUMsT0FBTyxHQUFHLElBQUlMLEtBQUssQ0FBQ0ksYUFBYSxDQUFDO0VBQ3RDLElBQUlFLFFBQVEsR0FBR1AsSUFBSSxDQUFDQyxLQUFLLENBQUNPLFNBQVMsQ0FBQ0MsT0FBTyxFQUFFSCxPQUFPLENBQUM7O0VBRXJEO0VBQ0FSLEtBQUssQ0FBQ1ksTUFBTSxDQUFDSCxRQUFRLEVBQUVOLEtBQUssQ0FBQ08sU0FBUyxFQUFFRixPQUFPLENBQUM7O0VBRWhEO0VBQ0FSLEtBQUssQ0FBQ1ksTUFBTSxDQUFDSCxRQUFRLEVBQUVELE9BQU8sQ0FBQzs7RUFFL0I7RUFDQUMsUUFBUSxDQUFDSSxNQUFNLEdBQUcsU0FBU0EsTUFBTUEsQ0FBQ0MsY0FBYyxFQUFFO0lBQ2hELE9BQU9SLGNBQWMsQ0FBQ0YsV0FBVyxDQUFDRyxhQUFhLEVBQUVPLGNBQWMsQ0FBQyxDQUFDO0VBQ25FLENBQUM7RUFFRCxPQUFPTCxRQUFRO0FBQ2pCOztBQUVBO0FBQ0EsSUFBSU0sS0FBSyxHQUFHVCxjQUFjLENBQUNELFFBQVEsQ0FBQzs7QUFFcEM7QUFDQVUsS0FBSyxDQUFDWixLQUFLLEdBQUdBLEtBQUs7O0FBRW5CO0FBQ0FZLEtBQUssQ0FBQ0MsTUFBTSxHQUFHZixtQkFBTyxDQUFDLHdGQUFpQixDQUFDO0FBQ3pDYyxLQUFLLENBQUNFLFdBQVcsR0FBR2hCLG1CQUFPLENBQUMsa0dBQXNCLENBQUM7QUFDbkRjLEtBQUssQ0FBQ0csUUFBUSxHQUFHakIsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUM3Q2MsS0FBSyxDQUFDSSxPQUFPLEdBQUdsQiw2R0FBNkI7O0FBRTdDO0FBQ0FjLEtBQUssQ0FBQ00sR0FBRyxHQUFHLFNBQVNBLEdBQUdBLENBQUNDLFFBQVEsRUFBRTtFQUNqQyxPQUFPQyxPQUFPLENBQUNGLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDO0FBQzlCLENBQUM7QUFDRFAsS0FBSyxDQUFDUyxNQUFNLEdBQUd2QixtQkFBTyxDQUFDLDBGQUFrQixDQUFDOztBQUUxQztBQUNBYyxLQUFLLENBQUNVLFlBQVksR0FBR3hCLG1CQUFPLENBQUMsc0dBQXdCLENBQUM7QUFFdER5QixNQUFNLENBQUNDLE9BQU8sR0FBR1osS0FBSzs7QUFFdEI7QUFDQVcseUJBQXNCLEdBQUdYLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uL25vZGVfbW9kdWxlcy9pdGstd2FzbS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzP2QzYjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuYXhpb3MuVkVSU0lPTiA9IHJlcXVpcmUoJy4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImJpbmQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiZGVmYXVsdHMiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJyZXF1ZXN0IiwiZXh0ZW5kIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJheGlvcyIsIkNhbmNlbCIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJWRVJTSU9OIiwidmVyc2lvbiIsImFsbCIsInByb21pc2VzIiwiUHJvbWlzZSIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/axios.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/Cancel.js\\\":\\n/*!***********************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/cancel/Cancel.js ***!\\n  \\\\***********************************************************************/\\n/***/ ((module) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\n/**\\\\n * A `Cancel` is an object that is thrown when an operation is canceled.\\\\n *\\\\n * @class\\\\n * @param {string=} message The message.\\\\n */\\\\nfunction Cancel(message) {\\\\n  this.message = message;\\\\n}\\\\nCancel.prototype.toString = function toString() {\\\\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\\\\n};\\\\nCancel.prototype.__CANCEL__ = true;\\\\nmodule.exports = Cancel;//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLE1BQU1BLENBQUNDLE9BQU8sRUFBRTtFQUN2QixJQUFJLENBQUNBLE9BQU8sR0FBR0EsT0FBTztBQUN4QjtBQUVBRCxNQUFNLENBQUNFLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHLFNBQVNBLFFBQVFBLENBQUEsRUFBRztFQUM5QyxPQUFPLFFBQVEsSUFBSSxJQUFJLENBQUNGLE9BQU8sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDQSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQzdELENBQUM7QUFFREQsTUFBTSxDQUFDRSxTQUFTLENBQUNFLFVBQVUsR0FBRyxJQUFJO0FBRWxDQyxNQUFNLENBQUNDLE9BQU8sR0FBR04sTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4vbm9kZV9tb2R1bGVzL2l0ay13YXNtL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcz85ZGMzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIl0sIm5hbWVzIjpbIkNhbmNlbCIsIm1lc3NhZ2UiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsIl9fQ0FOQ0VMX18iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/cancel/Cancel.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/CancelToken.js\\\":\\n/*!****************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/cancel/CancelToken.js ***!\\n  \\\\****************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar Cancel = __webpack_require__(/*! ./Cancel */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/Cancel.js\\\\\\\");\\\\n\\\\n/**\\\\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\\\\n *\\\\n * @class\\\\n * @param {Function} executor The executor function.\\\\n */\\\\nfunction CancelToken(executor) {\\\\n  if (typeof executor !== 'function') {\\\\n    throw new TypeError('executor must be a function.');\\\\n  }\\\\n  var resolvePromise;\\\\n  this.promise = new Promise(function promiseExecutor(resolve) {\\\\n    resolvePromise = resolve;\\\\n  });\\\\n  var token = this;\\\\n\\\\n  // eslint-disable-next-line func-names\\\\n  this.promise.then(function (cancel) {\\\\n    if (!token._listeners) return;\\\\n    var i;\\\\n    var l = token._listeners.length;\\\\n    for (i = 0; i < l; i++) {\\\\n      token._listeners[i](cancel);\\\\n    }\\\\n    token._listeners = null;\\\\n  });\\\\n\\\\n  // eslint-disable-next-line func-names\\\\n  this.promise.then = function (onfulfilled) {\\\\n    var _resolve;\\\\n    // eslint-disable-next-line func-names\\\\n    var promise = new Promise(function (resolve) {\\\\n      token.subscribe(resolve);\\\\n      _resolve = resolve;\\\\n    }).then(onfulfilled);\\\\n    promise.cancel = function reject() {\\\\n      token.unsubscribe(_resolve);\\\\n    };\\\\n    return promise;\\\\n  };\\\\n  executor(function cancel(message) {\\\\n    if (token.reason) {\\\\n      // Cancellation has already been requested\\\\n      return;\\\\n    }\\\\n    token.reason = new Cancel(message);\\\\n    resolvePromise(token.reason);\\\\n  });\\\\n}\\\\n\\\\n/**\\\\n * Throws a `Cancel` if cancellation has been requested.\\\\n */\\\\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\\\\n  if (this.reason) {\\\\n    throw this.reason;\\\\n  }\\\\n};\\\\n\\\\n/**\\\\n * Subscribe to the cancel signal\\\\n */\\\\n\\\\nCancelToken.prototype.subscribe = function subscribe(listener) {\\\\n  if (this.reason) {\\\\n    listener(this.reason);\\\\n    return;\\\\n  }\\\\n  if (this._listeners) {\\\\n    this._listeners.push(listener);\\\\n  } else {\\\\n    this._listeners = [listener];\\\\n  }\\\\n};\\\\n\\\\n/**\\\\n * Unsubscribe from the cancel signal\\\\n */\\\\n\\\\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\\\\n  if (!this._listeners) {\\\\n    return;\\\\n  }\\\\n  var index = this._listeners.indexOf(listener);\\\\n  if (index !== -1) {\\\\n    this._listeners.splice(index, 1);\\\\n  }\\\\n};\\\\n\\\\n/**\\\\n * Returns an object that contains a new `CancelToken` and a function that, when called,\\\\n * cancels the `CancelToken`.\\\\n */\\\\nCancelToken.source = function source() {\\\\n  var cancel;\\\\n  var token = new CancelToken(function executor(c) {\\\\n    cancel = c;\\\\n  });\\\\n  return {\\\\n    token: token,\\\\n    cancel: cancel\\\\n  };\\\\n};\\\\nmodule.exports = CancelToken;//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLGlGQUFVLENBQUM7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFdBQVdBLENBQUNDLFFBQVEsRUFBRTtFQUM3QixJQUFJLE9BQU9BLFFBQVEsS0FBSyxVQUFVLEVBQUU7SUFDbEMsTUFBTSxJQUFJQyxTQUFTLENBQUMsOEJBQThCLENBQUM7RUFDckQ7RUFFQSxJQUFJQyxjQUFjO0VBRWxCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDLE9BQU8sQ0FBQyxTQUFTQyxlQUFlQSxDQUFDQyxPQUFPLEVBQUU7SUFDM0RKLGNBQWMsR0FBR0ksT0FBTztFQUMxQixDQUFDLENBQUM7RUFFRixJQUFJQyxLQUFLLEdBQUcsSUFBSTs7RUFFaEI7RUFDQSxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDLFVBQVNDLE1BQU0sRUFBRTtJQUNqQyxJQUFJLENBQUNGLEtBQUssQ0FBQ0csVUFBVSxFQUFFO0lBRXZCLElBQUlDLENBQUM7SUFDTCxJQUFJQyxDQUFDLEdBQUdMLEtBQUssQ0FBQ0csVUFBVSxDQUFDRyxNQUFNO0lBRS9CLEtBQUtGLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtNQUN0QkosS0FBSyxDQUFDRyxVQUFVLENBQUNDLENBQUMsQ0FBQyxDQUFDRixNQUFNLENBQUM7SUFDN0I7SUFDQUYsS0FBSyxDQUFDRyxVQUFVLEdBQUcsSUFBSTtFQUN6QixDQUFDLENBQUM7O0VBRUY7RUFDQSxJQUFJLENBQUNQLE9BQU8sQ0FBQ0ssSUFBSSxHQUFHLFVBQVNNLFdBQVcsRUFBRTtJQUN4QyxJQUFJQyxRQUFRO0lBQ1o7SUFDQSxJQUFJWixPQUFPLEdBQUcsSUFBSUMsT0FBTyxDQUFDLFVBQVNFLE9BQU8sRUFBRTtNQUMxQ0MsS0FBSyxDQUFDUyxTQUFTLENBQUNWLE9BQU8sQ0FBQztNQUN4QlMsUUFBUSxHQUFHVCxPQUFPO0lBQ3BCLENBQUMsQ0FBQyxDQUFDRSxJQUFJLENBQUNNLFdBQVcsQ0FBQztJQUVwQlgsT0FBTyxDQUFDTSxNQUFNLEdBQUcsU0FBU1EsTUFBTUEsQ0FBQSxFQUFHO01BQ2pDVixLQUFLLENBQUNXLFdBQVcsQ0FBQ0gsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFRCxPQUFPWixPQUFPO0VBQ2hCLENBQUM7RUFFREgsUUFBUSxDQUFDLFNBQVNTLE1BQU1BLENBQUNVLE9BQU8sRUFBRTtJQUNoQyxJQUFJWixLQUFLLENBQUNhLE1BQU0sRUFBRTtNQUNoQjtNQUNBO0lBQ0Y7SUFFQWIsS0FBSyxDQUFDYSxNQUFNLEdBQUcsSUFBSXZCLE1BQU0sQ0FBQ3NCLE9BQU8sQ0FBQztJQUNsQ2pCLGNBQWMsQ0FBQ0ssS0FBSyxDQUFDYSxNQUFNLENBQUM7RUFDOUIsQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0FyQixXQUFXLENBQUNzQixTQUFTLENBQUNDLGdCQUFnQixHQUFHLFNBQVNBLGdCQUFnQkEsQ0FBQSxFQUFHO0VBQ25FLElBQUksSUFBSSxDQUFDRixNQUFNLEVBQUU7SUFDZixNQUFNLElBQUksQ0FBQ0EsTUFBTTtFQUNuQjtBQUNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBckIsV0FBVyxDQUFDc0IsU0FBUyxDQUFDTCxTQUFTLEdBQUcsU0FBU0EsU0FBU0EsQ0FBQ08sUUFBUSxFQUFFO0VBQzdELElBQUksSUFBSSxDQUFDSCxNQUFNLEVBQUU7SUFDZkcsUUFBUSxDQUFDLElBQUksQ0FBQ0gsTUFBTSxDQUFDO0lBQ3JCO0VBQ0Y7RUFFQSxJQUFJLElBQUksQ0FBQ1YsVUFBVSxFQUFFO0lBQ25CLElBQUksQ0FBQ0EsVUFBVSxDQUFDYyxJQUFJLENBQUNELFFBQVEsQ0FBQztFQUNoQyxDQUFDLE1BQU07SUFDTCxJQUFJLENBQUNiLFVBQVUsR0FBRyxDQUFDYSxRQUFRLENBQUM7RUFDOUI7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQXhCLFdBQVcsQ0FBQ3NCLFNBQVMsQ0FBQ0gsV0FBVyxHQUFHLFNBQVNBLFdBQVdBLENBQUNLLFFBQVEsRUFBRTtFQUNqRSxJQUFJLENBQUMsSUFBSSxDQUFDYixVQUFVLEVBQUU7SUFDcEI7RUFDRjtFQUNBLElBQUllLEtBQUssR0FBRyxJQUFJLENBQUNmLFVBQVUsQ0FBQ2dCLE9BQU8sQ0FBQ0gsUUFBUSxDQUFDO0VBQzdDLElBQUlFLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtJQUNoQixJQUFJLENBQUNmLFVBQVUsQ0FBQ2lCLE1BQU0sQ0FBQ0YsS0FBSyxFQUFFLENBQUMsQ0FBQztFQUNsQztBQUNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTFCLFdBQVcsQ0FBQzZCLE1BQU0sR0FBRyxTQUFTQSxNQUFNQSxDQUFBLEVBQUc7RUFDckMsSUFBSW5CLE1BQU07RUFDVixJQUFJRixLQUFLLEdBQUcsSUFBSVIsV0FBVyxDQUFDLFNBQVNDLFFBQVFBLENBQUM2QixDQUFDLEVBQUU7SUFDL0NwQixNQUFNLEdBQUdvQixDQUFDO0VBQ1osQ0FBQyxDQUFDO0VBQ0YsT0FBTztJQUNMdEIsS0FBSyxFQUFFQSxLQUFLO0lBQ1pFLE1BQU0sRUFBRUE7RUFDVixDQUFDO0FBQ0gsQ0FBQztBQUVEcUIsTUFBTSxDQUFDQyxPQUFPLEdBQUdoQyxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanM/NTg4MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG5cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbCA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiJdLCJuYW1lcyI6WyJDYW5jZWwiLCJyZXF1aXJlIiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwicHJvbWlzZSIsIlByb21pc2UiLCJwcm9taXNlRXhlY3V0b3IiLCJyZXNvbHZlIiwidG9rZW4iLCJ0aGVuIiwiY2FuY2VsIiwiX2xpc3RlbmVycyIsImkiLCJsIiwibGVuZ3RoIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsInN1YnNjcmliZSIsInJlamVjdCIsInVuc3Vic2NyaWJlIiwibWVzc2FnZSIsInJlYXNvbiIsInByb3RvdHlwZSIsInRocm93SWZSZXF1ZXN0ZWQiLCJsaXN0ZW5lciIsInB1c2giLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJzb3VyY2UiLCJjIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/cancel/CancelToken.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/isCancel.js\\\":\\n/*!*************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/cancel/isCancel.js ***!\\n  \\\\*************************************************************************/\\n/***/ ((module) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nmodule.exports = function isCancel(value) {\\\\n  return !!(value && value.__CANCEL__);\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLFFBQVFBLENBQUNDLEtBQUssRUFBRTtFQUN4QyxPQUFPLENBQUMsRUFBRUEsS0FBSyxJQUFJQSxLQUFLLENBQUNDLFVBQVUsQ0FBQztBQUN0QyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanM/Y2I5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXNDYW5jZWwiLCJ2YWx1ZSIsIl9fQ0FOQ0VMX18iXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/cancel/isCancel.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/core/Axios.js\\\":\\n/*!********************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/core/Axios.js ***!\\n  \\\\********************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/buildURL.js\\\\\\\");\\\\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/InterceptorManager.js\\\\\\\");\\\\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/dispatchRequest.js\\\\\\\");\\\\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/mergeConfig.js\\\\\\\");\\\\nvar validator = __webpack_require__(/*! ../helpers/validator */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/validator.js\\\\\\\");\\\\nvar validators = validator.validators;\\\\n/**\\\\n * Create a new instance of Axios\\\\n *\\\\n * @param {Object} instanceConfig The default config for the instance\\\\n */\\\\nfunction Axios(instanceConfig) {\\\\n  this.defaults = instanceConfig;\\\\n  this.interceptors = {\\\\n    request: new InterceptorManager(),\\\\n    response: new InterceptorManager()\\\\n  };\\\\n}\\\\n\\\\n/**\\\\n * Dispatch a request\\\\n *\\\\n * @param {Object} config The config specific for this request (merged with this.defaults)\\\\n */\\\\nAxios.prototype.request = function request(config) {\\\\n  /*eslint no-param-reassign:0*/\\\\n  // Allow for axios('example/url'[, config]) a la fetch API\\\\n  if (typeof config === 'string') {\\\\n    config = arguments[1] || {};\\\\n    config.url = arguments[0];\\\\n  } else {\\\\n    config = config || {};\\\\n  }\\\\n  config = mergeConfig(this.defaults, config);\\\\n\\\\n  // Set config.method\\\\n  if (config.method) {\\\\n    config.method = config.method.toLowerCase();\\\\n  } else if (this.defaults.method) {\\\\n    config.method = this.defaults.method.toLowerCase();\\\\n  } else {\\\\n    config.method = 'get';\\\\n  }\\\\n  var transitional = config.transitional;\\\\n  if (transitional !== undefined) {\\\\n    validator.assertOptions(transitional, {\\\\n      silentJSONParsing: validators.transitional(validators.boolean),\\\\n      forcedJSONParsing: validators.transitional(validators.boolean),\\\\n      clarifyTimeoutError: validators.transitional(validators.boolean)\\\\n    }, false);\\\\n  }\\\\n\\\\n  // filter out skipped interceptors\\\\n  var requestInterceptorChain = [];\\\\n  var synchronousRequestInterceptors = true;\\\\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\\\\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\\\\n      return;\\\\n    }\\\\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\\\\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\\\\n  });\\\\n  var responseInterceptorChain = [];\\\\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\\\\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\\\\n  });\\\\n  var promise;\\\\n  if (!synchronousRequestInterceptors) {\\\\n    var chain = [dispatchRequest, undefined];\\\\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\\\\n    chain = chain.concat(responseInterceptorChain);\\\\n    promise = Promise.resolve(config);\\\\n    while (chain.length) {\\\\n      promise = promise.then(chain.shift(), chain.shift());\\\\n    }\\\\n    return promise;\\\\n  }\\\\n  var newConfig = config;\\\\n  while (requestInterceptorChain.length) {\\\\n    var onFulfilled = requestInterceptorChain.shift();\\\\n    var onRejected = requestInterceptorChain.shift();\\\\n    try {\\\\n      newConfig = onFulfilled(newConfig);\\\\n    } catch (error) {\\\\n      onRejected(error);\\\\n      break;\\\\n    }\\\\n  }\\\\n  try {\\\\n    promise = dispatchRequest(newConfig);\\\\n  } catch (error) {\\\\n    return Promise.reject(error);\\\\n  }\\\\n  while (responseInterceptorChain.length) {\\\\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\\\\n  }\\\\n  return promise;\\\\n};\\\\nAxios.prototype.getUri = function getUri(config) {\\\\n  config = mergeConfig(this.defaults, config);\\\\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\\\\\\\?/, '');\\\\n};\\\\n\\\\n// Provide aliases for supported request methods\\\\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\\\\n  /*eslint func-names:0*/\\\\n  Axios.prototype[method] = function (url, config) {\\\\n    return this.request(mergeConfig(config || {}, {\\\\n      method: method,\\\\n      url: url,\\\\n      data: (config || {}).data\\\\n    }));\\\\n  };\\\\n});\\\\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\\\\n  /*eslint func-names:0*/\\\\n  Axios.prototype[method] = function (url, data, config) {\\\\n    return this.request(mergeConfig(config || {}, {\\\\n      method: method,\\\\n      url: url,\\\\n      data: data\\\\n    }));\\\\n  };\\\\n});\\\\nmodule.exports = Axios;//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/core/Axios.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/core/InterceptorManager.js\\\":\\n/*!*********************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/core/InterceptorManager.js ***!\\n  \\\\*********************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nfunction InterceptorManager() {\\\\n  this.handlers = [];\\\\n}\\\\n\\\\n/**\\\\n * Add a new interceptor to the stack\\\\n *\\\\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\\\\n * @param {Function} rejected The function to handle `reject` for a `Promise`\\\\n *\\\\n * @return {Number} An ID used to remove interceptor later\\\\n */\\\\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\\\\n  this.handlers.push({\\\\n    fulfilled: fulfilled,\\\\n    rejected: rejected,\\\\n    synchronous: options ? options.synchronous : false,\\\\n    runWhen: options ? options.runWhen : null\\\\n  });\\\\n  return this.handlers.length - 1;\\\\n};\\\\n\\\\n/**\\\\n * Remove an interceptor from the stack\\\\n *\\\\n * @param {Number} id The ID that was returned by `use`\\\\n */\\\\nInterceptorManager.prototype.eject = function eject(id) {\\\\n  if (this.handlers[id]) {\\\\n    this.handlers[id] = null;\\\\n  }\\\\n};\\\\n\\\\n/**\\\\n * Iterate over all the registered interceptors\\\\n *\\\\n * This method is particularly useful for skipping over any\\\\n * interceptors that may have become `null` calling `eject`.\\\\n *\\\\n * @param {Function} fn The function to call for each interceptor\\\\n */\\\\nInterceptorManager.prototype.forEach = function forEach(fn) {\\\\n  utils.forEach(this.handlers, function forEachHandler(h) {\\\\n    if (h !== null) {\\\\n      fn(h);\\\\n    }\\\\n  });\\\\n};\\\\nmodule.exports = InterceptorManager;//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsMkVBQVksQ0FBQztBQUVqQyxTQUFTQyxrQkFBa0JBLENBQUEsRUFBRztFQUM1QixJQUFJLENBQUNDLFFBQVEsR0FBRyxFQUFFO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUQsa0JBQWtCLENBQUNFLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFNBQVNBLEdBQUdBLENBQUNDLFNBQVMsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUU7RUFDNUUsSUFBSSxDQUFDTCxRQUFRLENBQUNNLElBQUksQ0FBQztJQUNqQkgsU0FBUyxFQUFFQSxTQUFTO0lBQ3BCQyxRQUFRLEVBQUVBLFFBQVE7SUFDbEJHLFdBQVcsRUFBRUYsT0FBTyxHQUFHQSxPQUFPLENBQUNFLFdBQVcsR0FBRyxLQUFLO0lBQ2xEQyxPQUFPLEVBQUVILE9BQU8sR0FBR0EsT0FBTyxDQUFDRyxPQUFPLEdBQUc7RUFDdkMsQ0FBQyxDQUFDO0VBQ0YsT0FBTyxJQUFJLENBQUNSLFFBQVEsQ0FBQ1MsTUFBTSxHQUFHLENBQUM7QUFDakMsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FWLGtCQUFrQixDQUFDRSxTQUFTLENBQUNTLEtBQUssR0FBRyxTQUFTQSxLQUFLQSxDQUFDQyxFQUFFLEVBQUU7RUFDdEQsSUFBSSxJQUFJLENBQUNYLFFBQVEsQ0FBQ1csRUFBRSxDQUFDLEVBQUU7SUFDckIsSUFBSSxDQUFDWCxRQUFRLENBQUNXLEVBQUUsQ0FBQyxHQUFHLElBQUk7RUFDMUI7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQVosa0JBQWtCLENBQUNFLFNBQVMsQ0FBQ1csT0FBTyxHQUFHLFNBQVNBLE9BQU9BLENBQUNDLEVBQUUsRUFBRTtFQUMxRGhCLEtBQUssQ0FBQ2UsT0FBTyxDQUFDLElBQUksQ0FBQ1osUUFBUSxFQUFFLFNBQVNjLGNBQWNBLENBQUNDLENBQUMsRUFBRTtJQUN0RCxJQUFJQSxDQUFDLEtBQUssSUFBSSxFQUFFO01BQ2RGLEVBQUUsQ0FBQ0UsQ0FBQyxDQUFDO0lBQ1A7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHbEIsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcz8xNDM5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiaGFuZGxlcnMiLCJwcm90b3R5cGUiLCJ1c2UiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsIm9wdGlvbnMiLCJwdXNoIiwic3luY2hyb25vdXMiLCJydW5XaGVuIiwibGVuZ3RoIiwiZWplY3QiLCJpZCIsImZvckVhY2giLCJmbiIsImZvckVhY2hIYW5kbGVyIiwiaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/core/InterceptorManager.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/core/buildFullPath.js\\\":\\n/*!****************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/core/buildFullPath.js ***!\\n  \\\\****************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/isAbsoluteURL.js\\\\\\\");\\\\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/combineURLs.js\\\\\\\");\\\\n\\\\n/**\\\\n * Creates a new URL by combining the baseURL with the requestedURL,\\\\n * only when the requestedURL is not already an absolute URL.\\\\n * If the requestURL is absolute, this function returns the requestedURL untouched.\\\\n *\\\\n * @param {string} baseURL The base URL\\\\n * @param {string} requestedURL Absolute or relative URL to combine\\\\n * @returns {string} The combined full path\\\\n */\\\\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\\\\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\\\\n    return combineURLs(baseURL, requestedURL);\\\\n  }\\\\n  return requestedURL;\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLHlHQUEwQixDQUFDO0FBQ3ZELElBQUlDLFdBQVcsR0FBR0QsbUJBQU8sQ0FBQyxxR0FBd0IsQ0FBQzs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLGFBQWFBLENBQUNDLE9BQU8sRUFBRUMsWUFBWSxFQUFFO0VBQzdELElBQUlELE9BQU8sSUFBSSxDQUFDTixhQUFhLENBQUNPLFlBQVksQ0FBQyxFQUFFO0lBQzNDLE9BQU9MLFdBQVcsQ0FBQ0ksT0FBTyxFQUFFQyxZQUFZLENBQUM7RUFDM0M7RUFDQSxPQUFPQSxZQUFZO0FBQ3JCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uL25vZGVfbW9kdWxlcy9pdGstd2FzbS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcz82ZGY5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iXSwibmFtZXMiOlsiaXNBYnNvbHV0ZVVSTCIsInJlcXVpcmUiLCJjb21iaW5lVVJMcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJidWlsZEZ1bGxQYXRoIiwiYmFzZVVSTCIsInJlcXVlc3RlZFVSTCJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/core/buildFullPath.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/core/createError.js\\\":\\n/*!**************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/core/createError.js ***!\\n  \\\\**************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/enhanceError.js\\\\\\\");\\\\n\\\\n/**\\\\n * Create an Error with the specified message, config, error code, request and response.\\\\n *\\\\n * @param {string} message The error message.\\\\n * @param {Object} config The config.\\\\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\\\\n * @param {Object} [request] The request.\\\\n * @param {Object} [response] The response.\\\\n * @returns {Error} The created error.\\\\n */\\\\nmodule.exports = function createError(message, config, code, request, response) {\\\\n  var error = new Error(message);\\\\n  return enhanceError(error, config, code, request, response);\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLFlBQVksR0FBR0MsbUJBQU8sQ0FBQywyRkFBZ0IsQ0FBQzs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUU7RUFDOUUsSUFBSUMsS0FBSyxHQUFHLElBQUlDLEtBQUssQ0FBQ04sT0FBTyxDQUFDO0VBQzlCLE9BQU9MLFlBQVksQ0FBQ1UsS0FBSyxFQUFFSixNQUFNLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxRQUFRLENBQUM7QUFDN0QsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4vbm9kZV9tb2R1bGVzL2l0ay13YXNtL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcz81YjMzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iXSwibmFtZXMiOlsiZW5oYW5jZUVycm9yIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2UiLCJjb25maWciLCJjb2RlIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiZXJyb3IiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/core/createError.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/core/dispatchRequest.js\\\":\\n/*!******************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/core/dispatchRequest.js ***!\\n  \\\\******************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nvar transformData = __webpack_require__(/*! ./transformData */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/transformData.js\\\\\\\");\\\\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/isCancel.js\\\\\\\");\\\\nvar defaults = __webpack_require__(/*! ../defaults */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/defaults.js\\\\\\\");\\\\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/cancel/Cancel.js\\\\\\\");\\\\n\\\\n/**\\\\n * Throws a `Cancel` if cancellation has been requested.\\\\n */\\\\nfunction throwIfCancellationRequested(config) {\\\\n  if (config.cancelToken) {\\\\n    config.cancelToken.throwIfRequested();\\\\n  }\\\\n  if (config.signal && config.signal.aborted) {\\\\n    throw new Cancel('canceled');\\\\n  }\\\\n}\\\\n\\\\n/**\\\\n * Dispatch a request to the server using the configured adapter.\\\\n *\\\\n * @param {object} config The config that is to be used for the request\\\\n * @returns {Promise} The Promise to be fulfilled\\\\n */\\\\nmodule.exports = function dispatchRequest(config) {\\\\n  throwIfCancellationRequested(config);\\\\n\\\\n  // Ensure headers exist\\\\n  config.headers = config.headers || {};\\\\n\\\\n  // Transform request data\\\\n  config.data = transformData.call(config, config.data, config.headers, config.transformRequest);\\\\n\\\\n  // Flatten headers\\\\n  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);\\\\n  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {\\\\n    delete config.headers[method];\\\\n  });\\\\n  var adapter = config.adapter || defaults.adapter;\\\\n  return adapter(config).then(function onAdapterResolution(response) {\\\\n    throwIfCancellationRequested(config);\\\\n\\\\n    // Transform response data\\\\n    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);\\\\n    return response;\\\\n  }, function onAdapterRejection(reason) {\\\\n    if (!isCancel(reason)) {\\\\n      throwIfCancellationRequested(config);\\\\n\\\\n      // Transform response data\\\\n      if (reason && reason.response) {\\\\n        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);\\\\n      }\\\\n    }\\\\n    return Promise.reject(reason);\\\\n  });\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsMkVBQVksQ0FBQztBQUNqQyxJQUFJQyxhQUFhLEdBQUdELG1CQUFPLENBQUMsNkZBQWlCLENBQUM7QUFDOUMsSUFBSUUsUUFBUSxHQUFHRixtQkFBTyxDQUFDLDZGQUFvQixDQUFDO0FBQzVDLElBQUlHLFFBQVEsR0FBR0gsbUJBQU8sQ0FBQywrRUFBYSxDQUFDO0FBQ3JDLElBQUlJLE1BQU0sR0FBR0osbUJBQU8sQ0FBQyx5RkFBa0IsQ0FBQzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EsU0FBU0ssNEJBQTRCQSxDQUFDQyxNQUFNLEVBQUU7RUFDNUMsSUFBSUEsTUFBTSxDQUFDQyxXQUFXLEVBQUU7SUFDdEJELE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3ZDO0VBRUEsSUFBSUYsTUFBTSxDQUFDRyxNQUFNLElBQUlILE1BQU0sQ0FBQ0csTUFBTSxDQUFDQyxPQUFPLEVBQUU7SUFDMUMsTUFBTSxJQUFJTixNQUFNLENBQUMsVUFBVSxDQUFDO0VBQzlCO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FPLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLGVBQWVBLENBQUNQLE1BQU0sRUFBRTtFQUNoREQsNEJBQTRCLENBQUNDLE1BQU0sQ0FBQzs7RUFFcEM7RUFDQUEsTUFBTSxDQUFDUSxPQUFPLEdBQUdSLE1BQU0sQ0FBQ1EsT0FBTyxJQUFJLENBQUMsQ0FBQzs7RUFFckM7RUFDQVIsTUFBTSxDQUFDUyxJQUFJLEdBQUdkLGFBQWEsQ0FBQ2UsSUFBSSxDQUM5QlYsTUFBTSxFQUNOQSxNQUFNLENBQUNTLElBQUksRUFDWFQsTUFBTSxDQUFDUSxPQUFPLEVBQ2RSLE1BQU0sQ0FBQ1csZ0JBQ1QsQ0FBQzs7RUFFRDtFQUNBWCxNQUFNLENBQUNRLE9BQU8sR0FBR2YsS0FBSyxDQUFDbUIsS0FBSyxDQUMxQlosTUFBTSxDQUFDUSxPQUFPLENBQUNLLE1BQU0sSUFBSSxDQUFDLENBQUMsRUFDM0JiLE1BQU0sQ0FBQ1EsT0FBTyxDQUFDUixNQUFNLENBQUNjLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUNuQ2QsTUFBTSxDQUFDUSxPQUNULENBQUM7RUFFRGYsS0FBSyxDQUFDc0IsT0FBTyxDQUNYLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEVBQzNELFNBQVNDLGlCQUFpQkEsQ0FBQ0YsTUFBTSxFQUFFO0lBQ2pDLE9BQU9kLE1BQU0sQ0FBQ1EsT0FBTyxDQUFDTSxNQUFNLENBQUM7RUFDL0IsQ0FDRixDQUFDO0VBRUQsSUFBSUcsT0FBTyxHQUFHakIsTUFBTSxDQUFDaUIsT0FBTyxJQUFJcEIsUUFBUSxDQUFDb0IsT0FBTztFQUVoRCxPQUFPQSxPQUFPLENBQUNqQixNQUFNLENBQUMsQ0FBQ2tCLElBQUksQ0FBQyxTQUFTQyxtQkFBbUJBLENBQUNDLFFBQVEsRUFBRTtJQUNqRXJCLDRCQUE0QixDQUFDQyxNQUFNLENBQUM7O0lBRXBDO0lBQ0FvQixRQUFRLENBQUNYLElBQUksR0FBR2QsYUFBYSxDQUFDZSxJQUFJLENBQ2hDVixNQUFNLEVBQ05vQixRQUFRLENBQUNYLElBQUksRUFDYlcsUUFBUSxDQUFDWixPQUFPLEVBQ2hCUixNQUFNLENBQUNxQixpQkFDVCxDQUFDO0lBRUQsT0FBT0QsUUFBUTtFQUNqQixDQUFDLEVBQUUsU0FBU0Usa0JBQWtCQSxDQUFDQyxNQUFNLEVBQUU7SUFDckMsSUFBSSxDQUFDM0IsUUFBUSxDQUFDMkIsTUFBTSxDQUFDLEVBQUU7TUFDckJ4Qiw0QkFBNEIsQ0FBQ0MsTUFBTSxDQUFDOztNQUVwQztNQUNBLElBQUl1QixNQUFNLElBQUlBLE1BQU0sQ0FBQ0gsUUFBUSxFQUFFO1FBQzdCRyxNQUFNLENBQUNILFFBQVEsQ0FBQ1gsSUFBSSxHQUFHZCxhQUFhLENBQUNlLElBQUksQ0FDdkNWLE1BQU0sRUFDTnVCLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDWCxJQUFJLEVBQ3BCYyxNQUFNLENBQUNILFFBQVEsQ0FBQ1osT0FBTyxFQUN2QlIsTUFBTSxDQUFDcUIsaUJBQ1QsQ0FBQztNQUNIO0lBQ0Y7SUFFQSxPQUFPRyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDO0VBQy9CLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uL25vZGVfbW9kdWxlcy9pdGstd2FzbS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzPzNjMzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJkZWZhdWx0cyIsIkNhbmNlbCIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJjb25maWciLCJjYW5jZWxUb2tlbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJzaWduYWwiLCJhYm9ydGVkIiwibW9kdWxlIiwiZXhwb3J0cyIsImRpc3BhdGNoUmVxdWVzdCIsImhlYWRlcnMiLCJkYXRhIiwiY2FsbCIsInRyYW5zZm9ybVJlcXVlc3QiLCJtZXJnZSIsImNvbW1vbiIsIm1ldGhvZCIsImZvckVhY2giLCJjbGVhbkhlYWRlckNvbmZpZyIsImFkYXB0ZXIiLCJ0aGVuIiwib25BZGFwdGVyUmVzb2x1dGlvbiIsInJlc3BvbnNlIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJvbkFkYXB0ZXJSZWplY3Rpb24iLCJyZWFzb24iLCJQcm9taXNlIiwicmVqZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/core/dispatchRequest.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/core/enhanceError.js\\\":\\n/*!***************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/core/enhanceError.js ***!\\n  \\\\***************************************************************************/\\n/***/ ((module) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\n/**\\\\n * Update an Error with the specified config, error code, and response.\\\\n *\\\\n * @param {Error} error The error to update.\\\\n * @param {Object} config The config.\\\\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\\\\n * @param {Object} [request] The request.\\\\n * @param {Object} [response] The response.\\\\n * @returns {Error} The error.\\\\n */\\\\nmodule.exports = function enhanceError(error, config, code, request, response) {\\\\n  error.config = config;\\\\n  if (code) {\\\\n    error.code = code;\\\\n  }\\\\n  error.request = request;\\\\n  error.response = response;\\\\n  error.isAxiosError = true;\\\\n  error.toJSON = function toJSON() {\\\\n    return {\\\\n      // Standard\\\\n      message: this.message,\\\\n      name: this.name,\\\\n      // Microsoft\\\\n      description: this.description,\\\\n      number: this.number,\\\\n      // Mozilla\\\\n      fileName: this.fileName,\\\\n      lineNumber: this.lineNumber,\\\\n      columnNumber: this.columnNumber,\\\\n      stack: this.stack,\\\\n      // Axios\\\\n      config: this.config,\\\\n      code: this.code,\\\\n      status: this.response && this.response.status ? this.response.status : null\\\\n    };\\\\n  };\\\\n  return error;\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxZQUFZQSxDQUFDQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRTtFQUM3RUosS0FBSyxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDckIsSUFBSUMsSUFBSSxFQUFFO0lBQ1JGLEtBQUssQ0FBQ0UsSUFBSSxHQUFHQSxJQUFJO0VBQ25CO0VBRUFGLEtBQUssQ0FBQ0csT0FBTyxHQUFHQSxPQUFPO0VBQ3ZCSCxLQUFLLENBQUNJLFFBQVEsR0FBR0EsUUFBUTtFQUN6QkosS0FBSyxDQUFDSyxZQUFZLEdBQUcsSUFBSTtFQUV6QkwsS0FBSyxDQUFDTSxNQUFNLEdBQUcsU0FBU0EsTUFBTUEsQ0FBQSxFQUFHO0lBQy9CLE9BQU87TUFDTDtNQUNBQyxPQUFPLEVBQUUsSUFBSSxDQUFDQSxPQUFPO01BQ3JCQyxJQUFJLEVBQUUsSUFBSSxDQUFDQSxJQUFJO01BQ2Y7TUFDQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0EsV0FBVztNQUM3QkMsTUFBTSxFQUFFLElBQUksQ0FBQ0EsTUFBTTtNQUNuQjtNQUNBQyxRQUFRLEVBQUUsSUFBSSxDQUFDQSxRQUFRO01BQ3ZCQyxVQUFVLEVBQUUsSUFBSSxDQUFDQSxVQUFVO01BQzNCQyxZQUFZLEVBQUUsSUFBSSxDQUFDQSxZQUFZO01BQy9CQyxLQUFLLEVBQUUsSUFBSSxDQUFDQSxLQUFLO01BQ2pCO01BQ0FiLE1BQU0sRUFBRSxJQUFJLENBQUNBLE1BQU07TUFDbkJDLElBQUksRUFBRSxJQUFJLENBQUNBLElBQUk7TUFDZmEsTUFBTSxFQUFFLElBQUksQ0FBQ1gsUUFBUSxJQUFJLElBQUksQ0FBQ0EsUUFBUSxDQUFDVyxNQUFNLEdBQUcsSUFBSSxDQUFDWCxRQUFRLENBQUNXLE1BQU0sR0FBRztJQUN6RSxDQUFDO0VBQ0gsQ0FBQztFQUNELE9BQU9mLEtBQUs7QUFDZCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcz9iMDU4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJlbmhhbmNlRXJyb3IiLCJlcnJvciIsImNvbmZpZyIsImNvZGUiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJpc0F4aW9zRXJyb3IiLCJ0b0pTT04iLCJtZXNzYWdlIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/core/enhanceError.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/core/mergeConfig.js\\\":\\n/*!**************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/core/mergeConfig.js ***!\\n  \\\\**************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\n\\\\n/**\\\\n * Config-specific merge-function which creates a new config-object\\\\n * by merging two configuration objects together.\\\\n *\\\\n * @param {Object} config1\\\\n * @param {Object} config2\\\\n * @returns {Object} New object resulting from merging config2 to config1\\\\n */\\\\nmodule.exports = function mergeConfig(config1, config2) {\\\\n  // eslint-disable-next-line no-param-reassign\\\\n  config2 = config2 || {};\\\\n  var config = {};\\\\n  function getMergedValue(target, source) {\\\\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\\\\n      return utils.merge(target, source);\\\\n    } else if (utils.isPlainObject(source)) {\\\\n      return utils.merge({}, source);\\\\n    } else if (utils.isArray(source)) {\\\\n      return source.slice();\\\\n    }\\\\n    return source;\\\\n  }\\\\n\\\\n  // eslint-disable-next-line consistent-return\\\\n  function mergeDeepProperties(prop) {\\\\n    if (!utils.isUndefined(config2[prop])) {\\\\n      return getMergedValue(config1[prop], config2[prop]);\\\\n    } else if (!utils.isUndefined(config1[prop])) {\\\\n      return getMergedValue(undefined, config1[prop]);\\\\n    }\\\\n  }\\\\n\\\\n  // eslint-disable-next-line consistent-return\\\\n  function valueFromConfig2(prop) {\\\\n    if (!utils.isUndefined(config2[prop])) {\\\\n      return getMergedValue(undefined, config2[prop]);\\\\n    }\\\\n  }\\\\n\\\\n  // eslint-disable-next-line consistent-return\\\\n  function defaultToConfig2(prop) {\\\\n    if (!utils.isUndefined(config2[prop])) {\\\\n      return getMergedValue(undefined, config2[prop]);\\\\n    } else if (!utils.isUndefined(config1[prop])) {\\\\n      return getMergedValue(undefined, config1[prop]);\\\\n    }\\\\n  }\\\\n\\\\n  // eslint-disable-next-line consistent-return\\\\n  function mergeDirectKeys(prop) {\\\\n    if (prop in config2) {\\\\n      return getMergedValue(config1[prop], config2[prop]);\\\\n    } else if (prop in config1) {\\\\n      return getMergedValue(undefined, config1[prop]);\\\\n    }\\\\n  }\\\\n  var mergeMap = {\\\\n    'url': valueFromConfig2,\\\\n    'method': valueFromConfig2,\\\\n    'data': valueFromConfig2,\\\\n    'baseURL': defaultToConfig2,\\\\n    'transformRequest': defaultToConfig2,\\\\n    'transformResponse': defaultToConfig2,\\\\n    'paramsSerializer': defaultToConfig2,\\\\n    'timeout': defaultToConfig2,\\\\n    'timeoutMessage': defaultToConfig2,\\\\n    'withCredentials': defaultToConfig2,\\\\n    'adapter': defaultToConfig2,\\\\n    'responseType': defaultToConfig2,\\\\n    'xsrfCookieName': defaultToConfig2,\\\\n    'xsrfHeaderName': defaultToConfig2,\\\\n    'onUploadProgress': defaultToConfig2,\\\\n    'onDownloadProgress': defaultToConfig2,\\\\n    'decompress': defaultToConfig2,\\\\n    'maxContentLength': defaultToConfig2,\\\\n    'maxBodyLength': defaultToConfig2,\\\\n    'transport': defaultToConfig2,\\\\n    'httpAgent': defaultToConfig2,\\\\n    'httpsAgent': defaultToConfig2,\\\\n    'cancelToken': defaultToConfig2,\\\\n    'socketPath': defaultToConfig2,\\\\n    'responseEncoding': defaultToConfig2,\\\\n    'validateStatus': mergeDirectKeys\\\\n  };\\\\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\\\\n    var merge = mergeMap[prop] || mergeDeepProperties;\\\\n    var configValue = merge(prop);\\\\n    utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);\\\\n  });\\\\n  return config;\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/core/mergeConfig.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/core/settle.js\\\":\\n/*!*********************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/core/settle.js ***!\\n  \\\\*********************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar createError = __webpack_require__(/*! ./createError */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/createError.js\\\\\\\");\\\\n\\\\n/**\\\\n * Resolve or reject a Promise based on response status.\\\\n *\\\\n * @param {Function} resolve A function that resolves the promise.\\\\n * @param {Function} reject A function that rejects the promise.\\\\n * @param {object} response The response.\\\\n */\\\\nmodule.exports = function settle(resolve, reject, response) {\\\\n  var validateStatus = response.config.validateStatus;\\\\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\\\\n    resolve(response);\\\\n  } else {\\\\n    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));\\\\n  }\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMseUZBQWUsQ0FBQzs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsTUFBTUEsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRTtFQUMxRCxJQUFJQyxjQUFjLEdBQUdELFFBQVEsQ0FBQ0UsTUFBTSxDQUFDRCxjQUFjO0VBQ25ELElBQUksQ0FBQ0QsUUFBUSxDQUFDRyxNQUFNLElBQUksQ0FBQ0YsY0FBYyxJQUFJQSxjQUFjLENBQUNELFFBQVEsQ0FBQ0csTUFBTSxDQUFDLEVBQUU7SUFDMUVMLE9BQU8sQ0FBQ0UsUUFBUSxDQUFDO0VBQ25CLENBQUMsTUFBTTtJQUNMRCxNQUFNLENBQUNOLFdBQVcsQ0FDaEIsa0NBQWtDLEdBQUdPLFFBQVEsQ0FBQ0csTUFBTSxFQUNwREgsUUFBUSxDQUFDRSxNQUFNLEVBQ2YsSUFBSSxFQUNKRixRQUFRLENBQUNJLE9BQU8sRUFDaEJKLFFBQ0YsQ0FBQyxDQUFDO0VBQ0o7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcz85NmU4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUVycm9yIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXR0bGUiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVzcG9uc2UiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbmZpZyIsInN0YXR1cyIsInJlcXVlc3QiXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/core/settle.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/core/transformData.js\\\":\\n/*!****************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/core/transformData.js ***!\\n  \\\\****************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nvar defaults = __webpack_require__(/*! ./../defaults */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/defaults.js\\\\\\\");\\\\n\\\\n/**\\\\n * Transform the data for a request or a response\\\\n *\\\\n * @param {Object|String} data The data to be transformed\\\\n * @param {Array} headers The headers for the request or response\\\\n * @param {Array|Function} fns A single function or Array of functions\\\\n * @returns {*} The resulting transformed data\\\\n */\\\\nmodule.exports = function transformData(data, headers, fns) {\\\\n  var context = this || defaults;\\\\n  /*eslint no-param-reassign:0*/\\\\n  utils.forEach(fns, function transform(fn) {\\\\n    data = fn.call(context, data, headers);\\\\n  });\\\\n  return data;\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLDJFQUFZLENBQUM7QUFDakMsSUFBSUMsUUFBUSxHQUFHRCxtQkFBTyxDQUFDLGlGQUFlLENBQUM7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUUsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsYUFBYUEsQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLEdBQUcsRUFBRTtFQUMxRCxJQUFJQyxPQUFPLEdBQUcsSUFBSSxJQUFJUCxRQUFRO0VBQzlCO0VBQ0FGLEtBQUssQ0FBQ1UsT0FBTyxDQUFDRixHQUFHLEVBQUUsU0FBU0csU0FBU0EsQ0FBQ0MsRUFBRSxFQUFFO0lBQ3hDTixJQUFJLEdBQUdNLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDSixPQUFPLEVBQUVILElBQUksRUFBRUMsT0FBTyxDQUFDO0VBQ3hDLENBQUMsQ0FBQztFQUVGLE9BQU9ELElBQUk7QUFDYixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanM/OTEzYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImRlZmF1bHRzIiwibW9kdWxlIiwiZXhwb3J0cyIsInRyYW5zZm9ybURhdGEiLCJkYXRhIiwiaGVhZGVycyIsImZucyIsImNvbnRleHQiLCJmb3JFYWNoIiwidHJhbnNmb3JtIiwiZm4iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/core/transformData.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/defaults.js\\\":\\n/*!******************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/defaults.js ***!\\n  \\\\******************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/normalizeHeaderName.js\\\\\\\");\\\\nvar enhanceError = __webpack_require__(/*! ./core/enhanceError */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/core/enhanceError.js\\\\\\\");\\\\nvar DEFAULT_CONTENT_TYPE = {\\\\n  'Content-Type': 'application/x-www-form-urlencoded'\\\\n};\\\\nfunction setContentTypeIfUnset(headers, value) {\\\\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\\\\n    headers['Content-Type'] = value;\\\\n  }\\\\n}\\\\nfunction getDefaultAdapter() {\\\\n  var adapter;\\\\n  if (typeof XMLHttpRequest !== 'undefined') {\\\\n    // For browsers use XHR adapter\\\\n    adapter = __webpack_require__(/*! ./adapters/xhr */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/adapters/xhr.js\\\\\\\");\\\\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\\\\n    // For node use HTTP adapter\\\\n    adapter = __webpack_require__(/*! ./adapters/http */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/adapters/xhr.js\\\\\\\");\\\\n  }\\\\n  return adapter;\\\\n}\\\\nfunction stringifySafely(rawValue, parser, encoder) {\\\\n  if (utils.isString(rawValue)) {\\\\n    try {\\\\n      (parser || JSON.parse)(rawValue);\\\\n      return utils.trim(rawValue);\\\\n    } catch (e) {\\\\n      if (e.name !== 'SyntaxError') {\\\\n        throw e;\\\\n      }\\\\n    }\\\\n  }\\\\n  return (encoder || JSON.stringify)(rawValue);\\\\n}\\\\nvar defaults = {\\\\n  transitional: {\\\\n    silentJSONParsing: true,\\\\n    forcedJSONParsing: true,\\\\n    clarifyTimeoutError: false\\\\n  },\\\\n  adapter: getDefaultAdapter(),\\\\n  transformRequest: [function transformRequest(data, headers) {\\\\n    normalizeHeaderName(headers, 'Accept');\\\\n    normalizeHeaderName(headers, 'Content-Type');\\\\n    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\\\\n      return data;\\\\n    }\\\\n    if (utils.isArrayBufferView(data)) {\\\\n      return data.buffer;\\\\n    }\\\\n    if (utils.isURLSearchParams(data)) {\\\\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\\\\n      return data.toString();\\\\n    }\\\\n    if (utils.isObject(data) || headers && headers['Content-Type'] === 'application/json') {\\\\n      setContentTypeIfUnset(headers, 'application/json');\\\\n      return stringifySafely(data);\\\\n    }\\\\n    return data;\\\\n  }],\\\\n  transformResponse: [function transformResponse(data) {\\\\n    var transitional = this.transitional || defaults.transitional;\\\\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\\\\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\\\\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\\\\n    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\\\\n      try {\\\\n        return JSON.parse(data);\\\\n      } catch (e) {\\\\n        if (strictJSONParsing) {\\\\n          if (e.name === 'SyntaxError') {\\\\n            throw enhanceError(e, this, 'E_JSON_PARSE');\\\\n          }\\\\n          throw e;\\\\n        }\\\\n      }\\\\n    }\\\\n    return data;\\\\n  }],\\\\n  /**\\\\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\\\\n   * timeout is not created.\\\\n   */\\\\n  timeout: 0,\\\\n  xsrfCookieName: 'XSRF-TOKEN',\\\\n  xsrfHeaderName: 'X-XSRF-TOKEN',\\\\n  maxContentLength: -1,\\\\n  maxBodyLength: -1,\\\\n  validateStatus: function validateStatus(status) {\\\\n    return status >= 200 && status < 300;\\\\n  },\\\\n  headers: {\\\\n    common: {\\\\n      'Accept': 'application/json, text/plain, */*'\\\\n    }\\\\n  }\\\\n};\\\\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\\\\n  defaults.headers[method] = {};\\\\n});\\\\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\\\\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\\\\n});\\\\nmodule.exports = defaults;//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/defaults.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/env/data.js\\\":\\n/*!******************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/env/data.js ***!\\n  \\\\******************************************************************/\\n/***/ ((module) => {\\n\\neval(\\\"module.exports = {\\\\n  \\\\\\\"version\\\\\\\": \\\\\\\"0.23.0\\\\\\\"\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcy5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4vbm9kZV9tb2R1bGVzL2l0ay13YXNtL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanM/ZTNhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4yMy4wXCJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZixTQUFTLEVBQUU7QUFDYixDQUFDIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/env/data.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/bind.js\\\":\\n/*!**********************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/bind.js ***!\\n  \\\\**********************************************************************/\\n/***/ ((module) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nmodule.exports = function bind(fn, thisArg) {\\\\n  return function wrap() {\\\\n    var args = new Array(arguments.length);\\\\n    for (var i = 0; i < args.length; i++) {\\\\n      args[i] = arguments[i];\\\\n    }\\\\n    return fn.apply(thisArg, args);\\\\n  };\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLElBQUlBLENBQUNDLEVBQUUsRUFBRUMsT0FBTyxFQUFFO0VBQzFDLE9BQU8sU0FBU0MsSUFBSUEsQ0FBQSxFQUFHO0lBQ3JCLElBQUlDLElBQUksR0FBRyxJQUFJQyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDO0lBQ3RDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSixJQUFJLENBQUNHLE1BQU0sRUFBRUMsQ0FBQyxFQUFFLEVBQUU7TUFDcENKLElBQUksQ0FBQ0ksQ0FBQyxDQUFDLEdBQUdGLFNBQVMsQ0FBQ0UsQ0FBQyxDQUFDO0lBQ3hCO0lBQ0EsT0FBT1AsRUFBRSxDQUFDUSxLQUFLLENBQUNQLE9BQU8sRUFBRUUsSUFBSSxDQUFDO0VBQ2hDLENBQUM7QUFDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanM/ZWU0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJmbiIsInRoaXNBcmciLCJ3cmFwIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiaSIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/bind.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/buildURL.js\\\":\\n/*!**************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/buildURL.js ***!\\n  \\\\**************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nfunction encode(val) {\\\\n  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');\\\\n}\\\\n\\\\n/**\\\\n * Build a URL by appending params to the end\\\\n *\\\\n * @param {string} url The base of the url (e.g., http://www.google.com)\\\\n * @param {object} [params] The params to be appended\\\\n * @returns {string} The formatted url\\\\n */\\\\nmodule.exports = function buildURL(url, params, paramsSerializer) {\\\\n  /*eslint no-param-reassign:0*/\\\\n  if (!params) {\\\\n    return url;\\\\n  }\\\\n  var serializedParams;\\\\n  if (paramsSerializer) {\\\\n    serializedParams = paramsSerializer(params);\\\\n  } else if (utils.isURLSearchParams(params)) {\\\\n    serializedParams = params.toString();\\\\n  } else {\\\\n    var parts = [];\\\\n    utils.forEach(params, function serialize(val, key) {\\\\n      if (val === null || typeof val === 'undefined') {\\\\n        return;\\\\n      }\\\\n      if (utils.isArray(val)) {\\\\n        key = key + '[]';\\\\n      } else {\\\\n        val = [val];\\\\n      }\\\\n      utils.forEach(val, function parseValue(v) {\\\\n        if (utils.isDate(v)) {\\\\n          v = v.toISOString();\\\\n        } else if (utils.isObject(v)) {\\\\n          v = JSON.stringify(v);\\\\n        }\\\\n        parts.push(encode(key) + '=' + encode(v));\\\\n      });\\\\n    });\\\\n    serializedParams = parts.join('&');\\\\n  }\\\\n  if (serializedParams) {\\\\n    var hashmarkIndex = url.indexOf('#');\\\\n    if (hashmarkIndex !== -1) {\\\\n      url = url.slice(0, hashmarkIndex);\\\\n    }\\\\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\\\\n  }\\\\n  return url;\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQywyRUFBWSxDQUFDO0FBRWpDLFNBQVNDLE1BQU1BLENBQUNDLEdBQUcsRUFBRTtFQUNuQixPQUFPQyxrQkFBa0IsQ0FBQ0QsR0FBRyxDQUFDLENBQzVCRSxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUNyQkEsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FDcEJBLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQ3JCQSxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUNwQkEsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FDckJBLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLFFBQVFBLENBQUNDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxnQkFBZ0IsRUFBRTtFQUNoRTtFQUNBLElBQUksQ0FBQ0QsTUFBTSxFQUFFO0lBQ1gsT0FBT0QsR0FBRztFQUNaO0VBRUEsSUFBSUcsZ0JBQWdCO0VBQ3BCLElBQUlELGdCQUFnQixFQUFFO0lBQ3BCQyxnQkFBZ0IsR0FBR0QsZ0JBQWdCLENBQUNELE1BQU0sQ0FBQztFQUM3QyxDQUFDLE1BQU0sSUFBSVYsS0FBSyxDQUFDYSxpQkFBaUIsQ0FBQ0gsTUFBTSxDQUFDLEVBQUU7SUFDMUNFLGdCQUFnQixHQUFHRixNQUFNLENBQUNJLFFBQVEsQ0FBQyxDQUFDO0VBQ3RDLENBQUMsTUFBTTtJQUNMLElBQUlDLEtBQUssR0FBRyxFQUFFO0lBRWRmLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQ04sTUFBTSxFQUFFLFNBQVNPLFNBQVNBLENBQUNkLEdBQUcsRUFBRWUsR0FBRyxFQUFFO01BQ2pELElBQUlmLEdBQUcsS0FBSyxJQUFJLElBQUksT0FBT0EsR0FBRyxLQUFLLFdBQVcsRUFBRTtRQUM5QztNQUNGO01BRUEsSUFBSUgsS0FBSyxDQUFDbUIsT0FBTyxDQUFDaEIsR0FBRyxDQUFDLEVBQUU7UUFDdEJlLEdBQUcsR0FBR0EsR0FBRyxHQUFHLElBQUk7TUFDbEIsQ0FBQyxNQUFNO1FBQ0xmLEdBQUcsR0FBRyxDQUFDQSxHQUFHLENBQUM7TUFDYjtNQUVBSCxLQUFLLENBQUNnQixPQUFPLENBQUNiLEdBQUcsRUFBRSxTQUFTaUIsVUFBVUEsQ0FBQ0MsQ0FBQyxFQUFFO1FBQ3hDLElBQUlyQixLQUFLLENBQUNzQixNQUFNLENBQUNELENBQUMsQ0FBQyxFQUFFO1VBQ25CQSxDQUFDLEdBQUdBLENBQUMsQ0FBQ0UsV0FBVyxDQUFDLENBQUM7UUFDckIsQ0FBQyxNQUFNLElBQUl2QixLQUFLLENBQUN3QixRQUFRLENBQUNILENBQUMsQ0FBQyxFQUFFO1VBQzVCQSxDQUFDLEdBQUdJLElBQUksQ0FBQ0MsU0FBUyxDQUFDTCxDQUFDLENBQUM7UUFDdkI7UUFDQU4sS0FBSyxDQUFDWSxJQUFJLENBQUN6QixNQUFNLENBQUNnQixHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUdoQixNQUFNLENBQUNtQixDQUFDLENBQUMsQ0FBQztNQUMzQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7SUFFRlQsZ0JBQWdCLEdBQUdHLEtBQUssQ0FBQ2EsSUFBSSxDQUFDLEdBQUcsQ0FBQztFQUNwQztFQUVBLElBQUloQixnQkFBZ0IsRUFBRTtJQUNwQixJQUFJaUIsYUFBYSxHQUFHcEIsR0FBRyxDQUFDcUIsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNwQyxJQUFJRCxhQUFhLEtBQUssQ0FBQyxDQUFDLEVBQUU7TUFDeEJwQixHQUFHLEdBQUdBLEdBQUcsQ0FBQ3NCLEtBQUssQ0FBQyxDQUFDLEVBQUVGLGFBQWEsQ0FBQztJQUNuQztJQUVBcEIsR0FBRyxJQUFJLENBQUNBLEdBQUcsQ0FBQ3FCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJbEIsZ0JBQWdCO0VBQ2pFO0VBRUEsT0FBT0gsR0FBRztBQUNaLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uL25vZGVfbW9kdWxlcy9pdGstd2FzbS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanM/MDkxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImVuY29kZSIsInZhbCIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVpbGRVUkwiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsImlzVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJwYXJ0cyIsImZvckVhY2giLCJzZXJpYWxpemUiLCJrZXkiLCJpc0FycmF5IiwicGFyc2VWYWx1ZSIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImlzT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJqb2luIiwiaGFzaG1hcmtJbmRleCIsImluZGV4T2YiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/buildURL.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/combineURLs.js\\\":\\n/*!*****************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/combineURLs.js ***!\\n  \\\\*****************************************************************************/\\n/***/ ((module) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\n/**\\\\n * Creates a new URL by combining the specified URLs\\\\n *\\\\n * @param {string} baseURL The base URL\\\\n * @param {string} relativeURL The relative URL\\\\n * @returns {string} The combined URL\\\\n */\\\\nmodule.exports = function combineURLs(baseURL, relativeURL) {\\\\n  return relativeURL ? baseURL.replace(/\\\\\\\\/+$/, '') + '/' + relativeURL.replace(/^\\\\\\\\/+/, '') : baseURL;\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLFdBQVdBLENBQUNDLE9BQU8sRUFBRUMsV0FBVyxFQUFFO0VBQzFELE9BQU9BLFdBQVcsR0FDZEQsT0FBTyxDQUFDRSxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBR0QsV0FBVyxDQUFDQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxHQUNuRUYsT0FBTztBQUNiLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uL25vZGVfbW9kdWxlcy9pdGstd2FzbS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanM/NmJkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNvbWJpbmVVUkxzIiwiYmFzZVVSTCIsInJlbGF0aXZlVVJMIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/combineURLs.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/cookies.js\\\":\\n/*!*************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/cookies.js ***!\\n  \\\\*************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nmodule.exports = utils.isStandardBrowserEnv() ?\\\\n// Standard browser envs support document.cookie\\\\nfunction standardBrowserEnv() {\\\\n  return {\\\\n    write: function write(name, value, expires, path, domain, secure) {\\\\n      var cookie = [];\\\\n      cookie.push(name + '=' + encodeURIComponent(value));\\\\n      if (utils.isNumber(expires)) {\\\\n        cookie.push('expires=' + new Date(expires).toGMTString());\\\\n      }\\\\n      if (utils.isString(path)) {\\\\n        cookie.push('path=' + path);\\\\n      }\\\\n      if (utils.isString(domain)) {\\\\n        cookie.push('domain=' + domain);\\\\n      }\\\\n      if (secure === true) {\\\\n        cookie.push('secure');\\\\n      }\\\\n      document.cookie = cookie.join('; ');\\\\n    },\\\\n    read: function read(name) {\\\\n      var match = document.cookie.match(new RegExp('(^|;\\\\\\\\\\\\\\\\s*)(' + name + ')=([^;]*)'));\\\\n      return match ? decodeURIComponent(match[3]) : null;\\\\n    },\\\\n    remove: function remove(name) {\\\\n      this.write(name, '', Date.now() - 86400000);\\\\n    }\\\\n  };\\\\n}() :\\\\n// Non standard browser env (web workers, react-native) lack needed support.\\\\nfunction nonStandardBrowserEnv() {\\\\n  return {\\\\n    write: function write() {},\\\\n    read: function read() {\\\\n      return null;\\\\n    },\\\\n    remove: function remove() {}\\\\n  };\\\\n}();//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLDJFQUFZLENBQUM7QUFFakNDLE1BQU0sQ0FBQ0MsT0FBTyxHQUNaSCxLQUFLLENBQUNJLG9CQUFvQixDQUFDLENBQUM7QUFFNUI7QUFDRyxTQUFTQyxrQkFBa0JBLENBQUEsRUFBRztFQUM3QixPQUFPO0lBQ0xDLEtBQUssRUFBRSxTQUFTQSxLQUFLQSxDQUFDQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFO01BQ2hFLElBQUlDLE1BQU0sR0FBRyxFQUFFO01BQ2ZBLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDUCxJQUFJLEdBQUcsR0FBRyxHQUFHUSxrQkFBa0IsQ0FBQ1AsS0FBSyxDQUFDLENBQUM7TUFFbkQsSUFBSVIsS0FBSyxDQUFDZ0IsUUFBUSxDQUFDUCxPQUFPLENBQUMsRUFBRTtRQUMzQkksTUFBTSxDQUFDQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUlHLElBQUksQ0FBQ1IsT0FBTyxDQUFDLENBQUNTLFdBQVcsQ0FBQyxDQUFDLENBQUM7TUFDM0Q7TUFFQSxJQUFJbEIsS0FBSyxDQUFDbUIsUUFBUSxDQUFDVCxJQUFJLENBQUMsRUFBRTtRQUN4QkcsTUFBTSxDQUFDQyxJQUFJLENBQUMsT0FBTyxHQUFHSixJQUFJLENBQUM7TUFDN0I7TUFFQSxJQUFJVixLQUFLLENBQUNtQixRQUFRLENBQUNSLE1BQU0sQ0FBQyxFQUFFO1FBQzFCRSxNQUFNLENBQUNDLElBQUksQ0FBQyxTQUFTLEdBQUdILE1BQU0sQ0FBQztNQUNqQztNQUVBLElBQUlDLE1BQU0sS0FBSyxJQUFJLEVBQUU7UUFDbkJDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLFFBQVEsQ0FBQztNQUN2QjtNQUVBTSxRQUFRLENBQUNQLE1BQU0sR0FBR0EsTUFBTSxDQUFDUSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JDLENBQUM7SUFFREMsSUFBSSxFQUFFLFNBQVNBLElBQUlBLENBQUNmLElBQUksRUFBRTtNQUN4QixJQUFJZ0IsS0FBSyxHQUFHSCxRQUFRLENBQUNQLE1BQU0sQ0FBQ1UsS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQyxZQUFZLEdBQUdqQixJQUFJLEdBQUcsV0FBVyxDQUFDLENBQUM7TUFDaEYsT0FBUWdCLEtBQUssR0FBR0Usa0JBQWtCLENBQUNGLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUk7SUFDckQsQ0FBQztJQUVERyxNQUFNLEVBQUUsU0FBU0EsTUFBTUEsQ0FBQ25CLElBQUksRUFBRTtNQUM1QixJQUFJLENBQUNELEtBQUssQ0FBQ0MsSUFBSSxFQUFFLEVBQUUsRUFBRVUsSUFBSSxDQUFDVSxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUM3QztFQUNGLENBQUM7QUFDSCxDQUFDLENBQUUsQ0FBQztBQUVOO0FBQ0csU0FBU0MscUJBQXFCQSxDQUFBLEVBQUc7RUFDaEMsT0FBTztJQUNMdEIsS0FBSyxFQUFFLFNBQVNBLEtBQUtBLENBQUEsRUFBRyxDQUFDLENBQUM7SUFDMUJnQixJQUFJLEVBQUUsU0FBU0EsSUFBSUEsQ0FBQSxFQUFHO01BQUUsT0FBTyxJQUFJO0lBQUUsQ0FBQztJQUN0Q0ksTUFBTSxFQUFFLFNBQVNBLE1BQU1BLENBQUEsRUFBRyxDQUFDO0VBQzdCLENBQUM7QUFDSCxDQUFDLENBQUUsQ0FDTiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4vbm9kZV9tb2R1bGVzL2l0ay13YXNtL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzPzM4MGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzU3RhbmRhcmRCcm93c2VyRW52Iiwic3RhbmRhcmRCcm93c2VyRW52Iiwid3JpdGUiLCJuYW1lIiwidmFsdWUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInB1c2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImlzU3RyaW5nIiwiZG9jdW1lbnQiLCJqb2luIiwicmVhZCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93Iiwibm9uU3RhbmRhcmRCcm93c2VyRW52Il0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/cookies.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/isAbsoluteURL.js\\\":\\n/*!*******************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/isAbsoluteURL.js ***!\\n  \\\\*******************************************************************************/\\n/***/ ((module) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\n/**\\\\n * Determines whether the specified URL is absolute\\\\n *\\\\n * @param {string} url The URL to test\\\\n * @returns {boolean} True if the specified URL is absolute, otherwise false\\\\n */\\\\nmodule.exports = function isAbsoluteURL(url) {\\\\n  // A URL is considered absolute if it begins with \\\\\\\"<scheme>://\\\\\\\" or \\\\\\\"//\\\\\\\" (protocol-relative URL).\\\\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\\\\n  // by any combination of letters, digits, plus, period, or hyphen.\\\\n  return /^([a-z][a-z\\\\\\\\d\\\\\\\\+\\\\\\\\-\\\\\\\\.]*:)?\\\\\\\\/\\\\\\\\//i.test(url);\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLGFBQWFBLENBQUNDLEdBQUcsRUFBRTtFQUMzQztFQUNBO0VBQ0E7RUFDQSxPQUFPLCtCQUErQixDQUFDQyxJQUFJLENBQUNELEdBQUcsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanM/NTE3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXNBYnNvbHV0ZVVSTCIsInVybCIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/isAbsoluteURL.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/isAxiosError.js\\\":\\n/*!******************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/isAxiosError.js ***!\\n  \\\\******************************************************************************/\\n/***/ ((module) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\n/**\\\\n * Determines whether the payload is an error thrown by Axios\\\\n *\\\\n * @param {*} payload The value to test\\\\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\\\\n */\\\\nmodule.exports = function isAxiosError(payload) {\\\\n  return typeof payload === 'object' && payload.isAxiosError === true;\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsWUFBWUEsQ0FBQ0MsT0FBTyxFQUFFO0VBQzlDLE9BQVEsT0FBT0EsT0FBTyxLQUFLLFFBQVEsSUFBTUEsT0FBTyxDQUFDRCxZQUFZLEtBQUssSUFBSztBQUN6RSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcz9iMzIyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXNBeGlvc0Vycm9yIiwicGF5bG9hZCJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/isAxiosError.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/isURLSameOrigin.js\\\":\\n/*!*********************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/isURLSameOrigin.js ***!\\n  \\\\*********************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nmodule.exports = utils.isStandardBrowserEnv() ?\\\\n// Standard browser envs have full support of the APIs needed to test\\\\n// whether the request URL is of the same origin as current location.\\\\nfunction standardBrowserEnv() {\\\\n  var msie = /(msie|trident)/i.test(navigator.userAgent);\\\\n  var urlParsingNode = document.createElement('a');\\\\n  var originURL;\\\\n\\\\n  /**\\\\n  * Parse a URL to discover it's components\\\\n  *\\\\n  * @param {String} url The URL to be parsed\\\\n  * @returns {Object}\\\\n  */\\\\n  function resolveURL(url) {\\\\n    var href = url;\\\\n    if (msie) {\\\\n      // IE needs attribute set twice to normalize properties\\\\n      urlParsingNode.setAttribute('href', href);\\\\n      href = urlParsingNode.href;\\\\n    }\\\\n    urlParsingNode.setAttribute('href', href);\\\\n\\\\n    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\\\\n    return {\\\\n      href: urlParsingNode.href,\\\\n      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\\\\n      host: urlParsingNode.host,\\\\n      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\\\\\\\?/, '') : '',\\\\n      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\\\\n      hostname: urlParsingNode.hostname,\\\\n      port: urlParsingNode.port,\\\\n      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname\\\\n    };\\\\n  }\\\\n  originURL = resolveURL(window.location.href);\\\\n\\\\n  /**\\\\n  * Determine if a URL shares the same origin as the current location\\\\n  *\\\\n  * @param {String} requestURL The URL to test\\\\n  * @returns {boolean} True if URL shares the same origin, otherwise false\\\\n  */\\\\n  return function isURLSameOrigin(requestURL) {\\\\n    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;\\\\n    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;\\\\n  };\\\\n}() :\\\\n// Non standard browser envs (web workers, react-native) lack needed support.\\\\nfunction nonStandardBrowserEnv() {\\\\n  return function isURLSameOrigin() {\\\\n    return true;\\\\n  };\\\\n}();//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsMkVBQVksQ0FBQztBQUVqQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQ1pILEtBQUssQ0FBQ0ksb0JBQW9CLENBQUMsQ0FBQztBQUU1QjtBQUNBO0FBQ0csU0FBU0Msa0JBQWtCQSxDQUFBLEVBQUc7RUFDN0IsSUFBSUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDO0VBQ3RELElBQUlDLGNBQWMsR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsR0FBRyxDQUFDO0VBQ2hELElBQUlDLFNBQVM7O0VBRWI7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ00sU0FBU0MsVUFBVUEsQ0FBQ0MsR0FBRyxFQUFFO0lBQ3ZCLElBQUlDLElBQUksR0FBR0QsR0FBRztJQUVkLElBQUlULElBQUksRUFBRTtNQUNWO01BQ0VJLGNBQWMsQ0FBQ08sWUFBWSxDQUFDLE1BQU0sRUFBRUQsSUFBSSxDQUFDO01BQ3pDQSxJQUFJLEdBQUdOLGNBQWMsQ0FBQ00sSUFBSTtJQUM1QjtJQUVBTixjQUFjLENBQUNPLFlBQVksQ0FBQyxNQUFNLEVBQUVELElBQUksQ0FBQzs7SUFFekM7SUFDQSxPQUFPO01BQ0xBLElBQUksRUFBRU4sY0FBYyxDQUFDTSxJQUFJO01BQ3pCRSxRQUFRLEVBQUVSLGNBQWMsQ0FBQ1EsUUFBUSxHQUFHUixjQUFjLENBQUNRLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFO01BQ2xGQyxJQUFJLEVBQUVWLGNBQWMsQ0FBQ1UsSUFBSTtNQUN6QkMsTUFBTSxFQUFFWCxjQUFjLENBQUNXLE1BQU0sR0FBR1gsY0FBYyxDQUFDVyxNQUFNLENBQUNGLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRTtNQUM3RUcsSUFBSSxFQUFFWixjQUFjLENBQUNZLElBQUksR0FBR1osY0FBYyxDQUFDWSxJQUFJLENBQUNILE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRTtNQUN0RUksUUFBUSxFQUFFYixjQUFjLENBQUNhLFFBQVE7TUFDakNDLElBQUksRUFBRWQsY0FBYyxDQUFDYyxJQUFJO01BQ3pCQyxRQUFRLEVBQUdmLGNBQWMsQ0FBQ2UsUUFBUSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUNsRGhCLGNBQWMsQ0FBQ2UsUUFBUSxHQUN2QixHQUFHLEdBQUdmLGNBQWMsQ0FBQ2U7SUFDekIsQ0FBQztFQUNIO0VBRUFaLFNBQVMsR0FBR0MsVUFBVSxDQUFDYSxNQUFNLENBQUNDLFFBQVEsQ0FBQ1osSUFBSSxDQUFDOztFQUU1QztBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDTSxPQUFPLFNBQVNhLGVBQWVBLENBQUNDLFVBQVUsRUFBRTtJQUMxQyxJQUFJQyxNQUFNLEdBQUkvQixLQUFLLENBQUNnQyxRQUFRLENBQUNGLFVBQVUsQ0FBQyxHQUFJaEIsVUFBVSxDQUFDZ0IsVUFBVSxDQUFDLEdBQUdBLFVBQVU7SUFDL0UsT0FBUUMsTUFBTSxDQUFDYixRQUFRLEtBQUtMLFNBQVMsQ0FBQ0ssUUFBUSxJQUMxQ2EsTUFBTSxDQUFDWCxJQUFJLEtBQUtQLFNBQVMsQ0FBQ08sSUFBSTtFQUNwQyxDQUFDO0FBQ0gsQ0FBQyxDQUFFLENBQUM7QUFFTjtBQUNHLFNBQVNhLHFCQUFxQkEsQ0FBQSxFQUFHO0VBQ2hDLE9BQU8sU0FBU0osZUFBZUEsQ0FBQSxFQUFHO0lBQ2hDLE9BQU8sSUFBSTtFQUNiLENBQUM7QUFDSCxDQUFDLENBQUUsQ0FDTiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4vbm9kZV9tb2R1bGVzL2l0ay13YXNtL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanM/Mjc5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsInN0YW5kYXJkQnJvd3NlckVudiIsIm1zaWUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJvcmlnaW5VUkwiLCJyZXNvbHZlVVJMIiwidXJsIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwicmVwbGFjZSIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImlzVVJMU2FtZU9yaWdpbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJpc1N0cmluZyIsIm5vblN0YW5kYXJkQnJvd3NlckVudiJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/isURLSameOrigin.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/normalizeHeaderName.js\\\":\\n/*!*************************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/normalizeHeaderName.js ***!\\n  \\\\*************************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\\\\n  utils.forEach(headers, function processHeader(value, name) {\\\\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\\\\n      headers[normalizedName] = value;\\\\n      delete headers[name];\\\\n    }\\\\n  });\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLHlFQUFVLENBQUM7QUFFL0JDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLG1CQUFtQkEsQ0FBQ0MsT0FBTyxFQUFFQyxjQUFjLEVBQUU7RUFDckVOLEtBQUssQ0FBQ08sT0FBTyxDQUFDRixPQUFPLEVBQUUsU0FBU0csYUFBYUEsQ0FBQ0MsS0FBSyxFQUFFQyxJQUFJLEVBQUU7SUFDekQsSUFBSUEsSUFBSSxLQUFLSixjQUFjLElBQUlJLElBQUksQ0FBQ0MsV0FBVyxDQUFDLENBQUMsS0FBS0wsY0FBYyxDQUFDSyxXQUFXLENBQUMsQ0FBQyxFQUFFO01BQ2xGTixPQUFPLENBQUNDLGNBQWMsQ0FBQyxHQUFHRyxLQUFLO01BQy9CLE9BQU9KLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDO0lBQ3RCO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4vbm9kZV9tb2R1bGVzL2l0ay13YXNtL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzPzE3MDciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiaGVhZGVycyIsIm5vcm1hbGl6ZWROYW1lIiwiZm9yRWFjaCIsInByb2Nlc3NIZWFkZXIiLCJ2YWx1ZSIsIm5hbWUiLCJ0b1VwcGVyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/normalizeHeaderName.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/parseHeaders.js\\\":\\n/*!******************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/parseHeaders.js ***!\\n  \\\\******************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar utils = __webpack_require__(/*! ./../utils */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\\\\");\\\\n\\\\n// Headers whose duplicates are ignored by node\\\\n// c.f. https://nodejs.org/api/http.html#http_message_headers\\\\nvar ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];\\\\n\\\\n/**\\\\n * Parse headers into an object\\\\n *\\\\n * ```\\\\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\\\\n * Content-Type: application/json\\\\n * Connection: keep-alive\\\\n * Transfer-Encoding: chunked\\\\n * ```\\\\n *\\\\n * @param {String} headers Headers needing to be parsed\\\\n * @returns {Object} Headers parsed into an object\\\\n */\\\\nmodule.exports = function parseHeaders(headers) {\\\\n  var parsed = {};\\\\n  var key;\\\\n  var val;\\\\n  var i;\\\\n  if (!headers) {\\\\n    return parsed;\\\\n  }\\\\n  utils.forEach(headers.split('\\\\\\\\n'), function parser(line) {\\\\n    i = line.indexOf(':');\\\\n    key = utils.trim(line.substr(0, i)).toLowerCase();\\\\n    val = utils.trim(line.substr(i + 1));\\\\n    if (key) {\\\\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\\\\n        return;\\\\n      }\\\\n      if (key === 'set-cookie') {\\\\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\\\\n      } else {\\\\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\\\\n      }\\\\n    }\\\\n  });\\\\n  return parsed;\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsMkVBQVksQ0FBQzs7QUFFakM7QUFDQTtBQUNBLElBQUlDLGlCQUFpQixHQUFHLENBQ3RCLEtBQUssRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFDaEUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUscUJBQXFCLEVBQ3JFLGVBQWUsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLHFCQUFxQixFQUNsRSxTQUFTLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FDdkM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsWUFBWUEsQ0FBQ0MsT0FBTyxFQUFFO0VBQzlDLElBQUlDLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFDZixJQUFJQyxHQUFHO0VBQ1AsSUFBSUMsR0FBRztFQUNQLElBQUlDLENBQUM7RUFFTCxJQUFJLENBQUNKLE9BQU8sRUFBRTtJQUFFLE9BQU9DLE1BQU07RUFBRTtFQUUvQlAsS0FBSyxDQUFDVyxPQUFPLENBQUNMLE9BQU8sQ0FBQ00sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVNDLE1BQU1BLENBQUNDLElBQUksRUFBRTtJQUN2REosQ0FBQyxHQUFHSSxJQUFJLENBQUNDLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDckJQLEdBQUcsR0FBR1IsS0FBSyxDQUFDZ0IsSUFBSSxDQUFDRixJQUFJLENBQUNHLE1BQU0sQ0FBQyxDQUFDLEVBQUVQLENBQUMsQ0FBQyxDQUFDLENBQUNRLFdBQVcsQ0FBQyxDQUFDO0lBQ2pEVCxHQUFHLEdBQUdULEtBQUssQ0FBQ2dCLElBQUksQ0FBQ0YsSUFBSSxDQUFDRyxNQUFNLENBQUNQLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVwQyxJQUFJRixHQUFHLEVBQUU7TUFDUCxJQUFJRCxNQUFNLENBQUNDLEdBQUcsQ0FBQyxJQUFJTixpQkFBaUIsQ0FBQ2EsT0FBTyxDQUFDUCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdEQ7TUFDRjtNQUNBLElBQUlBLEdBQUcsS0FBSyxZQUFZLEVBQUU7UUFDeEJELE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLEdBQUcsQ0FBQ0QsTUFBTSxDQUFDQyxHQUFHLENBQUMsR0FBR0QsTUFBTSxDQUFDQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUVXLE1BQU0sQ0FBQyxDQUFDVixHQUFHLENBQUMsQ0FBQztNQUM5RCxDQUFDLE1BQU07UUFDTEYsTUFBTSxDQUFDQyxHQUFHLENBQUMsR0FBR0QsTUFBTSxDQUFDQyxHQUFHLENBQUMsR0FBR0QsTUFBTSxDQUFDQyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUdDLEdBQUcsR0FBR0EsR0FBRztNQUM1RDtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0VBRUYsT0FBT0YsTUFBTTtBQUNmLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uL25vZGVfbW9kdWxlcy9pdGstd2FzbS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzPzllMjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZUhlYWRlcnMiLCJoZWFkZXJzIiwicGFyc2VkIiwia2V5IiwidmFsIiwiaSIsImZvckVhY2giLCJzcGxpdCIsInBhcnNlciIsImxpbmUiLCJpbmRleE9mIiwidHJpbSIsInN1YnN0ciIsInRvTG93ZXJDYXNlIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/parseHeaders.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/spread.js\\\":\\n/*!************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/spread.js ***!\\n  \\\\************************************************************************/\\n/***/ ((module) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\n/**\\\\n * Syntactic sugar for invoking a function and expanding an array for arguments.\\\\n *\\\\n * Common use case would be to use `Function.prototype.apply`.\\\\n *\\\\n *  ```js\\\\n *  function f(x, y, z) {}\\\\n *  var args = [1, 2, 3];\\\\n *  f.apply(null, args);\\\\n *  ```\\\\n *\\\\n * With `spread` this example can be re-written.\\\\n *\\\\n *  ```js\\\\n *  spread(function(x, y, z) {})([1, 2, 3]);\\\\n *  ```\\\\n *\\\\n * @param {Function} callback\\\\n * @returns {Function}\\\\n */\\\\nmodule.exports = function spread(callback) {\\\\n  return function wrap(arr) {\\\\n    return callback.apply(null, arr);\\\\n  };\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLE1BQU1BLENBQUNDLFFBQVEsRUFBRTtFQUN6QyxPQUFPLFNBQVNDLElBQUlBLENBQUNDLEdBQUcsRUFBRTtJQUN4QixPQUFPRixRQUFRLENBQUNHLEtBQUssQ0FBQyxJQUFJLEVBQUVELEdBQUcsQ0FBQztFQUNsQyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4vbm9kZV9tb2R1bGVzL2l0ay13YXNtL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanM/YTY3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInNwcmVhZCIsImNhbGxiYWNrIiwid3JhcCIsImFyciIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/spread.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/validator.js\\\":\\n/*!***************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/helpers/validator.js ***!\\n  \\\\***************************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar VERSION = (__webpack_require__(/*! ../env/data */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/env/data.js\\\\\\\").version);\\\\nvar validators = {};\\\\n\\\\n// eslint-disable-next-line func-names\\\\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {\\\\n  validators[type] = function validator(thing) {\\\\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\\\\n  };\\\\n});\\\\nvar deprecatedWarnings = {};\\\\n\\\\n/**\\\\n * Transitional option validator\\\\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\\\\n * @param {string?} version - deprecated version / removed since version\\\\n * @param {string?} message - some message with additional info\\\\n * @returns {function}\\\\n */\\\\nvalidators.transitional = function transitional(validator, version, message) {\\\\n  function formatMessage(opt, desc) {\\\\n    return '[Axios v' + VERSION + '] Transitional option \\\\\\\\'' + opt + '\\\\\\\\'' + desc + (message ? '. ' + message : '');\\\\n  }\\\\n\\\\n  // eslint-disable-next-line func-names\\\\n  return function (value, opt, opts) {\\\\n    if (validator === false) {\\\\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\\\\n    }\\\\n    if (version && !deprecatedWarnings[opt]) {\\\\n      deprecatedWarnings[opt] = true;\\\\n      // eslint-disable-next-line no-console\\\\n      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));\\\\n    }\\\\n    return validator ? validator(value, opt, opts) : true;\\\\n  };\\\\n};\\\\n\\\\n/**\\\\n * Assert object's properties type\\\\n * @param {object} options\\\\n * @param {object} schema\\\\n * @param {boolean?} allowUnknown\\\\n */\\\\n\\\\nfunction assertOptions(options, schema, allowUnknown) {\\\\n  if (typeof options !== 'object') {\\\\n    throw new TypeError('options must be an object');\\\\n  }\\\\n  var keys = Object.keys(options);\\\\n  var i = keys.length;\\\\n  while (i-- > 0) {\\\\n    var opt = keys[i];\\\\n    var validator = schema[opt];\\\\n    if (validator) {\\\\n      var value = options[opt];\\\\n      var result = value === undefined || validator(value, opt, options);\\\\n      if (result !== true) {\\\\n        throw new TypeError('option ' + opt + ' must be ' + result);\\\\n      }\\\\n      continue;\\\\n    }\\\\n    if (allowUnknown !== true) {\\\\n      throw Error('Unknown option ' + opt);\\\\n    }\\\\n  }\\\\n}\\\\nmodule.exports = {\\\\n  assertOptions: assertOptions,\\\\n  validators: validators\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxPQUFPLEdBQUdDLDhHQUE4QjtBQUU1QyxJQUFJRSxVQUFVLEdBQUcsQ0FBQyxDQUFDOztBQUVuQjtBQUNBLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLFVBQVNDLElBQUksRUFBRUMsQ0FBQyxFQUFFO0VBQ3hGSCxVQUFVLENBQUNFLElBQUksQ0FBQyxHQUFHLFNBQVNFLFNBQVNBLENBQUNDLEtBQUssRUFBRTtJQUMzQyxPQUFPLE9BQU9BLEtBQUssS0FBS0gsSUFBSSxJQUFJLEdBQUcsSUFBSUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUdELElBQUk7RUFDbkUsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLElBQUlJLGtCQUFrQixHQUFHLENBQUMsQ0FBQzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQU4sVUFBVSxDQUFDTyxZQUFZLEdBQUcsU0FBU0EsWUFBWUEsQ0FBQ0gsU0FBUyxFQUFFTCxPQUFPLEVBQUVTLE9BQU8sRUFBRTtFQUMzRSxTQUFTQyxhQUFhQSxDQUFDQyxHQUFHLEVBQUVDLElBQUksRUFBRTtJQUNoQyxPQUFPLFVBQVUsR0FBR2QsT0FBTyxHQUFHLDBCQUEwQixHQUFHYSxHQUFHLEdBQUcsSUFBSSxHQUFHQyxJQUFJLElBQUlILE9BQU8sR0FBRyxJQUFJLEdBQUdBLE9BQU8sR0FBRyxFQUFFLENBQUM7RUFDaEg7O0VBRUE7RUFDQSxPQUFPLFVBQVNJLEtBQUssRUFBRUYsR0FBRyxFQUFFRyxJQUFJLEVBQUU7SUFDaEMsSUFBSVQsU0FBUyxLQUFLLEtBQUssRUFBRTtNQUN2QixNQUFNLElBQUlVLEtBQUssQ0FBQ0wsYUFBYSxDQUFDQyxHQUFHLEVBQUUsbUJBQW1CLElBQUlYLE9BQU8sR0FBRyxNQUFNLEdBQUdBLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlGO0lBRUEsSUFBSUEsT0FBTyxJQUFJLENBQUNPLGtCQUFrQixDQUFDSSxHQUFHLENBQUMsRUFBRTtNQUN2Q0osa0JBQWtCLENBQUNJLEdBQUcsQ0FBQyxHQUFHLElBQUk7TUFDOUI7TUFDQUssT0FBTyxDQUFDQyxJQUFJLENBQ1ZQLGFBQWEsQ0FDWEMsR0FBRyxFQUNILDhCQUE4QixHQUFHWCxPQUFPLEdBQUcseUNBQzdDLENBQ0YsQ0FBQztJQUNIO0lBRUEsT0FBT0ssU0FBUyxHQUFHQSxTQUFTLENBQUNRLEtBQUssRUFBRUYsR0FBRyxFQUFFRyxJQUFJLENBQUMsR0FBRyxJQUFJO0VBQ3ZELENBQUM7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTSSxhQUFhQSxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFO0VBQ3BELElBQUksT0FBT0YsT0FBTyxLQUFLLFFBQVEsRUFBRTtJQUMvQixNQUFNLElBQUlHLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQztFQUNsRDtFQUNBLElBQUlDLElBQUksR0FBR0MsTUFBTSxDQUFDRCxJQUFJLENBQUNKLE9BQU8sQ0FBQztFQUMvQixJQUFJZixDQUFDLEdBQUdtQixJQUFJLENBQUNFLE1BQU07RUFDbkIsT0FBT3JCLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRTtJQUNkLElBQUlPLEdBQUcsR0FBR1ksSUFBSSxDQUFDbkIsQ0FBQyxDQUFDO0lBQ2pCLElBQUlDLFNBQVMsR0FBR2UsTUFBTSxDQUFDVCxHQUFHLENBQUM7SUFDM0IsSUFBSU4sU0FBUyxFQUFFO01BQ2IsSUFBSVEsS0FBSyxHQUFHTSxPQUFPLENBQUNSLEdBQUcsQ0FBQztNQUN4QixJQUFJZSxNQUFNLEdBQUdiLEtBQUssS0FBS2MsU0FBUyxJQUFJdEIsU0FBUyxDQUFDUSxLQUFLLEVBQUVGLEdBQUcsRUFBRVEsT0FBTyxDQUFDO01BQ2xFLElBQUlPLE1BQU0sS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFJSixTQUFTLENBQUMsU0FBUyxHQUFHWCxHQUFHLEdBQUcsV0FBVyxHQUFHZSxNQUFNLENBQUM7TUFDN0Q7TUFDQTtJQUNGO0lBQ0EsSUFBSUwsWUFBWSxLQUFLLElBQUksRUFBRTtNQUN6QixNQUFNTixLQUFLLENBQUMsaUJBQWlCLEdBQUdKLEdBQUcsQ0FBQztJQUN0QztFQUNGO0FBQ0Y7QUFFQWlCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZYLGFBQWEsRUFBRUEsYUFBYTtFQUM1QmpCLFVBQVUsRUFBRUE7QUFDZCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcz9kYzdmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSByZXF1aXJlKCcuLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IEVycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0KTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydE9wdGlvbnM6IGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnNcbn07XG4iXSwibmFtZXMiOlsiVkVSU0lPTiIsInJlcXVpcmUiLCJ2ZXJzaW9uIiwidmFsaWRhdG9ycyIsImZvckVhY2giLCJ0eXBlIiwiaSIsInZhbGlkYXRvciIsInRoaW5nIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwidHJhbnNpdGlvbmFsIiwibWVzc2FnZSIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwidmFsdWUiLCJvcHRzIiwiRXJyb3IiLCJjb25zb2xlIiwid2FybiIsImFzc2VydE9wdGlvbnMiLCJvcHRpb25zIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiVHlwZUVycm9yIiwia2V5cyIsIk9iamVjdCIsImxlbmd0aCIsInJlc3VsdCIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/helpers/validator.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\":\\n/*!***************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/node_modules/axios/lib/utils.js ***!\\n  \\\\***************************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar bind = __webpack_require__(/*! ./helpers/bind */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/lib/helpers/bind.js\\\\\\\");\\\\n\\\\n// utils is a library of generic helper functions non-specific to axios\\\\n\\\\nvar toString = Object.prototype.toString;\\\\n\\\\n/**\\\\n * Determine if a value is an Array\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is an Array, otherwise false\\\\n */\\\\nfunction isArray(val) {\\\\n  return toString.call(val) === '[object Array]';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is undefined\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if the value is undefined, otherwise false\\\\n */\\\\nfunction isUndefined(val) {\\\\n  return typeof val === 'undefined';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a Buffer\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a Buffer, otherwise false\\\\n */\\\\nfunction isBuffer(val) {\\\\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is an ArrayBuffer\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\\\\n */\\\\nfunction isArrayBuffer(val) {\\\\n  return toString.call(val) === '[object ArrayBuffer]';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a FormData\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is an FormData, otherwise false\\\\n */\\\\nfunction isFormData(val) {\\\\n  return typeof FormData !== 'undefined' && val instanceof FormData;\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a view on an ArrayBuffer\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\\\\n */\\\\nfunction isArrayBufferView(val) {\\\\n  var result;\\\\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\\\\n    result = ArrayBuffer.isView(val);\\\\n  } else {\\\\n    result = val && val.buffer && val.buffer instanceof ArrayBuffer;\\\\n  }\\\\n  return result;\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a String\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a String, otherwise false\\\\n */\\\\nfunction isString(val) {\\\\n  return typeof val === 'string';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a Number\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a Number, otherwise false\\\\n */\\\\nfunction isNumber(val) {\\\\n  return typeof val === 'number';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is an Object\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is an Object, otherwise false\\\\n */\\\\nfunction isObject(val) {\\\\n  return val !== null && typeof val === 'object';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a plain Object\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @return {boolean} True if value is a plain Object, otherwise false\\\\n */\\\\nfunction isPlainObject(val) {\\\\n  if (toString.call(val) !== '[object Object]') {\\\\n    return false;\\\\n  }\\\\n  var prototype = Object.getPrototypeOf(val);\\\\n  return prototype === null || prototype === Object.prototype;\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a Date\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a Date, otherwise false\\\\n */\\\\nfunction isDate(val) {\\\\n  return toString.call(val) === '[object Date]';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a File\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a File, otherwise false\\\\n */\\\\nfunction isFile(val) {\\\\n  return toString.call(val) === '[object File]';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a Blob\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a Blob, otherwise false\\\\n */\\\\nfunction isBlob(val) {\\\\n  return toString.call(val) === '[object Blob]';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a Function\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a Function, otherwise false\\\\n */\\\\nfunction isFunction(val) {\\\\n  return toString.call(val) === '[object Function]';\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a Stream\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a Stream, otherwise false\\\\n */\\\\nfunction isStream(val) {\\\\n  return isObject(val) && isFunction(val.pipe);\\\\n}\\\\n\\\\n/**\\\\n * Determine if a value is a URLSearchParams object\\\\n *\\\\n * @param {Object} val The value to test\\\\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\\\\n */\\\\nfunction isURLSearchParams(val) {\\\\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\\\\n}\\\\n\\\\n/**\\\\n * Trim excess whitespace off the beginning and end of a string\\\\n *\\\\n * @param {String} str The String to trim\\\\n * @returns {String} The String freed of excess whitespace\\\\n */\\\\nfunction trim(str) {\\\\n  return str.trim ? str.trim() : str.replace(/^\\\\\\\\s+|\\\\\\\\s+$/g, '');\\\\n}\\\\n\\\\n/**\\\\n * Determine if we're running in a standard browser environment\\\\n *\\\\n * This allows axios to run in a web worker, and react-native.\\\\n * Both environments support XMLHttpRequest, but not fully standard globals.\\\\n *\\\\n * web workers:\\\\n *  typeof window -> undefined\\\\n *  typeof document -> undefined\\\\n *\\\\n * react-native:\\\\n *  navigator.product -> 'ReactNative'\\\\n * nativescript\\\\n *  navigator.product -> 'NativeScript' or 'NS'\\\\n */\\\\nfunction isStandardBrowserEnv() {\\\\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {\\\\n    return false;\\\\n  }\\\\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\\\\n}\\\\n\\\\n/**\\\\n * Iterate over an Array or an Object invoking a function for each item.\\\\n *\\\\n * If `obj` is an Array callback will be called passing\\\\n * the value, index, and complete array for each item.\\\\n *\\\\n * If 'obj' is an Object callback will be called passing\\\\n * the value, key, and complete object for each property.\\\\n *\\\\n * @param {Object|Array} obj The object to iterate\\\\n * @param {Function} fn The callback to invoke for each item\\\\n */\\\\nfunction forEach(obj, fn) {\\\\n  // Don't bother if no value provided\\\\n  if (obj === null || typeof obj === 'undefined') {\\\\n    return;\\\\n  }\\\\n\\\\n  // Force an array if not already something iterable\\\\n  if (typeof obj !== 'object') {\\\\n    /*eslint no-param-reassign:0*/\\\\n    obj = [obj];\\\\n  }\\\\n  if (isArray(obj)) {\\\\n    // Iterate over array values\\\\n    for (var i = 0, l = obj.length; i < l; i++) {\\\\n      fn.call(null, obj[i], i, obj);\\\\n    }\\\\n  } else {\\\\n    // Iterate over object keys\\\\n    for (var key in obj) {\\\\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\\\\n        fn.call(null, obj[key], key, obj);\\\\n      }\\\\n    }\\\\n  }\\\\n}\\\\n\\\\n/**\\\\n * Accepts varargs expecting each argument to be an object, then\\\\n * immutably merges the properties of each object and returns result.\\\\n *\\\\n * When multiple objects contain the same key the later object in\\\\n * the arguments list will take precedence.\\\\n *\\\\n * Example:\\\\n *\\\\n * ```js\\\\n * var result = merge({foo: 123}, {foo: 456});\\\\n * console.log(result.foo); // outputs 456\\\\n * ```\\\\n *\\\\n * @param {Object} obj1 Object to merge\\\\n * @returns {Object} Result of all merge properties\\\\n */\\\\nfunction merge( /* obj1, obj2, obj3, ... */\\\\n) {\\\\n  var result = {};\\\\n  function assignValue(val, key) {\\\\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\\\\n      result[key] = merge(result[key], val);\\\\n    } else if (isPlainObject(val)) {\\\\n      result[key] = merge({}, val);\\\\n    } else if (isArray(val)) {\\\\n      result[key] = val.slice();\\\\n    } else {\\\\n      result[key] = val;\\\\n    }\\\\n  }\\\\n  for (var i = 0, l = arguments.length; i < l; i++) {\\\\n    forEach(arguments[i], assignValue);\\\\n  }\\\\n  return result;\\\\n}\\\\n\\\\n/**\\\\n * Extends object a by mutably adding to it the properties of object b.\\\\n *\\\\n * @param {Object} a The object to be extended\\\\n * @param {Object} b The object to copy properties from\\\\n * @param {Object} thisArg The object to bind function to\\\\n * @return {Object} The resulting value of object a\\\\n */\\\\nfunction extend(a, b, thisArg) {\\\\n  forEach(b, function assignValue(val, key) {\\\\n    if (thisArg && typeof val === 'function') {\\\\n      a[key] = bind(val, thisArg);\\\\n    } else {\\\\n      a[key] = val;\\\\n    }\\\\n  });\\\\n  return a;\\\\n}\\\\n\\\\n/**\\\\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\\\\n *\\\\n * @param {string} content with BOM\\\\n * @return {string} content value without BOM\\\\n */\\\\nfunction stripBOM(content) {\\\\n  if (content.charCodeAt(0) === 0xFEFF) {\\\\n    content = content.slice(1);\\\\n  }\\\\n  return content;\\\\n}\\\\nmodule.exports = {\\\\n  isArray: isArray,\\\\n  isArrayBuffer: isArrayBuffer,\\\\n  isBuffer: isBuffer,\\\\n  isFormData: isFormData,\\\\n  isArrayBufferView: isArrayBufferView,\\\\n  isString: isString,\\\\n  isNumber: isNumber,\\\\n  isObject: isObject,\\\\n  isPlainObject: isPlainObject,\\\\n  isUndefined: isUndefined,\\\\n  isDate: isDate,\\\\n  isFile: isFile,\\\\n  isBlob: isBlob,\\\\n  isFunction: isFunction,\\\\n  isStream: isStream,\\\\n  isURLSearchParams: isURLSearchParams,\\\\n  isStandardBrowserEnv: isStandardBrowserEnv,\\\\n  forEach: forEach,\\\\n  merge: merge,\\\\n  extend: extend,\\\\n  trim: trim,\\\\n  stripBOM: stripBOM\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/node_modules/axios/lib/utils.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/webworker-promise/lib/register.js\\\":\\n/*!********************************************************!*\\\\\\n  !*** ./node_modules/webworker-promise/lib/register.js ***!\\n  \\\\********************************************************/\\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar _createClass = function () {\\\\n  function defineProperties(target, props) {\\\\n    for (var i = 0; i < props.length; i++) {\\\\n      var descriptor = props[i];\\\\n      descriptor.enumerable = descriptor.enumerable || false;\\\\n      descriptor.configurable = true;\\\\n      if (\\\\\\\"value\\\\\\\" in descriptor) descriptor.writable = true;\\\\n      Object.defineProperty(target, descriptor.key, descriptor);\\\\n    }\\\\n  }\\\\n  return function (Constructor, protoProps, staticProps) {\\\\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\\\\n    if (staticProps) defineProperties(Constructor, staticProps);\\\\n    return Constructor;\\\\n  };\\\\n}();\\\\nvar _get = function get(object, property, receiver) {\\\\n  if (object === null) object = Function.prototype;\\\\n  var desc = Object.getOwnPropertyDescriptor(object, property);\\\\n  if (desc === undefined) {\\\\n    var parent = Object.getPrototypeOf(object);\\\\n    if (parent === null) {\\\\n      return undefined;\\\\n    } else {\\\\n      return get(parent, property, receiver);\\\\n    }\\\\n  } else if (\\\\\\\"value\\\\\\\" in desc) {\\\\n    return desc.value;\\\\n  } else {\\\\n    var getter = desc.get;\\\\n    if (getter === undefined) {\\\\n      return undefined;\\\\n    }\\\\n    return getter.call(receiver);\\\\n  }\\\\n};\\\\nvar _typeof = typeof Symbol === \\\\\\\"function\\\\\\\" && typeof Symbol.iterator === \\\\\\\"symbol\\\\\\\" ? function (obj) {\\\\n  return typeof obj;\\\\n} : function (obj) {\\\\n  return obj && typeof Symbol === \\\\\\\"function\\\\\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\\\\\"symbol\\\\\\\" : typeof obj;\\\\n};\\\\nfunction _toConsumableArray(arr) {\\\\n  if (Array.isArray(arr)) {\\\\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\\\\n      arr2[i] = arr[i];\\\\n    }\\\\n    return arr2;\\\\n  } else {\\\\n    return Array.from(arr);\\\\n  }\\\\n}\\\\nfunction _classCallCheck(instance, Constructor) {\\\\n  if (!(instance instanceof Constructor)) {\\\\n    throw new TypeError(\\\\\\\"Cannot call a class as a function\\\\\\\");\\\\n  }\\\\n}\\\\nfunction _possibleConstructorReturn(self, call) {\\\\n  if (!self) {\\\\n    throw new ReferenceError(\\\\\\\"this hasn't been initialised - super() hasn't been called\\\\\\\");\\\\n  }\\\\n  return call && (typeof call === \\\\\\\"object\\\\\\\" || typeof call === \\\\\\\"function\\\\\\\") ? call : self;\\\\n}\\\\nfunction _inherits(subClass, superClass) {\\\\n  if (typeof superClass !== \\\\\\\"function\\\\\\\" && superClass !== null) {\\\\n    throw new TypeError(\\\\\\\"Super expression must either be null or a function, not \\\\\\\" + typeof superClass);\\\\n  }\\\\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\\\\n    constructor: {\\\\n      value: subClass,\\\\n      enumerable: false,\\\\n      writable: true,\\\\n      configurable: true\\\\n    }\\\\n  });\\\\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\\\\n}\\\\nfunction _defineProperty(obj, key, value) {\\\\n  if (key in obj) {\\\\n    Object.defineProperty(obj, key, {\\\\n      value: value,\\\\n      enumerable: true,\\\\n      configurable: true,\\\\n      writable: true\\\\n    });\\\\n  } else {\\\\n    obj[key] = value;\\\\n  }\\\\n  return obj;\\\\n}\\\\nvar TinyEmitter = __webpack_require__(/*! ./tiny-emitter */ \\\\\\\"./node_modules/webworker-promise/lib/tiny-emitter.js\\\\\\\");\\\\nvar MESSAGE_RESULT = 0;\\\\nvar MESSAGE_EVENT = 1;\\\\nvar RESULT_ERROR = 0;\\\\nvar RESULT_SUCCESS = 1;\\\\nvar DEFAULT_HANDLER = 'main';\\\\nvar isPromise = function isPromise(o) {\\\\n  return (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && typeof o.then === 'function' && typeof o.catch === 'function';\\\\n};\\\\nfunction RegisterPromise(fn) {\\\\n  var handlers = _defineProperty({}, DEFAULT_HANDLER, fn);\\\\n  var sendPostMessage = self.postMessage.bind(self);\\\\n  var server = new (function (_TinyEmitter) {\\\\n    _inherits(WorkerRegister, _TinyEmitter);\\\\n    function WorkerRegister() {\\\\n      _classCallCheck(this, WorkerRegister);\\\\n      return _possibleConstructorReturn(this, (WorkerRegister.__proto__ || Object.getPrototypeOf(WorkerRegister)).apply(this, arguments));\\\\n    }\\\\n    _createClass(WorkerRegister, [{\\\\n      key: 'emit',\\\\n      value: function emit(eventName) {\\\\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\\\n          args[_key - 1] = arguments[_key];\\\\n        }\\\\n        sendPostMessage({\\\\n          eventName: eventName,\\\\n          args: args\\\\n        });\\\\n        return this;\\\\n      }\\\\n    }, {\\\\n      key: 'emitLocally',\\\\n      value: function emitLocally(eventName) {\\\\n        var _get2;\\\\n        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\\\\n          args[_key2 - 1] = arguments[_key2];\\\\n        }\\\\n        (_get2 = _get(WorkerRegister.prototype.__proto__ || Object.getPrototypeOf(WorkerRegister.prototype), 'emit', this)).call.apply(_get2, [this, eventName].concat(args));\\\\n      }\\\\n    }, {\\\\n      key: 'operation',\\\\n      value: function operation(name, handler) {\\\\n        handlers[name] = handler;\\\\n        return this;\\\\n      }\\\\n    }]);\\\\n    return WorkerRegister;\\\\n  }(TinyEmitter))();\\\\n  var run = function run(messageId, payload, handlerName) {\\\\n    var onSuccess = function onSuccess(result) {\\\\n      if (result && result instanceof TransferableResponse) {\\\\n        sendResult(messageId, RESULT_SUCCESS, result.payload, result.transferable);\\\\n      } else {\\\\n        sendResult(messageId, RESULT_SUCCESS, result);\\\\n      }\\\\n    };\\\\n    var onError = function onError(e) {\\\\n      sendResult(messageId, RESULT_ERROR, {\\\\n        message: e.message,\\\\n        stack: e.stack\\\\n      });\\\\n    };\\\\n    try {\\\\n      var result = runFn(messageId, payload, handlerName);\\\\n      if (isPromise(result)) {\\\\n        result.then(onSuccess).catch(onError);\\\\n      } else {\\\\n        onSuccess(result);\\\\n      }\\\\n    } catch (e) {\\\\n      onError(e);\\\\n    }\\\\n  };\\\\n  var runFn = function runFn(messageId, payload, handlerName) {\\\\n    var handler = handlers[handlerName || DEFAULT_HANDLER];\\\\n    if (!handler) throw new Error('Not found handler for this request');\\\\n    return handler(payload, sendEvent.bind(null, messageId));\\\\n  };\\\\n  var sendResult = function sendResult(messageId, success, payload) {\\\\n    var transferable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\\\\n    sendPostMessage([MESSAGE_RESULT, messageId, success, payload], transferable);\\\\n  };\\\\n  var sendEvent = function sendEvent(messageId, eventName, payload) {\\\\n    if (!eventName) throw new Error('eventName is required');\\\\n    if (typeof eventName !== 'string') throw new Error('eventName should be string');\\\\n    sendPostMessage([MESSAGE_EVENT, messageId, eventName, payload]);\\\\n  };\\\\n  self.addEventListener('message', function (_ref) {\\\\n    var data = _ref.data;\\\\n    if (Array.isArray(data)) {\\\\n      run.apply(undefined, _toConsumableArray(data));\\\\n    } else if (data && data.eventName) {\\\\n      server.emitLocally.apply(server, [data.eventName].concat(_toConsumableArray(data.args)));\\\\n    }\\\\n  });\\\\n  return server;\\\\n}\\\\nvar TransferableResponse = function TransferableResponse(payload, transferable) {\\\\n  _classCallCheck(this, TransferableResponse);\\\\n  this.payload = payload;\\\\n  this.transferable = transferable;\\\\n};\\\\nmodule.exports = RegisterPromise;\\\\nmodule.exports.TransferableResponse = TransferableResponse;//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/webworker-promise/lib/register.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/webworker-promise/lib/tiny-emitter.js\\\":\\n/*!************************************************************!*\\\\\\n  !*** ./node_modules/webworker-promise/lib/tiny-emitter.js ***!\\n  \\\\************************************************************/\\n/***/ ((module) => {\\n\\n\\\"use strict\\\";\\neval(\\\"\\\\n\\\\nvar _createClass = function () {\\\\n  function defineProperties(target, props) {\\\\n    for (var i = 0; i < props.length; i++) {\\\\n      var descriptor = props[i];\\\\n      descriptor.enumerable = descriptor.enumerable || false;\\\\n      descriptor.configurable = true;\\\\n      if (\\\\\\\"value\\\\\\\" in descriptor) descriptor.writable = true;\\\\n      Object.defineProperty(target, descriptor.key, descriptor);\\\\n    }\\\\n  }\\\\n  return function (Constructor, protoProps, staticProps) {\\\\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\\\\n    if (staticProps) defineProperties(Constructor, staticProps);\\\\n    return Constructor;\\\\n  };\\\\n}();\\\\nfunction _classCallCheck(instance, Constructor) {\\\\n  if (!(instance instanceof Constructor)) {\\\\n    throw new TypeError(\\\\\\\"Cannot call a class as a function\\\\\\\");\\\\n  }\\\\n}\\\\nvar TinyEmitter = function () {\\\\n  function TinyEmitter() {\\\\n    _classCallCheck(this, TinyEmitter);\\\\n    Object.defineProperty(this, '__listeners', {\\\\n      value: {},\\\\n      enumerable: false,\\\\n      writable: false\\\\n    });\\\\n  }\\\\n  _createClass(TinyEmitter, [{\\\\n    key: 'emit',\\\\n    value: function emit(eventName) {\\\\n      if (!this.__listeners[eventName]) return this;\\\\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\\\n        args[_key - 1] = arguments[_key];\\\\n      }\\\\n      var _iteratorNormalCompletion = true;\\\\n      var _didIteratorError = false;\\\\n      var _iteratorError = undefined;\\\\n      try {\\\\n        for (var _iterator = this.__listeners[eventName][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\\\\n          var handler = _step.value;\\\\n          handler.apply(undefined, args);\\\\n        }\\\\n      } catch (err) {\\\\n        _didIteratorError = true;\\\\n        _iteratorError = err;\\\\n      } finally {\\\\n        try {\\\\n          if (!_iteratorNormalCompletion && _iterator.return) {\\\\n            _iterator.return();\\\\n          }\\\\n        } finally {\\\\n          if (_didIteratorError) {\\\\n            throw _iteratorError;\\\\n          }\\\\n        }\\\\n      }\\\\n      return this;\\\\n    }\\\\n  }, {\\\\n    key: 'once',\\\\n    value: function once(eventName, handler) {\\\\n      var _this = this;\\\\n      var once = function once() {\\\\n        _this.off(eventName, once);\\\\n        handler.apply(undefined, arguments);\\\\n      };\\\\n      return this.on(eventName, once);\\\\n    }\\\\n  }, {\\\\n    key: 'on',\\\\n    value: function on(eventName, handler) {\\\\n      if (!this.__listeners[eventName]) this.__listeners[eventName] = [];\\\\n      this.__listeners[eventName].push(handler);\\\\n      return this;\\\\n    }\\\\n  }, {\\\\n    key: 'off',\\\\n    value: function off(eventName, handler) {\\\\n      if (handler) this.__listeners[eventName] = this.__listeners[eventName].filter(function (h) {\\\\n        return h !== handler;\\\\n      });else this.__listeners[eventName] = [];\\\\n      return this;\\\\n    }\\\\n  }]);\\\\n  return TinyEmitter;\\\\n}();\\\\nmodule.exports = TinyEmitter;//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/webworker-promise/lib/tiny-emitter.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/FloatTypes.js\\\":\\n/*!*******************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/FloatTypes.js ***!\\n  \\\\*******************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst FloatTypes = {\\\\n  Float32: 'float32',\\\\n  Float64: 'float64',\\\\n  SpacePrecisionType: 'float64'\\\\n};\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FloatTypes);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL0Zsb2F0VHlwZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFVBQVUsR0FBRztFQUNqQkMsT0FBTyxFQUFFLFNBQVM7RUFDbEJDLE9BQU8sRUFBRSxTQUFTO0VBRWxCQyxrQkFBa0IsRUFBRTtDQUNaO0FBRVYsaUVBQWVILFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uLi8uLi9zcmMvY29yZS9GbG9hdFR5cGVzLnRzPzYzM2QiXSwibmFtZXMiOlsiRmxvYXRUeXBlcyIsIkZsb2F0MzIiLCJGbG9hdDY0IiwiU3BhY2VQcmVjaXNpb25UeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/FloatTypes.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/IOTypes.js\\\":\\n/*!****************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/IOTypes.js ***!\\n  \\\\****************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst IOTypes = {\\\\n  Text: 'Text',\\\\n  Binary: 'Binary',\\\\n  Image: 'Image',\\\\n  Mesh: 'Mesh'\\\\n};\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (IOTypes);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL0lPVHlwZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLE9BQU8sR0FBRztFQUNkQyxJQUFJLEVBQUUsTUFBTTtFQUNaQyxNQUFNLEVBQUUsUUFBUTtFQUNoQkMsS0FBSyxFQUFFLE9BQU87RUFDZEMsSUFBSSxFQUFFO0NBQ0U7QUFFVixpRUFBZUosT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4uLy4uL3NyYy9jb3JlL0lPVHlwZXMudHM/ZTg1ZiJdLCJuYW1lcyI6WyJJT1R5cGVzIiwiVGV4dCIsIkJpbmFyeSIsIkltYWdlIiwiTWVzaCJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/IOTypes.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/IntTypes.js\\\":\\n/*!*****************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/IntTypes.js ***!\\n  \\\\*****************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst IntTypes = {\\\\n  Int8: 'int8',\\\\n  UInt8: 'uint8',\\\\n  Int16: 'int16',\\\\n  UInt16: 'uint16',\\\\n  Int32: 'int32',\\\\n  UInt32: 'uint32',\\\\n  Int64: 'int64',\\\\n  UInt64: 'uint64',\\\\n  SizeValueType: 'uint64',\\\\n  IdentifierType: 'uint64',\\\\n  IndexValueType: 'int64',\\\\n  OffsetValueType: 'int64'\\\\n};\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (IntTypes);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL0ludFR5cGVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxRQUFRLEdBQUc7RUFDZkMsSUFBSSxFQUFFLE1BQU07RUFDWkMsS0FBSyxFQUFFLE9BQU87RUFDZEMsS0FBSyxFQUFFLE9BQU87RUFDZEMsTUFBTSxFQUFFLFFBQVE7RUFDaEJDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLE1BQU0sRUFBRSxRQUFRO0VBQ2hCQyxLQUFLLEVBQUUsT0FBTztFQUNkQyxNQUFNLEVBQUUsUUFBUTtFQUVoQkMsYUFBYSxFQUFFLFFBQVE7RUFDdkJDLGNBQWMsRUFBRSxRQUFRO0VBQ3hCQyxjQUFjLEVBQUUsT0FBTztFQUN2QkMsZUFBZSxFQUFFO0NBQ1Q7QUFFVixpRUFBZVosUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4uLy4uL3NyYy9jb3JlL0ludFR5cGVzLnRzPzc3NDYiXSwibmFtZXMiOlsiSW50VHlwZXMiLCJJbnQ4IiwiVUludDgiLCJJbnQxNiIsIlVJbnQxNiIsIkludDMyIiwiVUludDMyIiwiSW50NjQiLCJVSW50NjQiLCJTaXplVmFsdWVUeXBlIiwiSWRlbnRpZmllclR5cGUiLCJJbmRleFZhbHVlVHlwZSIsIk9mZnNldFZhbHVlVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/IntTypes.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/InterfaceTypes.js\\\":\\n/*!***********************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/InterfaceTypes.js ***!\\n  \\\\***********************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst InterfaceTypes = {\\\\n  // Todo: remove Interface prefix after IOTypes has been removed\\\\n  TextFile: 'InterfaceTextFile',\\\\n  BinaryFile: 'InterfaceBinaryFile',\\\\n  TextStream: 'InterfaceTextStream',\\\\n  BinaryStream: 'InterfaceBinaryStream',\\\\n  Image: 'InterfaceImage',\\\\n  Mesh: 'InterfaceMesh',\\\\n  PolyData: 'InterfacePolyData',\\\\n  JsonObject: 'InterfaceJsonObject'\\\\n};\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InterfaceTypes);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL0ludGVyZmFjZVR5cGVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxjQUFjLEdBQUc7RUFDckI7RUFDQUMsUUFBUSxFQUFFLG1CQUFtQjtFQUM3QkMsVUFBVSxFQUFFLHFCQUFxQjtFQUNqQ0MsVUFBVSxFQUFFLHFCQUFxQjtFQUNqQ0MsWUFBWSxFQUFFLHVCQUF1QjtFQUNyQ0MsS0FBSyxFQUFFLGdCQUFnQjtFQUN2QkMsSUFBSSxFQUFFLGVBQWU7RUFDckJDLFFBQVEsRUFBRSxtQkFBbUI7RUFDN0JDLFVBQVUsRUFBRTtDQUNKO0FBRVYsaUVBQWVSLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uLi8uLi9zcmMvY29yZS9JbnRlcmZhY2VUeXBlcy50cz8wYWY2Il0sIm5hbWVzIjpbIkludGVyZmFjZVR5cGVzIiwiVGV4dEZpbGUiLCJCaW5hcnlGaWxlIiwiVGV4dFN0cmVhbSIsIkJpbmFyeVN0cmVhbSIsIkltYWdlIiwiTWVzaCIsIlBvbHlEYXRhIiwiSnNvbk9iamVjdCJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/InterfaceTypes.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/bufferToTypedArray.js\\\":\\n/*!***************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/bufferToTypedArray.js ***!\\n  \\\\***************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\n/* harmony import */ var _IntTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IntTypes.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/IntTypes.js\\\\\\\");\\\\n/* harmony import */ var _FloatTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FloatTypes.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/FloatTypes.js\\\\\\\");\\\\n\\\\n\\\\nfunction bufferToTypedArray(wasmType, buffer) {\\\\n  let typedArray = null;\\\\n  switch (wasmType) {\\\\n    case _IntTypes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].UInt8:\\\\n      {\\\\n        typedArray = new Uint8Array(buffer);\\\\n        break;\\\\n      }\\\\n    case _IntTypes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].Int8:\\\\n      {\\\\n        typedArray = new Int8Array(buffer);\\\\n        break;\\\\n      }\\\\n    case _IntTypes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].UInt16:\\\\n      {\\\\n        typedArray = new Uint16Array(buffer);\\\\n        break;\\\\n      }\\\\n    case _IntTypes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].Int16:\\\\n      {\\\\n        typedArray = new Int16Array(buffer);\\\\n        break;\\\\n      }\\\\n    case _IntTypes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].UInt32:\\\\n      {\\\\n        typedArray = new Uint32Array(buffer);\\\\n        break;\\\\n      }\\\\n    case _IntTypes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].Int32:\\\\n      {\\\\n        typedArray = new Int32Array(buffer);\\\\n        break;\\\\n      }\\\\n    case _IntTypes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].UInt64:\\\\n      {\\\\n        if (typeof globalThis.BigUint64Array === 'function') {\\\\n          typedArray = new BigUint64Array(buffer);\\\\n        } else {\\\\n          // Sub with reasonable default. Will get cast to Uint8Array when\\\\n          // transferred to WebAssembly.\\\\n          typedArray = new Uint8Array(buffer);\\\\n        }\\\\n        break;\\\\n      }\\\\n    case _IntTypes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].Int64:\\\\n      {\\\\n        if (typeof globalThis.BigInt64Array === 'function') {\\\\n          typedArray = new BigInt64Array(buffer);\\\\n        } else {\\\\n          // Sub with reasonable default. Will get cast to Uint8Array when\\\\n          // transferred to WebAssembly.\\\\n          typedArray = new Uint8Array(buffer);\\\\n        }\\\\n        break;\\\\n      }\\\\n    case _FloatTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].Float32:\\\\n      {\\\\n        typedArray = new Float32Array(buffer);\\\\n        break;\\\\n      }\\\\n    case _FloatTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].Float64:\\\\n      {\\\\n        typedArray = new Float64Array(buffer);\\\\n        break;\\\\n      }\\\\n    case 'null':\\\\n      {\\\\n        typedArray = null;\\\\n        break;\\\\n      }\\\\n    case null:\\\\n      {\\\\n        typedArray = null;\\\\n        break;\\\\n      }\\\\n    default:\\\\n      throw new Error('Type is not supported as a TypedArray');\\\\n  }\\\\n  return typedArray;\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bufferToTypedArray);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL2J1ZmZlclRvVHlwZWRBcnJheS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0M7QUFDSTtBQUd4QyxTQUFTRSxrQkFBa0JBLENBQUVDLFFBQTZHLEVBQUVDLE1BQW1CO0VBQzdKLElBQUlDLFVBQVUsR0FBc0IsSUFBSTtFQUN4QyxRQUFRRixRQUFRO0lBQ2QsS0FBS0gsMERBQWM7TUFBRTtRQUNuQkssVUFBVSxHQUFHLElBQUlFLFVBQVUsQ0FBQ0gsTUFBTSxDQUFDO1FBQ25DOztJQUVGLEtBQUtKLHlEQUFhO01BQUU7UUFDbEJLLFVBQVUsR0FBRyxJQUFJSSxTQUFTLENBQUNMLE1BQU0sQ0FBQztRQUNsQzs7SUFFRixLQUFLSiwyREFBZTtNQUFFO1FBQ3BCSyxVQUFVLEdBQUcsSUFBSU0sV0FBVyxDQUFDUCxNQUFNLENBQUM7UUFDcEM7O0lBRUYsS0FBS0osMERBQWM7TUFBRTtRQUNuQkssVUFBVSxHQUFHLElBQUlRLFVBQVUsQ0FBQ1QsTUFBTSxDQUFDO1FBQ25DOztJQUVGLEtBQUtKLDJEQUFlO01BQUU7UUFDcEJLLFVBQVUsR0FBRyxJQUFJVSxXQUFXLENBQUNYLE1BQU0sQ0FBQztRQUNwQzs7SUFFRixLQUFLSiwwREFBYztNQUFFO1FBQ25CSyxVQUFVLEdBQUcsSUFBSVksVUFBVSxDQUFDYixNQUFNLENBQUM7UUFDbkM7O0lBRUYsS0FBS0osMkRBQWU7TUFBRTtRQUNwQixJQUFJLE9BQU9tQixVQUFVLENBQUNDLGNBQWMsS0FBSyxVQUFVLEVBQUU7VUFDbkRmLFVBQVUsR0FBRyxJQUFJZSxjQUFjLENBQUNoQixNQUFNLENBQUM7U0FDeEMsTUFBTTtVQUNMO1VBQ0E7VUFDQUMsVUFBVSxHQUFHLElBQUlFLFVBQVUsQ0FBQ0gsTUFBTSxDQUFDOztRQUVyQzs7SUFFRixLQUFLSiwwREFBYztNQUFFO1FBQ25CLElBQUksT0FBT21CLFVBQVUsQ0FBQ0csYUFBYSxLQUFLLFVBQVUsRUFBRTtVQUNsRGpCLFVBQVUsR0FBRyxJQUFJaUIsYUFBYSxDQUFDbEIsTUFBTSxDQUFDO1NBQ3ZDLE1BQU07VUFDTDtVQUNBO1VBQ0FDLFVBQVUsR0FBRyxJQUFJRSxVQUFVLENBQUNILE1BQU0sQ0FBQzs7UUFFckM7O0lBRUYsS0FBS0gsOERBQWtCO01BQUU7UUFDdkJJLFVBQVUsR0FBRyxJQUFJbUIsWUFBWSxDQUFDcEIsTUFBTSxDQUFDO1FBQ3JDOztJQUVGLEtBQUtILDhEQUFrQjtNQUFFO1FBQ3ZCSSxVQUFVLEdBQUcsSUFBSXFCLFlBQVksQ0FBQ3RCLE1BQU0sQ0FBQztRQUNyQzs7SUFFRixLQUFLLE1BQU07TUFBRTtRQUNYQyxVQUFVLEdBQUcsSUFBSTtRQUNqQjs7SUFFRixLQUFLLElBQUk7TUFBRTtRQUNUQSxVQUFVLEdBQUcsSUFBSTtRQUNqQjs7SUFFRjtNQUNFLE1BQU0sSUFBSXNCLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQzs7RUFHNUQsT0FBT3RCLFVBQVU7QUFDbkI7QUFFQSxpRUFBZUgsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi4vLi4vc3JjL2NvcmUvYnVmZmVyVG9UeXBlZEFycmF5LnRzP2M4ZDUiXSwibmFtZXMiOlsiSW50VHlwZXMiLCJGbG9hdFR5cGVzIiwiYnVmZmVyVG9UeXBlZEFycmF5Iiwid2FzbVR5cGUiLCJidWZmZXIiLCJ0eXBlZEFycmF5IiwiVUludDgiLCJVaW50OEFycmF5IiwiSW50OCIsIkludDhBcnJheSIsIlVJbnQxNiIsIlVpbnQxNkFycmF5IiwiSW50MTYiLCJJbnQxNkFycmF5IiwiVUludDMyIiwiVWludDMyQXJyYXkiLCJJbnQzMiIsIkludDMyQXJyYXkiLCJVSW50NjQiLCJnbG9iYWxUaGlzIiwiQmlnVWludDY0QXJyYXkiLCJJbnQ2NCIsIkJpZ0ludDY0QXJyYXkiLCJGbG9hdDMyIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NCIsIkZsb2F0NjRBcnJheSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/bufferToTypedArray.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/getTransferable.js\\\":\\n/*!************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/getTransferable.js ***!\\n  \\\\************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst haveSharedArrayBuffer = typeof globalThis.SharedArrayBuffer === 'function'; // eslint-disable-line\\\\nfunction getTransferable(data) {\\\\n  let result = null;\\\\n  if (data.buffer !== undefined) {\\\\n    result = data.buffer;\\\\n  } else if (data.byteLength !== undefined) {\\\\n    result = data;\\\\n  }\\\\n  if (!!result && haveSharedArrayBuffer && result instanceof SharedArrayBuffer) {\\\\n    // eslint-disable-line\\\\n    return null;\\\\n  }\\\\n  return result;\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getTransferable);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL2dldFRyYW5zZmVyYWJsZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEscUJBQXFCLEdBQUcsT0FBT0MsVUFBVSxDQUFDQyxpQkFBaUIsS0FBSyxVQUFVLEVBQUM7QUFFakYsU0FBU0MsZUFBZUEsQ0FBRUMsSUFBUztFQUNqQyxJQUFJQyxNQUFNLEdBQXVCLElBQUk7RUFDckMsSUFBSUQsSUFBSSxDQUFDRSxNQUFNLEtBQUtDLFNBQVMsRUFBRTtJQUM3QkYsTUFBTSxHQUFHRCxJQUFJLENBQUNFLE1BQXFCO0dBQ3BDLE1BQU0sSUFBSUYsSUFBSSxDQUFDSSxVQUFVLEtBQUtELFNBQVMsRUFBRTtJQUN4Q0YsTUFBTSxHQUFHRCxJQUFtQjs7RUFFOUIsSUFBSSxDQUFDLENBQUNDLE1BQU0sSUFBSUwscUJBQXFCLElBQUlLLE1BQU0sWUFBWUgsaUJBQWlCLEVBQUU7SUFBRTtJQUM5RSxPQUFPLElBQUk7O0VBRWIsT0FBT0csTUFBTTtBQUNmO0FBRUEsaUVBQWVGLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uLi8uLi9zcmMvY29yZS9nZXRUcmFuc2ZlcmFibGUudHM/NjA1ZSJdLCJuYW1lcyI6WyJoYXZlU2hhcmVkQXJyYXlCdWZmZXIiLCJnbG9iYWxUaGlzIiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJnZXRUcmFuc2ZlcmFibGUiLCJkYXRhIiwicmVzdWx0IiwiYnVmZmVyIiwidW5kZWZpbmVkIiwiYnl0ZUxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/getTransferable.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/internal/camelCase.js\\\":\\n/*!***************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/internal/camelCase.js ***!\\n  \\\\***************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nfunction camelCase(kebobCase) {\\\\n  // make any alphabets that follows '-' an uppercase character, and remove the corresponding hyphen\\\\n  const cameledParam = kebobCase.replace(/-([a-z])/g, kk => {\\\\n    return kk[1].toUpperCase();\\\\n  });\\\\n  // remove all non-alphanumeric characters\\\\n  const outParam = cameledParam.replace(/([^0-9a-z])/ig, '');\\\\n  // check if resulting string is empty\\\\n  if (outParam === '') {\\\\n    console.error('Resulting string is empty.');\\\\n  }\\\\n  return outParam;\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (camelCase);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL2ludGVybmFsL2NhbWVsQ2FzZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsU0FBU0EsQ0FBRUMsU0FBaUI7RUFDbkM7RUFDQSxNQUFNQyxZQUFZLEdBQUdELFNBQVMsQ0FBQ0UsT0FBTyxDQUFDLFdBQVcsRUFBR0MsRUFBRSxJQUFJO0lBQ3pELE9BQU9BLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxFQUFFO0VBQzVCLENBQUMsQ0FBQztFQUVGO0VBQ0EsTUFBTUMsUUFBUSxHQUFHSixZQUFZLENBQUNDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDO0VBRTFEO0VBQ0EsSUFBSUcsUUFBUSxLQUFLLEVBQUUsRUFBRTtJQUNuQkMsT0FBTyxDQUFDQyxLQUFLLENBQUMsNEJBQTRCLENBQUM7O0VBRTdDLE9BQU9GLFFBQVE7QUFDakI7QUFFQSxpRUFBZU4sU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4uLy4uLy4uL3NyYy9jb3JlL2ludGVybmFsL2NhbWVsQ2FzZS50cz8zODIxIl0sIm5hbWVzIjpbImNhbWVsQ2FzZSIsImtlYm9iQ2FzZSIsImNhbWVsZWRQYXJhbSIsInJlcGxhY2UiLCJrayIsInRvVXBwZXJDYXNlIiwib3V0UGFyYW0iLCJjb25zb2xlIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/internal/camelCase.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/internal/loadEmscriptenModuleWebWorker.js\\\":\\n/*!***********************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/internal/loadEmscriptenModuleWebWorker.js ***!\\n  \\\\***********************************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \\\\\\\"./node_modules/itk-wasm/node_modules/axios/index.js\\\\\\\");\\\\n/* harmony import */ var _camelCase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./camelCase.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/internal/camelCase.js\\\\\\\");\\\\n\\\\n\\\\n// Load the Emscripten module in the browser in a WebWorker.\\\\n//\\\\n// baseUrl is usually taken from '../itkConfig.js', but a different value\\\\n// could be passed.\\\\nasync function loadEmscriptenModuleWebWorker(moduleRelativePathOrURL, baseUrl) {\\\\n  let modulePrefix = null;\\\\n  if (typeof moduleRelativePathOrURL !== 'string') {\\\\n    modulePrefix = moduleRelativePathOrURL.href;\\\\n  } else if (moduleRelativePathOrURL.startsWith('http')) {\\\\n    modulePrefix = moduleRelativePathOrURL;\\\\n  } else {\\\\n    modulePrefix = `${baseUrl}/${moduleRelativePathOrURL}`;\\\\n  }\\\\n  if (modulePrefix.endsWith('.js')) {\\\\n    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 3);\\\\n  }\\\\n  if (modulePrefix.endsWith('.wasm')) {\\\\n    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 5);\\\\n  }\\\\n  // importScripts / UMD is required over dynamic ESM import until Firefox\\\\n  // adds worker dynamic import support:\\\\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1540913\\\\n  const wasmBinaryPath = `${modulePrefix}.wasm`;\\\\n  const response = await axios__WEBPACK_IMPORTED_MODULE_0__.get(wasmBinaryPath, {\\\\n    responseType: 'arraybuffer'\\\\n  });\\\\n  const wasmBinary = response.data;\\\\n  const modulePath = `${modulePrefix}.umd.js`;\\\\n  importScripts(modulePath);\\\\n  const moduleBaseName = (0,_camelCase_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])(modulePrefix.replace(/.*\\\\\\\\//, ''));\\\\n  // @ts-ignore: error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'WorkerGlobalScope & typeof globalThis'.\\\\n  const wrapperModule = self[moduleBaseName];\\\\n  const emscriptenModule = wrapperModule({\\\\n    wasmBinary\\\\n  });\\\\n  return emscriptenModule;\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (loadEmscriptenModuleWebWorker);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL2ludGVybmFsL2xvYWRFbXNjcmlwdGVuTW9kdWxlV2ViV29ya2VyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQjtBQUNhO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZUUsNkJBQTZCQSxDQUFDQyx1QkFBdUIsRUFBRUMsT0FBTyxFQUFFO0VBQzNFLElBQUlDLFlBQVksR0FBRyxJQUFJO0VBQ3ZCLElBQUksT0FBT0YsdUJBQXVCLEtBQUssUUFBUSxFQUFFO0lBQzdDRSxZQUFZLEdBQUdGLHVCQUF1QixDQUFDRyxJQUFJO0VBQy9DLENBQUMsTUFDSSxJQUFJSCx1QkFBdUIsQ0FBQ0ksVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0lBQ2pERixZQUFZLEdBQUdGLHVCQUF1QjtFQUMxQyxDQUFDLE1BQ0k7SUFDREUsWUFBWSxHQUFJLEdBQUVELE9BQVEsSUFBR0QsdUJBQXdCLEVBQUM7RUFDMUQ7RUFDQSxJQUFJRSxZQUFZLENBQUNHLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUM5QkgsWUFBWSxHQUFHQSxZQUFZLENBQUNJLFNBQVMsQ0FBQyxDQUFDLEVBQUVKLFlBQVksQ0FBQ0ssTUFBTSxHQUFHLENBQUMsQ0FBQztFQUNyRTtFQUNBLElBQUlMLFlBQVksQ0FBQ0csUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQ2hDSCxZQUFZLEdBQUdBLFlBQVksQ0FBQ0ksU0FBUyxDQUFDLENBQUMsRUFBRUosWUFBWSxDQUFDSyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQ3JFO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsTUFBTUMsY0FBYyxHQUFJLEdBQUVOLFlBQWEsT0FBTTtFQUM3QyxNQUFNTyxRQUFRLEdBQUcsTUFBTVosc0NBQVMsQ0FBQ1csY0FBYyxFQUFFO0lBQUVHLFlBQVksRUFBRTtFQUFjLENBQUMsQ0FBQztFQUNqRixNQUFNQyxVQUFVLEdBQUdILFFBQVEsQ0FBQ0ksSUFBSTtFQUNoQyxNQUFNQyxVQUFVLEdBQUksR0FBRVosWUFBYSxTQUFRO0VBQzNDYSxhQUFhLENBQUNELFVBQVUsQ0FBQztFQUN6QixNQUFNRSxjQUFjLEdBQUdsQix5REFBUyxDQUFDSSxZQUFZLENBQUNlLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDbEU7RUFDQSxNQUFNQyxhQUFhLEdBQUdDLElBQUksQ0FBQ0gsY0FBYyxDQUFDO0VBQzFDLE1BQU1JLGdCQUFnQixHQUFHRixhQUFhLENBQUM7SUFBRU47RUFBVyxDQUFDLENBQUM7RUFDdEQsT0FBT1EsZ0JBQWdCO0FBQzNCO0FBQ0EsaUVBQWVyQiw2QkFBNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uL25vZGVfbW9kdWxlcy9pdGstd2FzbS9kaXN0L2NvcmUvaW50ZXJuYWwvbG9hZEVtc2NyaXB0ZW5Nb2R1bGVXZWJXb3JrZXIuanM/MDEzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICcuL2NhbWVsQ2FzZS5qcyc7XG4vLyBMb2FkIHRoZSBFbXNjcmlwdGVuIG1vZHVsZSBpbiB0aGUgYnJvd3NlciBpbiBhIFdlYldvcmtlci5cbi8vXG4vLyBiYXNlVXJsIGlzIHVzdWFsbHkgdGFrZW4gZnJvbSAnLi4vaXRrQ29uZmlnLmpzJywgYnV0IGEgZGlmZmVyZW50IHZhbHVlXG4vLyBjb3VsZCBiZSBwYXNzZWQuXG5hc3luYyBmdW5jdGlvbiBsb2FkRW1zY3JpcHRlbk1vZHVsZVdlYldvcmtlcihtb2R1bGVSZWxhdGl2ZVBhdGhPclVSTCwgYmFzZVVybCkge1xuICAgIGxldCBtb2R1bGVQcmVmaXggPSBudWxsO1xuICAgIGlmICh0eXBlb2YgbW9kdWxlUmVsYXRpdmVQYXRoT3JVUkwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1vZHVsZVByZWZpeCA9IG1vZHVsZVJlbGF0aXZlUGF0aE9yVVJMLmhyZWY7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1vZHVsZVJlbGF0aXZlUGF0aE9yVVJMLnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgICAgICBtb2R1bGVQcmVmaXggPSBtb2R1bGVSZWxhdGl2ZVBhdGhPclVSTDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1vZHVsZVByZWZpeCA9IGAke2Jhc2VVcmx9LyR7bW9kdWxlUmVsYXRpdmVQYXRoT3JVUkx9YDtcbiAgICB9XG4gICAgaWYgKG1vZHVsZVByZWZpeC5lbmRzV2l0aCgnLmpzJykpIHtcbiAgICAgICAgbW9kdWxlUHJlZml4ID0gbW9kdWxlUHJlZml4LnN1YnN0cmluZygwLCBtb2R1bGVQcmVmaXgubGVuZ3RoIC0gMyk7XG4gICAgfVxuICAgIGlmIChtb2R1bGVQcmVmaXguZW5kc1dpdGgoJy53YXNtJykpIHtcbiAgICAgICAgbW9kdWxlUHJlZml4ID0gbW9kdWxlUHJlZml4LnN1YnN0cmluZygwLCBtb2R1bGVQcmVmaXgubGVuZ3RoIC0gNSk7XG4gICAgfVxuICAgIC8vIGltcG9ydFNjcmlwdHMgLyBVTUQgaXMgcmVxdWlyZWQgb3ZlciBkeW5hbWljIEVTTSBpbXBvcnQgdW50aWwgRmlyZWZveFxuICAgIC8vIGFkZHMgd29ya2VyIGR5bmFtaWMgaW1wb3J0IHN1cHBvcnQ6XG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU0MDkxM1xuICAgIGNvbnN0IHdhc21CaW5hcnlQYXRoID0gYCR7bW9kdWxlUHJlZml4fS53YXNtYDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh3YXNtQmluYXJ5UGF0aCwgeyByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicgfSk7XG4gICAgY29uc3Qgd2FzbUJpbmFyeSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgY29uc3QgbW9kdWxlUGF0aCA9IGAke21vZHVsZVByZWZpeH0udW1kLmpzYDtcbiAgICBpbXBvcnRTY3JpcHRzKG1vZHVsZVBhdGgpO1xuICAgIGNvbnN0IG1vZHVsZUJhc2VOYW1lID0gY2FtZWxDYXNlKG1vZHVsZVByZWZpeC5yZXBsYWNlKC8uKlxcLy8sICcnKSk7XG4gICAgLy8gQHRzLWlnbm9yZTogZXJyb3IgVFM3MDUzOiBFbGVtZW50IGltcGxpY2l0bHkgaGFzIGFuICdhbnknIHR5cGUgYmVjYXVzZSBleHByZXNzaW9uIG9mIHR5cGUgJ3N0cmluZycgY2FuJ3QgYmUgdXNlZCB0byBpbmRleCB0eXBlICdXb3JrZXJHbG9iYWxTY29wZSAmIHR5cGVvZiBnbG9iYWxUaGlzJy5cbiAgICBjb25zdCB3cmFwcGVyTW9kdWxlID0gc2VsZlttb2R1bGVCYXNlTmFtZV07XG4gICAgY29uc3QgZW1zY3JpcHRlbk1vZHVsZSA9IHdyYXBwZXJNb2R1bGUoeyB3YXNtQmluYXJ5IH0pO1xuICAgIHJldHVybiBlbXNjcmlwdGVuTW9kdWxlO1xufVxuZXhwb3J0IGRlZmF1bHQgbG9hZEVtc2NyaXB0ZW5Nb2R1bGVXZWJXb3JrZXI7XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJjYW1lbENhc2UiLCJsb2FkRW1zY3JpcHRlbk1vZHVsZVdlYldvcmtlciIsIm1vZHVsZVJlbGF0aXZlUGF0aE9yVVJMIiwiYmFzZVVybCIsIm1vZHVsZVByZWZpeCIsImhyZWYiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJ3YXNtQmluYXJ5UGF0aCIsInJlc3BvbnNlIiwiZ2V0IiwicmVzcG9uc2VUeXBlIiwid2FzbUJpbmFyeSIsImRhdGEiLCJtb2R1bGVQYXRoIiwiaW1wb3J0U2NyaXB0cyIsIm1vZHVsZUJhc2VOYW1lIiwicmVwbGFjZSIsIndyYXBwZXJNb2R1bGUiLCJzZWxmIiwiZW1zY3JpcHRlbk1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/internal/loadEmscriptenModuleWebWorker.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/internal/meshTransferables.js\\\":\\n/*!***********************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/internal/meshTransferables.js ***!\\n  \\\\***********************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nfunction meshTransferables(mesh) {\\\\n  const transferables = [];\\\\n  if (mesh.points != null) {\\\\n    transferables.push(mesh.points.buffer);\\\\n  }\\\\n  if (mesh.pointData != null) {\\\\n    transferables.push(mesh.pointData.buffer);\\\\n  }\\\\n  if (mesh.cells != null) {\\\\n    transferables.push(mesh.cells.buffer);\\\\n  }\\\\n  if (mesh.cellData != null) {\\\\n    transferables.push(mesh.cellData.buffer);\\\\n  }\\\\n  return transferables;\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meshTransferables);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL2ludGVybmFsL21lc2hUcmFuc2ZlcmFibGVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFFQSxTQUFTQSxpQkFBaUJBLENBQUVDLElBQVU7RUFDcEMsTUFBTUMsYUFBYSxHQUFrQixFQUFFO0VBQ3ZDLElBQUlELElBQUksQ0FBQ0UsTUFBTSxJQUFJLElBQUksRUFBRTtJQUN2QkQsYUFBYSxDQUFDRSxJQUFJLENBQUNILElBQUksQ0FBQ0UsTUFBTSxDQUFDRSxNQUFNLENBQUM7O0VBRXhDLElBQUlKLElBQUksQ0FBQ0ssU0FBUyxJQUFJLElBQUksRUFBRTtJQUMxQkosYUFBYSxDQUFDRSxJQUFJLENBQUNILElBQUksQ0FBQ0ssU0FBUyxDQUFDRCxNQUFNLENBQUM7O0VBRTNDLElBQUlKLElBQUksQ0FBQ00sS0FBSyxJQUFJLElBQUksRUFBRTtJQUN0QkwsYUFBYSxDQUFDRSxJQUFJLENBQUNILElBQUksQ0FBQ00sS0FBSyxDQUFDRixNQUFNLENBQUM7O0VBRXZDLElBQUlKLElBQUksQ0FBQ08sUUFBUSxJQUFJLElBQUksRUFBRTtJQUN6Qk4sYUFBYSxDQUFDRSxJQUFJLENBQUNILElBQUksQ0FBQ08sUUFBUSxDQUFDSCxNQUFNLENBQUM7O0VBRzFDLE9BQU9ILGFBQWE7QUFDdEI7QUFFQSxpRUFBZUYsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi4vLi4vLi4vc3JjL2NvcmUvaW50ZXJuYWwvbWVzaFRyYW5zZmVyYWJsZXMudHM/NGM1NiJdLCJuYW1lcyI6WyJtZXNoVHJhbnNmZXJhYmxlcyIsIm1lc2giLCJ0cmFuc2ZlcmFibGVzIiwicG9pbnRzIiwicHVzaCIsImJ1ZmZlciIsInBvaW50RGF0YSIsImNlbGxzIiwiY2VsbERhdGEiXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/internal/meshTransferables.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/core/internal/polyDataTransferables.js\\\":\\n/*!***************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/core/internal/polyDataTransferables.js ***!\\n  \\\\***************************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nfunction polyDataTransferables(polyData) {\\\\n  const transferables = [];\\\\n  if (polyData.points != null) {\\\\n    transferables.push(polyData.points.buffer);\\\\n  }\\\\n  if (polyData.vertices != null) {\\\\n    transferables.push(polyData.vertices.buffer);\\\\n  }\\\\n  if (polyData.lines != null) {\\\\n    transferables.push(polyData.lines.buffer);\\\\n  }\\\\n  if (polyData.polygons != null) {\\\\n    transferables.push(polyData.polygons.buffer);\\\\n  }\\\\n  if (polyData.triangleStrips != null) {\\\\n    transferables.push(polyData.triangleStrips.buffer);\\\\n  }\\\\n  if (polyData.pointData != null) {\\\\n    transferables.push(polyData.pointData.buffer);\\\\n  }\\\\n  if (polyData.cellData != null) {\\\\n    transferables.push(polyData.cellData.buffer);\\\\n  }\\\\n  return transferables;\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (polyDataTransferables);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9jb3JlL2ludGVybmFsL3BvbHlEYXRhVHJhbnNmZXJhYmxlcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBRUEsU0FBU0EscUJBQXFCQSxDQUFFQyxRQUFrQjtFQUNoRCxNQUFNQyxhQUFhLEdBQWtCLEVBQUU7RUFDdkMsSUFBSUQsUUFBUSxDQUFDRSxNQUFNLElBQUksSUFBSSxFQUFFO0lBQzNCRCxhQUFhLENBQUNFLElBQUksQ0FBQ0gsUUFBUSxDQUFDRSxNQUFNLENBQUNFLE1BQU0sQ0FBQzs7RUFFNUMsSUFBSUosUUFBUSxDQUFDSyxRQUFRLElBQUksSUFBSSxFQUFFO0lBQzdCSixhQUFhLENBQUNFLElBQUksQ0FBQ0gsUUFBUSxDQUFDSyxRQUFRLENBQUNELE1BQU0sQ0FBQzs7RUFFOUMsSUFBSUosUUFBUSxDQUFDTSxLQUFLLElBQUksSUFBSSxFQUFFO0lBQzFCTCxhQUFhLENBQUNFLElBQUksQ0FBQ0gsUUFBUSxDQUFDTSxLQUFLLENBQUNGLE1BQU0sQ0FBQzs7RUFFM0MsSUFBSUosUUFBUSxDQUFDTyxRQUFRLElBQUksSUFBSSxFQUFFO0lBQzdCTixhQUFhLENBQUNFLElBQUksQ0FBQ0gsUUFBUSxDQUFDTyxRQUFRLENBQUNILE1BQU0sQ0FBQzs7RUFFOUMsSUFBSUosUUFBUSxDQUFDUSxjQUFjLElBQUksSUFBSSxFQUFFO0lBQ25DUCxhQUFhLENBQUNFLElBQUksQ0FBQ0gsUUFBUSxDQUFDUSxjQUFjLENBQUNKLE1BQU0sQ0FBQzs7RUFFcEQsSUFBSUosUUFBUSxDQUFDUyxTQUFTLElBQUksSUFBSSxFQUFFO0lBQzlCUixhQUFhLENBQUNFLElBQUksQ0FBQ0gsUUFBUSxDQUFDUyxTQUFTLENBQUNMLE1BQU0sQ0FBQzs7RUFFL0MsSUFBSUosUUFBUSxDQUFDVSxRQUFRLElBQUksSUFBSSxFQUFFO0lBQzdCVCxhQUFhLENBQUNFLElBQUksQ0FBQ0gsUUFBUSxDQUFDVSxRQUFRLENBQUNOLE1BQU0sQ0FBQzs7RUFHOUMsT0FBT0gsYUFBYTtBQUN0QjtBQUVBLGlFQUFlRixxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uLi8uLi8uLi9zcmMvY29yZS9pbnRlcm5hbC9wb2x5RGF0YVRyYW5zZmVyYWJsZXMudHM/NjQ4MCJdLCJuYW1lcyI6WyJwb2x5RGF0YVRyYW5zZmVyYWJsZXMiLCJwb2x5RGF0YSIsInRyYW5zZmVyYWJsZXMiLCJwb2ludHMiLCJwdXNoIiwiYnVmZmVyIiwidmVydGljZXMiLCJsaW5lcyIsInBvbHlnb25zIiwidHJpYW5nbGVTdHJpcHMiLCJwb2ludERhdGEiLCJjZWxsRGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/core/internal/polyDataTransferables.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/io/extensionToImageIO.js\\\":\\n/*!*************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/io/extensionToImageIO.js ***!\\n  \\\\*************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst extensionToIO = new Map([['bmp', 'BMPImageIO'], ['BMP', 'BMPImageIO'], ['dcm', 'GDCMImageIO'], ['DCM', 'GDCMImageIO'], ['gipl', 'GiplImageIO'], ['gipl.gz', 'GiplImageIO'], ['hdf5', 'HDF5ImageIO'], ['jpg', 'JPEGImageIO'], ['JPG', 'JPEGImageIO'], ['jpeg', 'JPEGImageIO'], ['JPEG', 'JPEGImageIO'], ['iwi', 'WasmImageIO'], ['iwi.cbor', 'WasmImageIO'], ['iwi.cbor.zstd', 'WasmZstdImageIO'], ['lsm', 'LSMImageIO'], ['mnc', 'MINCImageIO'], ['MNC', 'MINCImageIO'], ['mnc.gz', 'MINCImageIO'], ['MNC.GZ', 'MINCImageIO'], ['mnc2', 'MINCImageIO'], ['MNC2', 'MINCImageIO'], ['mgh', 'MGHImageIO'], ['mgz', 'MGHImageIO'], ['mgh.gz', 'MGHImageIO'], ['mha', 'MetaImageIO'], ['mhd', 'MetaImageIO'], ['mrc', 'MRCImageIO'], ['nia', 'NiftiImageIO'], ['nii', 'NiftiImageIO'], ['nii.gz', 'NiftiImageIO'], ['hdr', 'NiftiImageIO'], ['nrrd', 'NrrdImageIO'], ['NRRD', 'NrrdImageIO'], ['nhdr', 'NrrdImageIO'], ['NHDR', 'NrrdImageIO'], ['png', 'PNGImageIO'], ['PNG', 'PNGImageIO'], ['pic', 'BioRadImageIO'], ['PIC', 'BioRadImageIO'], ['tif', 'TIFFImageIO'], ['TIF', 'TIFFImageIO'], ['tiff', 'TIFFImageIO'], ['TIFF', 'TIFFImageIO'], ['vtk', 'VTKImageIO'], ['VTK', 'VTKImageIO'], ['isq', 'ScancoImageIO'], ['ISQ', 'ScancoImageIO'], ['fdf', 'FDFImageIO'], ['FDF', 'FDFImageIO']]);\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (extensionToIO);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9pby9leHRlbnNpb25Ub0ltYWdlSU8uanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGFBQWEsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FDNUIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLEVBQ3JCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxFQUVyQixDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsRUFDdEIsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLEVBRXRCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxFQUN2QixDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsRUFFMUIsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLEVBRXZCLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxFQUN0QixDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsRUFDdEIsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLEVBQ3ZCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxFQUV2QixDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsRUFDdEIsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLEVBQzNCLENBQUMsZUFBZSxFQUFFLGlCQUFpQixDQUFDLEVBRXBDLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxFQUVyQixDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsRUFDdEIsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLEVBQ3RCLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxFQUN6QixDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFDekIsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLEVBQ3ZCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxFQUV2QixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsRUFDckIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLEVBQ3JCLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxFQUV4QixDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsRUFDdEIsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLEVBRXRCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxFQUVyQixDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsRUFDdkIsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLEVBQ3ZCLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxFQUMxQixDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsRUFFdkIsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLEVBQ3ZCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxFQUN2QixDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsRUFDdkIsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLEVBRXZCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxFQUNyQixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsRUFFckIsQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLEVBQ3hCLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxFQUV4QixDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsRUFDdEIsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLEVBQ3RCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxFQUN2QixDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsRUFFdkIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLEVBQ3JCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxFQUVyQixDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsRUFDeEIsQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLEVBRXhCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxFQUNyQixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FDdEIsQ0FBQztBQUVGLGlFQUFlRCxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi4vLi4vc3JjL2lvL2V4dGVuc2lvblRvSW1hZ2VJTy50cz9iMzg4Il0sIm5hbWVzIjpbImV4dGVuc2lvblRvSU8iLCJNYXAiXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/io/extensionToImageIO.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/io/extensionToMeshIO.js\\\":\\n/*!************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/io/extensionToMeshIO.js ***!\\n  \\\\************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst extensionToIO = new Map([['vtk', 'VTKPolyDataMeshIO'], ['VTK', 'VTKPolyDataMeshIO'], ['byu', 'BYUMeshIO'], ['BYU', 'BYUMeshIO'], ['fsa', 'FreeSurferAsciiMeshIO'], ['FSA', 'FreeSurferAsciiMeshIO'], ['fsb', 'FreeSurferBinaryMeshIO'], ['FSB', 'FreeSurferBinaryMeshIO'], ['obj', 'OBJMeshIO'], ['OBJ', 'OBJMeshIO'], ['off', 'OFFMeshIO'], ['OFF', 'OFFMeshIO'], ['stl', 'STLMeshIO'], ['STL', 'STLMeshIO'], ['swc', 'SWCMeshIO'], ['SWC', 'SWCMeshIO'], ['iwm', 'WasmMeshIO'], ['iwm.cbor', 'WasmMeshIO'], ['iwm.cbor.zstd', 'WasmZstdMeshIO']]);\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (extensionToIO);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9pby9leHRlbnNpb25Ub01lc2hJTy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsYUFBYSxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUM1QixDQUFDLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxFQUM1QixDQUFDLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxFQUM1QixDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsRUFDcEIsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQ3BCLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLEVBQ2hDLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLEVBQ2hDLENBQUMsS0FBSyxFQUFFLHdCQUF3QixDQUFDLEVBQ2pDLENBQUMsS0FBSyxFQUFFLHdCQUF3QixDQUFDLEVBQ2pDLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUNwQixDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsRUFDcEIsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQ3BCLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUNwQixDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsRUFDcEIsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQ3BCLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUNwQixDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsRUFDcEIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLEVBQ3JCLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxFQUMxQixDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUNwQyxDQUFDO0FBRUYsaUVBQWVELGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uLi8uLi9zcmMvaW8vZXh0ZW5zaW9uVG9NZXNoSU8udHM/ZTg5MSJdLCJuYW1lcyI6WyJleHRlbnNpb25Ub0lPIiwiTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/io/extensionToMeshIO.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/io/getFileExtension.js\\\":\\n/*!***********************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/io/getFileExtension.js ***!\\n  \\\\***********************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nfunction getFileExtension(filePath) {\\\\n  let extension = filePath.slice((filePath.lastIndexOf('.') - 1 >>> 0) + 2);\\\\n  if (extension.toLowerCase() === 'gz') {\\\\n    const index = filePath.slice(0, -3).lastIndexOf('.');\\\\n    extension = filePath.slice((index - 1 >>> 0) + 2);\\\\n  } else if (extension.toLowerCase() === 'cbor') {\\\\n    const index = filePath.slice(0, -5).lastIndexOf('.');\\\\n    extension = filePath.slice((index - 1 >>> 0) + 2);\\\\n  } else if (extension.toLowerCase() === 'zstd') {\\\\n    // .iwi.cbor.zstd\\\\n    const index = filePath.slice(0, -10).lastIndexOf('.');\\\\n    extension = filePath.slice((index - 1 >>> 0) + 2);\\\\n  } else if (extension.toLowerCase() === 'zip') {\\\\n    const index = filePath.slice(0, -4).lastIndexOf('.');\\\\n    extension = filePath.slice((index - 1 >>> 0) + 2);\\\\n  }\\\\n  return extension;\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getFileExtension);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9pby9nZXRGaWxlRXh0ZW5zaW9uLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxnQkFBZ0JBLENBQUVDLFFBQWdCO0VBQ3pDLElBQUlDLFNBQVMsR0FBR0QsUUFBUSxDQUFDRSxLQUFLLENBQUMsQ0FBQ0YsUUFBUSxDQUFDRyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDekUsSUFBSUYsU0FBUyxDQUFDRyxXQUFXLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDcEMsTUFBTUMsS0FBSyxHQUFHTCxRQUFRLENBQUNFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLEdBQUcsQ0FBQztJQUNwREYsU0FBUyxHQUFHRCxRQUFRLENBQUNFLEtBQUssQ0FBQyxDQUFDRyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDbEQsTUFBTSxJQUFJSixTQUFTLENBQUNHLFdBQVcsRUFBRSxLQUFLLE1BQU0sRUFBRTtJQUM3QyxNQUFNQyxLQUFLLEdBQUdMLFFBQVEsQ0FBQ0UsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsR0FBRyxDQUFDO0lBQ3BERixTQUFTLEdBQUdELFFBQVEsQ0FBQ0UsS0FBSyxDQUFDLENBQUNHLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNsRCxNQUFNLElBQUlKLFNBQVMsQ0FBQ0csV0FBVyxFQUFFLEtBQUssTUFBTSxFQUFFO0lBQzdDO0lBQ0EsTUFBTUMsS0FBSyxHQUFHTCxRQUFRLENBQUNFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLEdBQUcsQ0FBQztJQUNyREYsU0FBUyxHQUFHRCxRQUFRLENBQUNFLEtBQUssQ0FBQyxDQUFDRyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDbEQsTUFBTSxJQUFJSixTQUFTLENBQUNHLFdBQVcsRUFBRSxLQUFLLEtBQUssRUFBRTtJQUM1QyxNQUFNQyxLQUFLLEdBQUdMLFFBQVEsQ0FBQ0UsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsR0FBRyxDQUFDO0lBQ3BERixTQUFTLEdBQUdELFFBQVEsQ0FBQ0UsS0FBSyxDQUFDLENBQUNHLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7RUFFbkQsT0FBT0osU0FBUztBQUNsQjtBQUVBLGlFQUFlRixnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uLi8uLi9zcmMvaW8vZ2V0RmlsZUV4dGVuc2lvbi50cz80ODc1Il0sIm5hbWVzIjpbImdldEZpbGVFeHRlbnNpb24iLCJmaWxlUGF0aCIsImV4dGVuc2lvbiIsInNsaWNlIiwibGFzdEluZGV4T2YiLCJ0b0xvd2VyQ2FzZSIsImluZGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/io/getFileExtension.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/io/internal/ImageIOIndex.js\\\":\\n/*!****************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/io/internal/ImageIOIndex.js ***!\\n  \\\\****************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst ImageIOIndex = ['PNGImageIO', 'MetaImageIO', 'TIFFImageIO', 'NiftiImageIO', 'JPEGImageIO', 'NrrdImageIO', 'VTKImageIO', 'BMPImageIO', 'HDF5ImageIO', 'MINCImageIO', 'MRCImageIO', 'LSMImageIO', 'MGHImageIO', 'BioRadImageIO', 'GiplImageIO', 'GEAdwImageIO', 'GE4ImageIO', 'GE5ImageIO', 'GDCMImageIO', 'ScancoImageIO', 'FDFImageIO', 'WasmImageIO', 'WasmZstdImageIO'];\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ImageIOIndex);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9pby9pbnRlcm5hbC9JbWFnZUlPSW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFlBQVksR0FBRyxDQUFDLFlBQVksRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsQ0FBRztBQUVqWCxpRUFBZUEsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ay12dGstdmlld2VyLy4uLy4uLy4uL3NyYy9pby9pbnRlcm5hbC9JbWFnZUlPSW5kZXgudHM/OGIyYyJdLCJuYW1lcyI6WyJJbWFnZUlPSW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/io/internal/ImageIOIndex.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/io/internal/MeshIOIndex.js\\\":\\n/*!***************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/io/internal/MeshIOIndex.js ***!\\n  \\\\***************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst MeshIOIndex = ['BYUMeshIO', 'FreeSurferAsciiMeshIO', 'FreeSurferBinaryMeshIO', 'OBJMeshIO', 'OFFMeshIO', 'STLMeshIO', 'SWCMeshIO', 'VTKPolyDataMeshIO', 'WasmMeshIO', 'WasmZstdMeshIO'];\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MeshIOIndex);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9pby9pbnRlcm5hbC9NZXNoSU9JbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVyxHQUFHLENBQUMsV0FBVyxFQUFFLHVCQUF1QixFQUFFLHdCQUF3QixFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLENBQUc7QUFFL0wsaUVBQWVBLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGstdnRrLXZpZXdlci8uLi8uLi8uLi9zcmMvaW8vaW50ZXJuYWwvTWVzaElPSW5kZXgudHM/ZmVkNiJdLCJuYW1lcyI6WyJNZXNoSU9JbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/io/internal/MeshIOIndex.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/io/internal/MimeToImageIO.js\\\":\\n/*!*****************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/io/internal/MimeToImageIO.js ***!\\n  \\\\*****************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst mimeToIO = new Map([['image/jpeg', 'JPEGImageIO'], ['image/png', 'PNGImageIO'], ['image/tiff', 'TIFFImageIO'], ['image/x-ms-bmp', 'BMPImageIO'], ['image/x-bmp', 'BMPImageIO'], ['image/bmp', 'BMPImageIO'], ['application/dicom', 'GDCMImageIO']]);\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mimeToIO);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9pby9pbnRlcm5hbC9NaW1lVG9JbWFnZUlPLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxRQUFRLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQ3ZCLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxFQUM3QixDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsRUFDM0IsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLEVBQzdCLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLEVBQ2hDLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxFQUM3QixDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsRUFDM0IsQ0FBQyxtQkFBbUIsRUFBRSxhQUFhLENBQUMsQ0FDckMsQ0FBQztBQUVGLGlFQUFlRCxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi4vLi4vLi4vc3JjL2lvL2ludGVybmFsL01pbWVUb0ltYWdlSU8udHM/YmQwZSJdLCJuYW1lcyI6WyJtaW1lVG9JTyIsIk1hcCJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/io/internal/MimeToImageIO.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/io/internal/MimeToMeshIO.js\\\":\\n/*!****************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/io/internal/MimeToMeshIO.js ***!\\n  \\\\****************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\nconst mimeToIO = new Map([]);\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mimeToIO);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC9pby9pbnRlcm5hbC9NaW1lVG9NZXNoSU8uanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFFBQVEsR0FBRyxJQUFJQyxHQUFHLENBQUMsRUFDeEIsQ0FBQztBQUVGLGlFQUFlRCxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi4vLi4vLi4vc3JjL2lvL2ludGVybmFsL01pbWVUb01lc2hJTy50cz9jNmMyIl0sIm5hbWVzIjpbIm1pbWVUb0lPIiwiTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/io/internal/MimeToMeshIO.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/pipeline/internal/runPipelineEmscripten.js\\\":\\n/*!*******************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/pipeline/internal/runPipelineEmscripten.js ***!\\n  \\\\*******************************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\n/* harmony import */ var _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/InterfaceTypes.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/InterfaceTypes.js\\\\\\\");\\\\n/* harmony import */ var _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/IOTypes.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/IOTypes.js\\\\\\\");\\\\n/* harmony import */ var _core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/bufferToTypedArray.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/bufferToTypedArray.js\\\\\\\");\\\\n/* harmony import */ var _core_FloatTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/FloatTypes.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/FloatTypes.js\\\\\\\");\\\\n/* harmony import */ var _core_IntTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/IntTypes.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/IntTypes.js\\\\\\\");\\\\n\\\\n\\\\n\\\\n\\\\n\\\\nconst haveSharedArrayBuffer = typeof globalThis.SharedArrayBuffer === 'function';\\\\nconst encoder = new TextEncoder();\\\\nconst decoder = new TextDecoder('utf-8');\\\\nfunction readFileSharedArray(emscriptenModule, path) {\\\\n  const opts = {\\\\n    flags: 'r',\\\\n    encoding: 'binary'\\\\n  };\\\\n  const stream = emscriptenModule.fs_open(path, opts.flags);\\\\n  const stat = emscriptenModule.fs_stat(path);\\\\n  const length = stat.size;\\\\n  let arrayBufferData = null;\\\\n  if (haveSharedArrayBuffer) {\\\\n    arrayBufferData = new SharedArrayBuffer(length); // eslint-disable-line\\\\n  } else {\\\\n    arrayBufferData = new ArrayBuffer(length);\\\\n  }\\\\n  const array = new Uint8Array(arrayBufferData);\\\\n  emscriptenModule.fs_read(stream, array, 0, length, 0);\\\\n  emscriptenModule.fs_close(stream);\\\\n  return array;\\\\n}\\\\nfunction memoryUint8SharedArray(emscriptenModule, byteOffset, length) {\\\\n  let arrayBufferData = null;\\\\n  if (haveSharedArrayBuffer) {\\\\n    arrayBufferData = new SharedArrayBuffer(length); // eslint-disable-line\\\\n  } else {\\\\n    arrayBufferData = new ArrayBuffer(length);\\\\n  }\\\\n  const array = new Uint8Array(arrayBufferData);\\\\n  const dataArrayView = new Uint8Array(emscriptenModule.HEAPU8.buffer, byteOffset, length);\\\\n  array.set(dataArrayView);\\\\n  return array;\\\\n}\\\\nfunction setPipelineModuleInputArray(emscriptenModule, dataArray, inputIndex, subIndex) {\\\\n  let dataPtr = 0;\\\\n  if (dataArray !== null) {\\\\n    dataPtr = emscriptenModule.ccall('itk_wasm_input_array_alloc', 'number', ['number', 'number', 'number', 'number'], [0, inputIndex, subIndex, dataArray.buffer.byteLength]);\\\\n    emscriptenModule.HEAPU8.set(new Uint8Array(dataArray.buffer), dataPtr);\\\\n  }\\\\n  return dataPtr;\\\\n}\\\\nfunction setPipelineModuleInputJSON(emscriptenModule, dataObject, inputIndex) {\\\\n  const dataJSON = JSON.stringify(dataObject);\\\\n  const jsonPtr = emscriptenModule.ccall('itk_wasm_input_json_alloc', 'number', ['number', 'number', 'number'], [0, inputIndex, dataJSON.length]);\\\\n  emscriptenModule.writeAsciiToMemory(dataJSON, jsonPtr, false);\\\\n}\\\\nfunction getPipelineModuleOutputArray(emscriptenModule, outputIndex, subIndex, componentType) {\\\\n  const dataPtr = emscriptenModule.ccall('itk_wasm_output_array_address', 'number', ['number', 'number', 'number'], [0, outputIndex, subIndex]);\\\\n  const dataSize = emscriptenModule.ccall('itk_wasm_output_array_size', 'number', ['number', 'number', 'number'], [0, outputIndex, subIndex]);\\\\n  const dataUint8 = memoryUint8SharedArray(emscriptenModule, dataPtr, dataSize);\\\\n  const data = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(componentType, dataUint8.buffer);\\\\n  return data;\\\\n}\\\\nfunction getPipelineModuleOutputJSON(emscriptenModule, outputIndex) {\\\\n  const jsonPtr = emscriptenModule.ccall('itk_wasm_output_json_address', 'number', ['number', 'number'], [0, outputIndex]);\\\\n  const dataJSON = emscriptenModule.AsciiToString(jsonPtr);\\\\n  const dataObject = JSON.parse(dataJSON);\\\\n  return dataObject;\\\\n}\\\\nfunction runPipelineEmscripten(pipelineModule, args, outputs, inputs) {\\\\n  if (!(inputs == null) && inputs.length > 0) {\\\\n    inputs.forEach(function (input, index) {\\\\n      switch (input.type) {\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].TextStream:\\\\n          {\\\\n            const dataArray = encoder.encode(input.data.data);\\\\n            const arrayPtr = setPipelineModuleInputArray(pipelineModule, dataArray, index, 0);\\\\n            const dataJSON = {\\\\n              size: dataArray.buffer.byteLength,\\\\n              data: `data:application/vnd.itk.address,0:${arrayPtr}`\\\\n            };\\\\n            setPipelineModuleInputJSON(pipelineModule, dataJSON, index);\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].BinaryStream:\\\\n          {\\\\n            const dataArray = input.data.data;\\\\n            const arrayPtr = setPipelineModuleInputArray(pipelineModule, dataArray, index, 0);\\\\n            const dataJSON = {\\\\n              size: dataArray.buffer.byteLength,\\\\n              data: `data:application/vnd.itk.address,0:${arrayPtr}`\\\\n            };\\\\n            setPipelineModuleInputJSON(pipelineModule, dataJSON, index);\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].TextFile:\\\\n          {\\\\n            pipelineModule.fs_writeFile(input.data.path, input.data.data);\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].BinaryFile:\\\\n          {\\\\n            pipelineModule.fs_writeFile(input.data.path, input.data.data);\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].Image:\\\\n          {\\\\n            const image = input.data;\\\\n            const dataPtr = setPipelineModuleInputArray(pipelineModule, image.data, index, 0);\\\\n            const directionPtr = setPipelineModuleInputArray(pipelineModule, image.direction, index, 1);\\\\n            const imageJSON = {\\\\n              imageType: image.imageType,\\\\n              name: image.name,\\\\n              origin: image.origin,\\\\n              spacing: image.spacing,\\\\n              direction: `data:application/vnd.itk.address,0:${directionPtr}`,\\\\n              size: image.size,\\\\n              data: `data:application/vnd.itk.address,0:${dataPtr}`,\\\\n              metadata: JSON.stringify(Array.from(image.metadata.entries()))\\\\n            };\\\\n            setPipelineModuleInputJSON(pipelineModule, imageJSON, index);\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].Mesh:\\\\n          {\\\\n            const mesh = input.data;\\\\n            const pointsPtr = setPipelineModuleInputArray(pipelineModule, mesh.points, index, 0);\\\\n            const cellsPtr = setPipelineModuleInputArray(pipelineModule, mesh.cells, index, 1);\\\\n            const pointDataPtr = setPipelineModuleInputArray(pipelineModule, mesh.pointData, index, 2);\\\\n            const cellDataPtr = setPipelineModuleInputArray(pipelineModule, mesh.cellData, index, 3);\\\\n            const meshJSON = {\\\\n              meshType: mesh.meshType,\\\\n              name: mesh.name,\\\\n              numberOfPoints: mesh.numberOfPoints,\\\\n              points: `data:application/vnd.itk.address,0:${pointsPtr}`,\\\\n              numberOfCells: mesh.numberOfCells,\\\\n              cells: `data:application/vnd.itk.address,0:${cellsPtr}`,\\\\n              cellBufferSize: mesh.cellBufferSize,\\\\n              numberOfPointPixels: mesh.numberOfPointPixels,\\\\n              pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`,\\\\n              numberOfCellPixels: mesh.numberOfCellPixels,\\\\n              cellData: `data:application/vnd.itk.address,0:${cellDataPtr}`\\\\n            };\\\\n            setPipelineModuleInputJSON(pipelineModule, meshJSON, index);\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].PolyData:\\\\n          {\\\\n            const polyData = input.data;\\\\n            const pointsPtr = setPipelineModuleInputArray(pipelineModule, polyData.points, index, 0);\\\\n            const verticesPtr = setPipelineModuleInputArray(pipelineModule, polyData.vertices, index, 1);\\\\n            const linesPtr = setPipelineModuleInputArray(pipelineModule, polyData.lines, index, 2);\\\\n            const polygonsPtr = setPipelineModuleInputArray(pipelineModule, polyData.polygons, index, 3);\\\\n            const triangleStripsPtr = setPipelineModuleInputArray(pipelineModule, polyData.triangleStrips, index, 4);\\\\n            const pointDataPtr = setPipelineModuleInputArray(pipelineModule, polyData.pointData, index, 5);\\\\n            const cellDataPtr = setPipelineModuleInputArray(pipelineModule, polyData.pointData, index, 6);\\\\n            const polyDataJSON = {\\\\n              polyDataType: polyData.polyDataType,\\\\n              name: polyData.name,\\\\n              numberOfPoints: polyData.numberOfPoints,\\\\n              points: `data:application/vnd.itk.address,0:${pointsPtr}`,\\\\n              verticesBufferSize: polyData.verticesBufferSize,\\\\n              vertices: `data:application/vnd.itk.address,0:${verticesPtr}`,\\\\n              linesBufferSize: polyData.linesBufferSize,\\\\n              lines: `data:application/vnd.itk.address,0:${linesPtr}`,\\\\n              polygonsBufferSize: polyData.polygonsBufferSize,\\\\n              polygons: `data:application/vnd.itk.address,0:${polygonsPtr}`,\\\\n              triangleStripsBufferSize: polyData.triangleStripsBufferSize,\\\\n              triangleStrips: `data:application/vnd.itk.address,0:${triangleStripsPtr}`,\\\\n              numberOfPointPixels: polyData.numberOfPointPixels,\\\\n              pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`,\\\\n              numberOfCellPixels: polyData.numberOfCellPixels,\\\\n              cellData: `data:application/vnd.itk.address,0:${cellDataPtr}`\\\\n            };\\\\n            setPipelineModuleInputJSON(pipelineModule, polyDataJSON, index);\\\\n            break;\\\\n          }\\\\n        case _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Text:\\\\n          {\\\\n            pipelineModule.fs_writeFile(input.path, input.data);\\\\n            break;\\\\n          }\\\\n        case _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Binary:\\\\n          {\\\\n            pipelineModule.fs_writeFile(input.path, input.data);\\\\n            break;\\\\n          }\\\\n        case _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Image:\\\\n          {\\\\n            const image = input.data;\\\\n            const imageJSON = {\\\\n              imageType: image.imageType,\\\\n              name: image.name,\\\\n              origin: image.origin,\\\\n              spacing: image.spacing,\\\\n              direction: 'data:application/vnd.itk.path,data/direction.raw',\\\\n              size: image.size,\\\\n              data: 'data:application/vnd.itk.path,data/data.raw'\\\\n            };\\\\n            pipelineModule.fs_mkdirs(`${input.path}/data`);\\\\n            pipelineModule.fs_writeFile(`${input.path}/index.json`, JSON.stringify(imageJSON));\\\\n            if (image.data === null) {\\\\n              throw Error('image.data is null');\\\\n            }\\\\n            pipelineModule.fs_writeFile(`${input.path}/data/data.raw`, new Uint8Array(image.data.buffer));\\\\n            pipelineModule.fs_writeFile(`${input.path}/data/direction.raw`, new Uint8Array(image.direction.buffer));\\\\n            break;\\\\n          }\\\\n        case _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Mesh:\\\\n          {\\\\n            const mesh = input.data;\\\\n            const meshJSON = {\\\\n              meshType: mesh.meshType,\\\\n              name: mesh.name,\\\\n              numberOfPoints: mesh.numberOfPoints,\\\\n              points: 'data:application/vnd.itk.path,data/points.raw',\\\\n              numberOfPointPixels: mesh.numberOfPointPixels,\\\\n              pointData: 'data:application/vnd.itk.path,data/pointData.raw',\\\\n              numberOfCells: mesh.numberOfCells,\\\\n              cells: 'data:application/vnd.itk.path,data/cells.raw',\\\\n              numberOfCellPixels: mesh.numberOfCellPixels,\\\\n              cellData: 'data:application/vnd.itk.path,data/cellData.raw',\\\\n              cellBufferSize: mesh.cellBufferSize\\\\n            };\\\\n            pipelineModule.fs_mkdirs(`${input.path}/data`);\\\\n            pipelineModule.fs_writeFile(`${input.path}/index.json`, JSON.stringify(meshJSON));\\\\n            if (meshJSON.numberOfPoints > 0) {\\\\n              if (mesh.points === null) {\\\\n                throw Error('mesh.points is null');\\\\n              }\\\\n              pipelineModule.fs_writeFile(`${input.path}/data/points.raw`, new Uint8Array(mesh.points.buffer));\\\\n            }\\\\n            if (meshJSON.numberOfPointPixels > 0) {\\\\n              if (mesh.pointData === null) {\\\\n                throw Error('mesh.pointData is null');\\\\n              }\\\\n              pipelineModule.fs_writeFile(`${input.path}/data/pointData.raw`, new Uint8Array(mesh.pointData.buffer));\\\\n            }\\\\n            if (meshJSON.numberOfCells > 0) {\\\\n              if (mesh.cells === null) {\\\\n                throw Error('mesh.cells is null');\\\\n              }\\\\n              pipelineModule.fs_writeFile(`${input.path}/data/cells.raw`, new Uint8Array(mesh.cells.buffer));\\\\n            }\\\\n            if (meshJSON.numberOfCellPixels > 0) {\\\\n              if (mesh.cellData === null) {\\\\n                throw Error('mesh.cellData is null');\\\\n              }\\\\n              pipelineModule.fs_writeFile(`${input.path}/data/cellData.raw`, new Uint8Array(mesh.cellData.buffer));\\\\n            }\\\\n            break;\\\\n          }\\\\n        default:\\\\n          throw Error('Unsupported input InterfaceType');\\\\n      }\\\\n    });\\\\n  }\\\\n  pipelineModule.resetModuleStdout();\\\\n  pipelineModule.resetModuleStderr();\\\\n  let returnValue = 0;\\\\n  try {\\\\n    returnValue = pipelineModule.callMain(args.slice());\\\\n  } catch (exception) {\\\\n    // Note: Module must be built with CMAKE_BUILD_TYPE set to Debug.\\\\n    // e.g.: itk-wasm build my/project -- -DCMAKE_BUILD_TYPE:STRING=Debug\\\\n    if (typeof exception === 'number') {\\\\n      console.log('Exception while running pipeline:');\\\\n      console.log('stdout:', pipelineModule.getModuleStdout());\\\\n      console.error('stderr:', pipelineModule.getModuleStderr());\\\\n      if (typeof pipelineModule.getExceptionMessage !== 'undefined') {\\\\n        console.error('exception:', pipelineModule.getExceptionMessage(exception));\\\\n      } else {\\\\n        console.error('Build module in Debug mode for exception message information.');\\\\n      }\\\\n    }\\\\n    throw exception;\\\\n  }\\\\n  const stdout = pipelineModule.getModuleStdout();\\\\n  const stderr = pipelineModule.getModuleStderr();\\\\n  const populatedOutputs = [];\\\\n  if (!(outputs == null) && outputs.length > 0 && returnValue === 0) {\\\\n    outputs.forEach(function (output, index) {\\\\n      let outputData = null;\\\\n      switch (output.type) {\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].TextStream:\\\\n          {\\\\n            // const jsonPtr = pipelineModule.ccall('itk_wasm_output_json_address', 'number', ['number', 'number'], [0, index])\\\\n            // const jsonSize = pipelineModule.ccall('itk_wasm_output_json_size', 'number', ['number', 'number'], [0, index])\\\\n            // const jsonArray = pipelineModule.HEAPU8.slice(jsonPtr, jsonPtr + jsonSize)\\\\n            // const dataJSON = JSON.parse(decoder.decode(jsonArray))\\\\n            const dataPtr = pipelineModule.ccall('itk_wasm_output_array_address', 'number', ['number', 'number', 'number'], [0, index, 0]);\\\\n            const dataSize = pipelineModule.ccall('itk_wasm_output_array_size', 'number', ['number', 'number', 'number'], [0, index, 0]);\\\\n            const dataArrayView = new Uint8Array(pipelineModule.HEAPU8.buffer, dataPtr, dataSize);\\\\n            outputData = {\\\\n              data: decoder.decode(dataArrayView)\\\\n            };\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].JsonObject:\\\\n          {\\\\n            const dataPtr = pipelineModule.ccall('itk_wasm_output_array_address', 'number', ['number', 'number', 'number'], [0, index, 0]);\\\\n            const dataSize = pipelineModule.ccall('itk_wasm_output_array_size', 'number', ['number', 'number', 'number'], [0, index, 0]);\\\\n            const dataArrayView = new Uint8Array(pipelineModule.HEAPU8.buffer, dataPtr, dataSize);\\\\n            outputData = {\\\\n              data: JSON.parse(decoder.decode(dataArrayView))\\\\n            };\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].BinaryStream:\\\\n          {\\\\n            // const jsonPtr = pipelineModule.ccall('itk_wasm_output_json_address', 'number', ['number', 'number'], [0, index])\\\\n            // const jsonSize = pipelineModule.ccall('itk_wasm_output_json_size', 'number', ['number', 'number'], [0, index])\\\\n            // const jsonArray = pipelineModule.HEAPU8.slice(jsonPtr, jsonPtr + jsonSize)\\\\n            // const dataJSON = JSON.parse(decoder.decode(jsonArray))\\\\n            const dataPtr = pipelineModule.ccall('itk_wasm_output_array_address', 'number', ['number', 'number', 'number'], [0, index, 0]);\\\\n            const dataSize = pipelineModule.ccall('itk_wasm_output_array_size', 'number', ['number', 'number', 'number'], [0, index, 0]);\\\\n            outputData = {\\\\n              data: memoryUint8SharedArray(pipelineModule, dataPtr, dataSize)\\\\n            };\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].TextFile:\\\\n          {\\\\n            outputData = {\\\\n              path: output.data.path,\\\\n              data: pipelineModule.fs_readFile(output.data.path, {\\\\n                encoding: 'utf8'\\\\n              })\\\\n            };\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].BinaryFile:\\\\n          {\\\\n            outputData = {\\\\n              path: output.data.path,\\\\n              data: readFileSharedArray(pipelineModule, output.data.path)\\\\n            };\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].Image:\\\\n          {\\\\n            const image = getPipelineModuleOutputJSON(pipelineModule, index);\\\\n            image.data = getPipelineModuleOutputArray(pipelineModule, index, 0, image.imageType.componentType);\\\\n            image.direction = getPipelineModuleOutputArray(pipelineModule, index, 1, _core_FloatTypes_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"].Float64);\\\\n            image.metadata = new Map(image.metadata);\\\\n            outputData = image;\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].Mesh:\\\\n          {\\\\n            const mesh = getPipelineModuleOutputJSON(pipelineModule, index);\\\\n            if (mesh.numberOfPoints > 0) {\\\\n              mesh.points = getPipelineModuleOutputArray(pipelineModule, index, 0, mesh.meshType.pointComponentType);\\\\n            } else {\\\\n              mesh.points = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.pointComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            if (mesh.numberOfCells > 0) {\\\\n              mesh.cells = getPipelineModuleOutputArray(pipelineModule, index, 1, mesh.meshType.cellComponentType);\\\\n            } else {\\\\n              mesh.cells = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.cellComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            if (mesh.numberOfPointPixels > 0) {\\\\n              mesh.pointData = getPipelineModuleOutputArray(pipelineModule, index, 2, mesh.meshType.pointPixelComponentType);\\\\n            } else {\\\\n              mesh.pointData = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.pointPixelComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            if (mesh.numberOfCellPixels > 0) {\\\\n              mesh.cellData = getPipelineModuleOutputArray(pipelineModule, index, 3, mesh.meshType.cellPixelComponentType);\\\\n            } else {\\\\n              mesh.cellData = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.cellPixelComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            outputData = mesh;\\\\n            break;\\\\n          }\\\\n        case _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"].PolyData:\\\\n          {\\\\n            const polyData = getPipelineModuleOutputJSON(pipelineModule, index);\\\\n            if (polyData.numberOfPoints > 0) {\\\\n              polyData.points = getPipelineModuleOutputArray(pipelineModule, index, 0, _core_FloatTypes_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"].Float32);\\\\n            } else {\\\\n              polyData.points = new Float32Array();\\\\n            }\\\\n            if (polyData.verticesBufferSize > 0) {\\\\n              polyData.vertices = getPipelineModuleOutputArray(pipelineModule, index, 1, _core_IntTypes_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"].UInt32);\\\\n            } else {\\\\n              polyData.vertices = new Uint32Array();\\\\n            }\\\\n            if (polyData.linesBufferSize > 0) {\\\\n              polyData.lines = getPipelineModuleOutputArray(pipelineModule, index, 2, _core_IntTypes_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"].UInt32);\\\\n            } else {\\\\n              polyData.lines = new Uint32Array();\\\\n            }\\\\n            if (polyData.polygonsBufferSize > 0) {\\\\n              polyData.polygons = getPipelineModuleOutputArray(pipelineModule, index, 3, _core_IntTypes_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"].UInt32);\\\\n            } else {\\\\n              polyData.polygons = new Uint32Array();\\\\n            }\\\\n            if (polyData.triangleStripsBufferSize > 0) {\\\\n              polyData.triangleStrips = getPipelineModuleOutputArray(pipelineModule, index, 4, _core_IntTypes_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"].UInt32);\\\\n            } else {\\\\n              polyData.triangleStrips = new Uint32Array();\\\\n            }\\\\n            if (polyData.numberOfPointPixels > 0) {\\\\n              polyData.pointData = getPipelineModuleOutputArray(pipelineModule, index, 5, polyData.polyDataType.pointPixelComponentType);\\\\n            } else {\\\\n              polyData.pointData = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(polyData.polyDataType.pointPixelComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            if (polyData.numberOfCellPixels > 0) {\\\\n              polyData.cellData = getPipelineModuleOutputArray(pipelineModule, index, 6, polyData.polyDataType.cellPixelComponentType);\\\\n            } else {\\\\n              polyData.cellData = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(polyData.polyDataType.cellPixelComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            outputData = polyData;\\\\n            break;\\\\n          }\\\\n        case _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Text:\\\\n          {\\\\n            if (typeof output.path === 'undefined') {\\\\n              throw new Error('output.path not defined');\\\\n            }\\\\n            outputData = pipelineModule.fs_readFile(output.path, {\\\\n              encoding: 'utf8'\\\\n            });\\\\n            break;\\\\n          }\\\\n        case _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Binary:\\\\n          {\\\\n            if (typeof output.path === 'undefined') {\\\\n              throw new Error('output.path not defined');\\\\n            }\\\\n            outputData = readFileSharedArray(pipelineModule, output.path);\\\\n            break;\\\\n          }\\\\n        case _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Image:\\\\n          {\\\\n            if (typeof output.path === 'undefined') {\\\\n              throw new Error('output.path not defined');\\\\n            }\\\\n            const imageJSON = pipelineModule.fs_readFile(`${output.path}/index.json`, {\\\\n              encoding: 'utf8'\\\\n            });\\\\n            const image = JSON.parse(imageJSON);\\\\n            const dataUint8 = readFileSharedArray(pipelineModule, `${output.path}/data/data.raw`);\\\\n            image.data = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(image.imageType.componentType, dataUint8.buffer);\\\\n            const directionUint8 = readFileSharedArray(pipelineModule, `${output.path}/data/direction.raw`);\\\\n            image.direction = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(_core_FloatTypes_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"].Float64, directionUint8.buffer);\\\\n            outputData = image;\\\\n            break;\\\\n          }\\\\n        case _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Mesh:\\\\n          {\\\\n            if (typeof output.path === 'undefined') {\\\\n              throw new Error('output.path not defined');\\\\n            }\\\\n            const meshJSON = pipelineModule.fs_readFile(`${output.path}/index.json`, {\\\\n              encoding: 'utf8'\\\\n            });\\\\n            const mesh = JSON.parse(meshJSON);\\\\n            if (mesh.numberOfPoints > 0) {\\\\n              const dataUint8Points = readFileSharedArray(pipelineModule, `${output.path}/data/points.raw`);\\\\n              mesh.points = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.pointComponentType, dataUint8Points.buffer);\\\\n            } else {\\\\n              mesh.points = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.pointComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            if (mesh.numberOfPointPixels > 0) {\\\\n              const dataUint8PointData = readFileSharedArray(pipelineModule, `${output.path}/data/pointData.raw`);\\\\n              mesh.pointData = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.pointPixelComponentType, dataUint8PointData.buffer);\\\\n            } else {\\\\n              mesh.pointData = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.pointPixelComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            if (mesh.numberOfCells > 0) {\\\\n              const dataUint8Cells = readFileSharedArray(pipelineModule, `${output.path}/data/cells.raw`);\\\\n              mesh.cells = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.cellComponentType, dataUint8Cells.buffer);\\\\n            } else {\\\\n              mesh.cells = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.cellComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            if (mesh.numberOfCellPixels > 0) {\\\\n              const dataUint8CellData = readFileSharedArray(pipelineModule, `${output.path}/data/cellData.raw`);\\\\n              mesh.cellData = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.cellPixelComponentType, dataUint8CellData.buffer);\\\\n            } else {\\\\n              mesh.cellData = (0,_core_bufferToTypedArray_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(mesh.meshType.cellPixelComponentType, new ArrayBuffer(0));\\\\n            }\\\\n            outputData = mesh;\\\\n            break;\\\\n          }\\\\n        default:\\\\n          throw Error('Unsupported output InterfaceType');\\\\n      }\\\\n      const populatedOutput = {\\\\n        type: output.type,\\\\n        data: outputData\\\\n      };\\\\n      populatedOutputs.push(populatedOutput);\\\\n    });\\\\n  }\\\\n  return {\\\\n    returnValue,\\\\n    stdout,\\\\n    stderr,\\\\n    outputs: populatedOutputs\\\\n  };\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (runPipelineEmscripten);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/pipeline/internal/runPipelineEmscripten.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/web-workers/loadImageIOPipelineModule.js\\\":\\n/*!*****************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/web-workers/loadImageIOPipelineModule.js ***!\\n  \\\\*****************************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\n/* harmony import */ var _loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadPipelineModule.js */ \\\\\\\"./node_modules/itk-wasm/dist/web-workers/loadPipelineModule.js\\\\\\\");\\\\n/* harmony import */ var _io_internal_MimeToImageIO_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../io/internal/MimeToImageIO.js */ \\\\\\\"./node_modules/itk-wasm/dist/io/internal/MimeToImageIO.js\\\\\\\");\\\\n/* harmony import */ var _io_extensionToImageIO_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../io/extensionToImageIO.js */ \\\\\\\"./node_modules/itk-wasm/dist/io/extensionToImageIO.js\\\\\\\");\\\\n/* harmony import */ var _io_getFileExtension_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../io/getFileExtension.js */ \\\\\\\"./node_modules/itk-wasm/dist/io/getFileExtension.js\\\\\\\");\\\\n/* harmony import */ var _io_internal_ImageIOIndex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/internal/ImageIOIndex.js */ \\\\\\\"./node_modules/itk-wasm/dist/io/internal/ImageIOIndex.js\\\\\\\");\\\\n/* harmony import */ var _pipeline_internal_runPipelineEmscripten_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pipeline/internal/runPipelineEmscripten.js */ \\\\\\\"./node_modules/itk-wasm/dist/pipeline/internal/runPipelineEmscripten.js\\\\\\\");\\\\nvar __await = undefined && undefined.__await || function (v) {\\\\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\\\\n};\\\\nvar __asyncGenerator = undefined && undefined.__asyncGenerator || function (thisArg, _arguments, generator) {\\\\n  if (!Symbol.asyncIterator) throw new TypeError(\\\\\\\"Symbol.asyncIterator is not defined.\\\\\\\");\\\\n  var g = generator.apply(thisArg, _arguments || []),\\\\n    i,\\\\n    q = [];\\\\n  return i = {}, verb(\\\\\\\"next\\\\\\\"), verb(\\\\\\\"throw\\\\\\\"), verb(\\\\\\\"return\\\\\\\"), i[Symbol.asyncIterator] = function () {\\\\n    return this;\\\\n  }, i;\\\\n  function verb(n) {\\\\n    if (g[n]) i[n] = function (v) {\\\\n      return new Promise(function (a, b) {\\\\n        q.push([n, v, a, b]) > 1 || resume(n, v);\\\\n      });\\\\n    };\\\\n  }\\\\n  function resume(n, v) {\\\\n    try {\\\\n      step(g[n](v));\\\\n    } catch (e) {\\\\n      settle(q[0][3], e);\\\\n    }\\\\n  }\\\\n  function step(r) {\\\\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\\\\n  }\\\\n  function fulfill(value) {\\\\n    resume(\\\\\\\"next\\\\\\\", value);\\\\n  }\\\\n  function reject(value) {\\\\n    resume(\\\\\\\"throw\\\\\\\", value);\\\\n  }\\\\n  function settle(f, v) {\\\\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\\\\n  }\\\\n};\\\\nvar __asyncValues = undefined && undefined.__asyncValues || function (o) {\\\\n  if (!Symbol.asyncIterator) throw new TypeError(\\\\\\\"Symbol.asyncIterator is not defined.\\\\\\\");\\\\n  var m = o[Symbol.asyncIterator],\\\\n    i;\\\\n  return m ? m.call(o) : (o = typeof __values === \\\\\\\"function\\\\\\\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\\\\\\\"next\\\\\\\"), verb(\\\\\\\"throw\\\\\\\"), verb(\\\\\\\"return\\\\\\\"), i[Symbol.asyncIterator] = function () {\\\\n    return this;\\\\n  }, i);\\\\n  function verb(n) {\\\\n    i[n] = o[n] && function (v) {\\\\n      return new Promise(function (resolve, reject) {\\\\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\\\\n      });\\\\n    };\\\\n  }\\\\n  function settle(resolve, reject, d, v) {\\\\n    Promise.resolve(v).then(function (v) {\\\\n      resolve({\\\\n        value: v,\\\\n        done: d\\\\n      });\\\\n    }, reject);\\\\n  }\\\\n};\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\nfunction availableIOModules(input) {\\\\n  return __asyncGenerator(this, arguments, function* availableIOModules_1() {\\\\n    for (let idx = 0; idx < _io_internal_ImageIOIndex_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].length; idx++) {\\\\n      const trialIO = _io_internal_ImageIOIndex_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"][idx] + '-read-image';\\\\n      const ioModule = yield __await((0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])(trialIO, input.config.imageIOUrl));\\\\n      yield yield __await(ioModule);\\\\n    }\\\\n  });\\\\n}\\\\nasync function loadImageIOPipelineModule(input, postfix) {\\\\n  var e_1, _a;\\\\n  if (input.mimeType && _io_internal_MimeToImageIO_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].has(input.mimeType)) {\\\\n    const io = _io_internal_MimeToImageIO_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].get(input.mimeType) + postfix;\\\\n    const ioModule = await (0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])(io, input.config.imageIOUrl);\\\\n    return ioModule;\\\\n  }\\\\n  const extension = (0,_io_getFileExtension_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(input.fileName);\\\\n  if (_io_extensionToImageIO_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"].has(extension)) {\\\\n    const io = _io_extensionToImageIO_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"].get(extension) + postfix;\\\\n    const ioModule = await (0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])(io, input.config.imageIOUrl);\\\\n    return ioModule;\\\\n  }\\\\n  for (let idx = 0; idx < _io_internal_ImageIOIndex_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].length; ++idx) {\\\\n    let idx = 0;\\\\n    try {\\\\n      for (var _b = (e_1 = void 0, __asyncValues(availableIOModules(input))), _c; _c = await _b.next(), !_c.done;) {\\\\n        const pipelineModule = _c.value;\\\\n        try {\\\\n          const {\\\\n            returnValue,\\\\n            outputs\\\\n          } = await (0,_pipeline_internal_runPipelineEmscripten_js__WEBPACK_IMPORTED_MODULE_5__[\\\\\\\"default\\\\\\\"])(pipelineModule, input.args, input.outputs, input.inputs);\\\\n          if (returnValue === 0) {\\\\n            return pipelineModule;\\\\n          }\\\\n        } catch (error) {\\\\n          // continue\\\\n        }\\\\n        idx++;\\\\n      }\\\\n    } catch (e_1_1) {\\\\n      e_1 = {\\\\n        error: e_1_1\\\\n      };\\\\n    } finally {\\\\n      try {\\\\n        if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);\\\\n      } finally {\\\\n        if (e_1) throw e_1.error;\\\\n      }\\\\n    }\\\\n  }\\\\n  throw Error(`Could not find IO for: ${input.fileName}`);\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (loadImageIOPipelineModule);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/web-workers/loadImageIOPipelineModule.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/web-workers/loadMeshIOPipelineModule.js\\\":\\n/*!****************************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/web-workers/loadMeshIOPipelineModule.js ***!\\n  \\\\****************************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\n/* harmony import */ var _loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadPipelineModule.js */ \\\\\\\"./node_modules/itk-wasm/dist/web-workers/loadPipelineModule.js\\\\\\\");\\\\n/* harmony import */ var _io_internal_MimeToMeshIO_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../io/internal/MimeToMeshIO.js */ \\\\\\\"./node_modules/itk-wasm/dist/io/internal/MimeToMeshIO.js\\\\\\\");\\\\n/* harmony import */ var _io_extensionToMeshIO_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../io/extensionToMeshIO.js */ \\\\\\\"./node_modules/itk-wasm/dist/io/extensionToMeshIO.js\\\\\\\");\\\\n/* harmony import */ var _io_getFileExtension_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../io/getFileExtension.js */ \\\\\\\"./node_modules/itk-wasm/dist/io/getFileExtension.js\\\\\\\");\\\\n/* harmony import */ var _io_internal_MeshIOIndex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/internal/MeshIOIndex.js */ \\\\\\\"./node_modules/itk-wasm/dist/io/internal/MeshIOIndex.js\\\\\\\");\\\\n/* harmony import */ var _pipeline_internal_runPipelineEmscripten_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pipeline/internal/runPipelineEmscripten.js */ \\\\\\\"./node_modules/itk-wasm/dist/pipeline/internal/runPipelineEmscripten.js\\\\\\\");\\\\nvar __await = undefined && undefined.__await || function (v) {\\\\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\\\\n};\\\\nvar __asyncGenerator = undefined && undefined.__asyncGenerator || function (thisArg, _arguments, generator) {\\\\n  if (!Symbol.asyncIterator) throw new TypeError(\\\\\\\"Symbol.asyncIterator is not defined.\\\\\\\");\\\\n  var g = generator.apply(thisArg, _arguments || []),\\\\n    i,\\\\n    q = [];\\\\n  return i = {}, verb(\\\\\\\"next\\\\\\\"), verb(\\\\\\\"throw\\\\\\\"), verb(\\\\\\\"return\\\\\\\"), i[Symbol.asyncIterator] = function () {\\\\n    return this;\\\\n  }, i;\\\\n  function verb(n) {\\\\n    if (g[n]) i[n] = function (v) {\\\\n      return new Promise(function (a, b) {\\\\n        q.push([n, v, a, b]) > 1 || resume(n, v);\\\\n      });\\\\n    };\\\\n  }\\\\n  function resume(n, v) {\\\\n    try {\\\\n      step(g[n](v));\\\\n    } catch (e) {\\\\n      settle(q[0][3], e);\\\\n    }\\\\n  }\\\\n  function step(r) {\\\\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\\\\n  }\\\\n  function fulfill(value) {\\\\n    resume(\\\\\\\"next\\\\\\\", value);\\\\n  }\\\\n  function reject(value) {\\\\n    resume(\\\\\\\"throw\\\\\\\", value);\\\\n  }\\\\n  function settle(f, v) {\\\\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\\\\n  }\\\\n};\\\\nvar __asyncValues = undefined && undefined.__asyncValues || function (o) {\\\\n  if (!Symbol.asyncIterator) throw new TypeError(\\\\\\\"Symbol.asyncIterator is not defined.\\\\\\\");\\\\n  var m = o[Symbol.asyncIterator],\\\\n    i;\\\\n  return m ? m.call(o) : (o = typeof __values === \\\\\\\"function\\\\\\\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\\\\\\\"next\\\\\\\"), verb(\\\\\\\"throw\\\\\\\"), verb(\\\\\\\"return\\\\\\\"), i[Symbol.asyncIterator] = function () {\\\\n    return this;\\\\n  }, i);\\\\n  function verb(n) {\\\\n    i[n] = o[n] && function (v) {\\\\n      return new Promise(function (resolve, reject) {\\\\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\\\\n      });\\\\n    };\\\\n  }\\\\n  function settle(resolve, reject, d, v) {\\\\n    Promise.resolve(v).then(function (v) {\\\\n      resolve({\\\\n        value: v,\\\\n        done: d\\\\n      });\\\\n    }, reject);\\\\n  }\\\\n};\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\nfunction availableIOModules(input) {\\\\n  return __asyncGenerator(this, arguments, function* availableIOModules_1() {\\\\n    for (let idx = 0; idx < _io_internal_MeshIOIndex_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].length; idx++) {\\\\n      const trialIO = _io_internal_MeshIOIndex_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"][idx] + '-read-mesh';\\\\n      const ioModule = yield __await((0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])(trialIO, input.config.meshIOUrl));\\\\n      yield yield __await(ioModule);\\\\n    }\\\\n  });\\\\n}\\\\nasync function loadMeshIOPipelineModule(input, postfix) {\\\\n  var e_1, _a;\\\\n  if (input.mimeType && _io_internal_MimeToMeshIO_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].has(input.mimeType)) {\\\\n    const io = _io_internal_MimeToMeshIO_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].get(input.mimeType) + postfix;\\\\n    const ioModule = await (0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])(io, input.config.meshIOUrl);\\\\n    return ioModule;\\\\n  }\\\\n  const extension = (0,_io_getFileExtension_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(input.fileName);\\\\n  if (_io_extensionToMeshIO_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"].has(extension)) {\\\\n    const io = _io_extensionToMeshIO_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"].get(extension) + postfix;\\\\n    const ioModule = await (0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])(io, input.config.meshIOUrl);\\\\n    return ioModule;\\\\n  }\\\\n  for (let idx = 0; idx < _io_internal_MeshIOIndex_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"].length; ++idx) {\\\\n    let idx = 0;\\\\n    try {\\\\n      for (var _b = (e_1 = void 0, __asyncValues(availableIOModules(input))), _c; _c = await _b.next(), !_c.done;) {\\\\n        const pipelineModule = _c.value;\\\\n        try {\\\\n          const {\\\\n            returnValue,\\\\n            outputs\\\\n          } = await (0,_pipeline_internal_runPipelineEmscripten_js__WEBPACK_IMPORTED_MODULE_5__[\\\\\\\"default\\\\\\\"])(pipelineModule, input.args, input.outputs, input.inputs);\\\\n          if (returnValue === 0) {\\\\n            return pipelineModule;\\\\n          }\\\\n        } catch (error) {\\\\n          // continue\\\\n        }\\\\n        idx++;\\\\n      }\\\\n    } catch (e_1_1) {\\\\n      e_1 = {\\\\n        error: e_1_1\\\\n      };\\\\n    } finally {\\\\n      try {\\\\n        if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);\\\\n      } finally {\\\\n        if (e_1) throw e_1.error;\\\\n      }\\\\n    }\\\\n  }\\\\n  throw Error(`Could not find IO for: ${input.fileName}`);\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (loadMeshIOPipelineModule);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/web-workers/loadMeshIOPipelineModule.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/web-workers/loadPipelineModule.js\\\":\\n/*!**********************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/web-workers/loadPipelineModule.js ***!\\n  \\\\**********************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\n/* harmony import */ var _core_internal_loadEmscriptenModuleWebWorker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/internal/loadEmscriptenModuleWebWorker.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/internal/loadEmscriptenModuleWebWorker.js\\\\\\\");\\\\n\\\\n// To cache loaded pipeline modules\\\\nconst pipelineToModule = new Map();\\\\nasync function loadPipelineModule(pipelinePath, baseUrl) {\\\\n  let moduleRelativePathOrURL = pipelinePath;\\\\n  let pipeline = pipelinePath;\\\\n  let pipelineModule = null;\\\\n  if (typeof pipelinePath !== 'string') {\\\\n    moduleRelativePathOrURL = new URL(pipelinePath.href);\\\\n    pipeline = moduleRelativePathOrURL.href;\\\\n  }\\\\n  if (pipelineToModule.has(pipeline)) {\\\\n    pipelineModule = pipelineToModule.get(pipeline);\\\\n  } else {\\\\n    pipelineToModule.set(pipeline, await (0,_core_internal_loadEmscriptenModuleWebWorker_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"default\\\\\\\"])(moduleRelativePathOrURL, baseUrl));\\\\n    pipelineModule = pipelineToModule.get(pipeline);\\\\n  }\\\\n  return pipelineModule;\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (loadPipelineModule);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC93ZWItd29ya2Vycy9sb2FkUGlwZWxpbmVNb2R1bGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUY7QUFDckY7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztBQUNsQyxlQUFlQyxrQkFBa0JBLENBQUNDLFlBQVksRUFBRUMsT0FBTyxFQUFFO0VBQ3JELElBQUlDLHVCQUF1QixHQUFHRixZQUFZO0VBQzFDLElBQUlHLFFBQVEsR0FBR0gsWUFBWTtFQUMzQixJQUFJSSxjQUFjLEdBQUcsSUFBSTtFQUN6QixJQUFJLE9BQU9KLFlBQVksS0FBSyxRQUFRLEVBQUU7SUFDbENFLHVCQUF1QixHQUFHLElBQUlHLEdBQUcsQ0FBQ0wsWUFBWSxDQUFDTSxJQUFJLENBQUM7SUFDcERILFFBQVEsR0FBR0QsdUJBQXVCLENBQUNJLElBQUk7RUFDM0M7RUFDQSxJQUFJVCxnQkFBZ0IsQ0FBQ1UsR0FBRyxDQUFDSixRQUFRLENBQUMsRUFBRTtJQUNoQ0MsY0FBYyxHQUFHUCxnQkFBZ0IsQ0FBQ1csR0FBRyxDQUFDTCxRQUFRLENBQUM7RUFDbkQsQ0FBQyxNQUNJO0lBQ0ROLGdCQUFnQixDQUFDWSxHQUFHLENBQUNOLFFBQVEsRUFBRSxNQUFNUCwyRkFBb0IsQ0FBQ00sdUJBQXVCLEVBQUVELE9BQU8sQ0FBQyxDQUFDO0lBQzVGRyxjQUFjLEdBQUdQLGdCQUFnQixDQUFDVyxHQUFHLENBQUNMLFFBQVEsQ0FBQztFQUNuRDtFQUNBLE9BQU9DLGNBQWM7QUFDekI7QUFDQSxpRUFBZUwsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC93ZWItd29ya2Vycy9sb2FkUGlwZWxpbmVNb2R1bGUuanM/ZWE5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9hZEVtc2NyaXB0ZW5Nb2R1bGUgZnJvbSAnLi4vY29yZS9pbnRlcm5hbC9sb2FkRW1zY3JpcHRlbk1vZHVsZVdlYldvcmtlci5qcyc7XG4vLyBUbyBjYWNoZSBsb2FkZWQgcGlwZWxpbmUgbW9kdWxlc1xuY29uc3QgcGlwZWxpbmVUb01vZHVsZSA9IG5ldyBNYXAoKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRQaXBlbGluZU1vZHVsZShwaXBlbGluZVBhdGgsIGJhc2VVcmwpIHtcbiAgICBsZXQgbW9kdWxlUmVsYXRpdmVQYXRoT3JVUkwgPSBwaXBlbGluZVBhdGg7XG4gICAgbGV0IHBpcGVsaW5lID0gcGlwZWxpbmVQYXRoO1xuICAgIGxldCBwaXBlbGluZU1vZHVsZSA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiBwaXBlbGluZVBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1vZHVsZVJlbGF0aXZlUGF0aE9yVVJMID0gbmV3IFVSTChwaXBlbGluZVBhdGguaHJlZik7XG4gICAgICAgIHBpcGVsaW5lID0gbW9kdWxlUmVsYXRpdmVQYXRoT3JVUkwuaHJlZjtcbiAgICB9XG4gICAgaWYgKHBpcGVsaW5lVG9Nb2R1bGUuaGFzKHBpcGVsaW5lKSkge1xuICAgICAgICBwaXBlbGluZU1vZHVsZSA9IHBpcGVsaW5lVG9Nb2R1bGUuZ2V0KHBpcGVsaW5lKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBpcGVsaW5lVG9Nb2R1bGUuc2V0KHBpcGVsaW5lLCBhd2FpdCBsb2FkRW1zY3JpcHRlbk1vZHVsZShtb2R1bGVSZWxhdGl2ZVBhdGhPclVSTCwgYmFzZVVybCkpO1xuICAgICAgICBwaXBlbGluZU1vZHVsZSA9IHBpcGVsaW5lVG9Nb2R1bGUuZ2V0KHBpcGVsaW5lKTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVsaW5lTW9kdWxlO1xufVxuZXhwb3J0IGRlZmF1bHQgbG9hZFBpcGVsaW5lTW9kdWxlO1xuIl0sIm5hbWVzIjpbImxvYWRFbXNjcmlwdGVuTW9kdWxlIiwicGlwZWxpbmVUb01vZHVsZSIsIk1hcCIsImxvYWRQaXBlbGluZU1vZHVsZSIsInBpcGVsaW5lUGF0aCIsImJhc2VVcmwiLCJtb2R1bGVSZWxhdGl2ZVBhdGhPclVSTCIsInBpcGVsaW5lIiwicGlwZWxpbmVNb2R1bGUiLCJVUkwiLCJocmVmIiwiaGFzIiwiZ2V0Iiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/web-workers/loadPipelineModule.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/web-workers/runPipeline.js\\\":\\n/*!***************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/web-workers/runPipeline.js ***!\\n  \\\\***************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   \\\\\\\"default\\\\\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\\\n/* harmony export */ });\\\\n/* harmony import */ var webworker_promise_lib_register_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webworker-promise/lib/register.js */ \\\\\\\"./node_modules/webworker-promise/lib/register.js\\\\\\\");\\\\n/* harmony import */ var _pipeline_internal_runPipelineEmscripten_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pipeline/internal/runPipelineEmscripten.js */ \\\\\\\"./node_modules/itk-wasm/dist/pipeline/internal/runPipelineEmscripten.js\\\\\\\");\\\\n/* harmony import */ var _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/IOTypes.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/IOTypes.js\\\\\\\");\\\\n/* harmony import */ var _core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/getTransferable.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/getTransferable.js\\\\\\\");\\\\n/* harmony import */ var _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/InterfaceTypes.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/InterfaceTypes.js\\\\\\\");\\\\n/* harmony import */ var _core_internal_meshTransferables_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/internal/meshTransferables.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/internal/meshTransferables.js\\\\\\\");\\\\n/* harmony import */ var _core_internal_polyDataTransferables_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/internal/polyDataTransferables.js */ \\\\\\\"./node_modules/itk-wasm/dist/core/internal/polyDataTransferables.js\\\\\\\");\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\nasync function runPipeline(pipelineModule, args, outputs, inputs) {\\\\n  const result = (0,_pipeline_internal_runPipelineEmscripten_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])(pipelineModule, args, outputs, inputs);\\\\n  const transferables = [];\\\\n  if (result.outputs) {\\\\n    result.outputs.forEach(function (output) {\\\\n      if (output.type === _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].BinaryStream || output.type === _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].BinaryFile) {\\\\n        // Binary data\\\\n        const binary = output.data;\\\\n        const transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(binary);\\\\n        if (transferable) {\\\\n          transferables.push(transferable);\\\\n        }\\\\n      } else if (output.type === _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Image) {\\\\n        // Image data\\\\n        const image = output.data;\\\\n        let transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(image.data);\\\\n        if (transferable) {\\\\n          transferables.push(transferable);\\\\n        }\\\\n        transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(image.direction);\\\\n        if (transferable) {\\\\n          transferables.push(transferable);\\\\n        }\\\\n      } else if (output.type === _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].Mesh) {\\\\n        const mesh = output.data;\\\\n        const mt = (0,_core_internal_meshTransferables_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"])(mesh);\\\\n        transferables.push(...mt);\\\\n      } else if (output.type === _core_InterfaceTypes_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"].PolyData) {\\\\n        const polyData = output.data;\\\\n        const pt = (0,_core_internal_polyDataTransferables_js__WEBPACK_IMPORTED_MODULE_5__[\\\\\\\"default\\\\\\\"])(polyData);\\\\n        transferables.push(...pt);\\\\n      } else if (output.type === _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_6__[\\\\\\\"default\\\\\\\"].Binary) {\\\\n        // Binary data\\\\n        const binary = output.data;\\\\n        const transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(binary);\\\\n        if (transferable) {\\\\n          transferables.push(transferable);\\\\n        }\\\\n      } else if (output.type === _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_6__[\\\\\\\"default\\\\\\\"].Image) {\\\\n        // Image data\\\\n        const image = output.data;\\\\n        let transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(image.data);\\\\n        if (transferable) {\\\\n          transferables.push(transferable);\\\\n        }\\\\n        transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(image.direction);\\\\n        if (transferable) {\\\\n          transferables.push(transferable);\\\\n        }\\\\n      } else if (output.type === _core_IOTypes_js__WEBPACK_IMPORTED_MODULE_6__[\\\\\\\"default\\\\\\\"].Mesh) {\\\\n        // Mesh data\\\\n        const mesh = output.data;\\\\n        if (mesh.points) {\\\\n          const transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(mesh.points);\\\\n          if (transferable) {\\\\n            transferables.push(transferable);\\\\n          }\\\\n        }\\\\n        if (mesh.pointData) {\\\\n          const transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(mesh.pointData);\\\\n          if (transferable) {\\\\n            transferables.push(transferable);\\\\n          }\\\\n        }\\\\n        if (mesh.cells) {\\\\n          const transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(mesh.cells);\\\\n          if (transferable) {\\\\n            transferables.push(transferable);\\\\n          }\\\\n        }\\\\n        if (mesh.cellData) {\\\\n          const transferable = (0,_core_getTransferable_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(mesh.cellData);\\\\n          if (transferable) {\\\\n            transferables.push(transferable);\\\\n          }\\\\n        }\\\\n      }\\\\n    });\\\\n  }\\\\n  return new webworker_promise_lib_register_js__WEBPACK_IMPORTED_MODULE_0__.TransferableResponse(result, transferables);\\\\n}\\\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (runPipeline);//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/web-workers/runPipeline.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./node_modules/itk-wasm/dist/web-workers/pipeline.worker.js\\\":\\n/*!*******************************************************************!*\\\\\\n  !*** ./node_modules/itk-wasm/dist/web-workers/pipeline.worker.js ***!\\n  \\\\*******************************************************************/\\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var webworker_promise_lib_register_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webworker-promise/lib/register.js */ \\\\\\\"./node_modules/webworker-promise/lib/register.js\\\\\\\");\\\\n/* harmony import */ var _loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadPipelineModule.js */ \\\\\\\"./node_modules/itk-wasm/dist/web-workers/loadPipelineModule.js\\\\\\\");\\\\n/* harmony import */ var _loadImageIOPipelineModule_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadImageIOPipelineModule.js */ \\\\\\\"./node_modules/itk-wasm/dist/web-workers/loadImageIOPipelineModule.js\\\\\\\");\\\\n/* harmony import */ var _loadMeshIOPipelineModule_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadMeshIOPipelineModule.js */ \\\\\\\"./node_modules/itk-wasm/dist/web-workers/loadMeshIOPipelineModule.js\\\\\\\");\\\\n/* harmony import */ var _runPipeline_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./runPipeline.js */ \\\\\\\"./node_modules/itk-wasm/dist/web-workers/runPipeline.js\\\\\\\");\\\\n\\\\n\\\\n\\\\n\\\\n\\\\nwebworker_promise_lib_register_js__WEBPACK_IMPORTED_MODULE_0__(async function (input) {\\\\n    let pipelineModule = null;\\\\n    if (input.operation === 'runPipeline') {\\\\n        const pipelineBaseUrl = typeof input.config[input.pipelineBaseUrl] === 'undefined' ? input.pipelineBaseUrl : input.config[input.pipelineBaseUrl];\\\\n        pipelineModule = await (0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])(input.pipelinePath, pipelineBaseUrl);\\\\n    }\\\\n    else if (input.operation === 'readImage') {\\\\n        pipelineModule = await (0,_loadImageIOPipelineModule_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"])(input, '-read-image');\\\\n    }\\\\n    else if (input.operation === 'writeImage') {\\\\n        pipelineModule = await (0,_loadImageIOPipelineModule_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"default\\\\\\\"])(input, '-write-image');\\\\n    }\\\\n    else if (input.operation === 'readMesh') {\\\\n        pipelineModule = await (0,_loadMeshIOPipelineModule_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(input, '-read-mesh');\\\\n    }\\\\n    else if (input.operation === 'writeMesh') {\\\\n        pipelineModule = await (0,_loadMeshIOPipelineModule_js__WEBPACK_IMPORTED_MODULE_3__[\\\\\\\"default\\\\\\\"])(input, '-write-mesh');\\\\n    }\\\\n    else if (input.operation === 'meshToPolyData') {\\\\n        pipelineModule = await (0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])('mesh-to-polydata', input.config.meshIOUrl);\\\\n    }\\\\n    else if (input.operation === 'polyDataToMesh') {\\\\n        pipelineModule = await (0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])('polydata-to-mesh', input.config.meshIOUrl);\\\\n    }\\\\n    else if (input.operation === 'readDICOMImageSeries') {\\\\n        pipelineModule = await (0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])('read-image-dicom-file-series', input.config.imageIOUrl);\\\\n    }\\\\n    else if (input.operation === 'readDICOMTags') {\\\\n        pipelineModule = await (0,_loadPipelineModule_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"default\\\\\\\"])('read-dicom-tags', input.config.imageIOUrl);\\\\n    }\\\\n    else {\\\\n        throw new Error('Unknown worker operation');\\\\n    }\\\\n    return (0,_runPipeline_js__WEBPACK_IMPORTED_MODULE_4__[\\\\\\\"default\\\\\\\"])(pipelineModule, input.args, input.outputs, input.inputs);\\\\n});\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC93ZWItd29ya2Vycy9waXBlbGluZS53b3JrZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtFO0FBQ1Q7QUFDYztBQUNGO0FBQzFCO0FBQzNDLDhEQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0VBQWtCO0FBQ2pEO0FBQ0E7QUFDQSwrQkFBK0IseUVBQXlCO0FBQ3hEO0FBQ0E7QUFDQSwrQkFBK0IseUVBQXlCO0FBQ3hEO0FBQ0E7QUFDQSwrQkFBK0Isd0VBQXdCO0FBQ3ZEO0FBQ0E7QUFDQSwrQkFBK0Isd0VBQXdCO0FBQ3ZEO0FBQ0E7QUFDQSwrQkFBK0Isa0VBQWtCO0FBQ2pEO0FBQ0E7QUFDQSwrQkFBK0Isa0VBQWtCO0FBQ2pEO0FBQ0E7QUFDQSwrQkFBK0Isa0VBQWtCO0FBQ2pEO0FBQ0E7QUFDQSwrQkFBK0Isa0VBQWtCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywyREFBVztBQUN0QixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRrLXZ0ay12aWV3ZXIvLi9ub2RlX21vZHVsZXMvaXRrLXdhc20vZGlzdC93ZWItd29ya2Vycy9waXBlbGluZS53b3JrZXIuanM/YzlkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVnaXN0ZXJXZWJ3b3JrZXIgZnJvbSAnd2Vid29ya2VyLXByb21pc2UvbGliL3JlZ2lzdGVyLmpzJztcbmltcG9ydCBsb2FkUGlwZWxpbmVNb2R1bGUgZnJvbSAnLi9sb2FkUGlwZWxpbmVNb2R1bGUuanMnO1xuaW1wb3J0IGxvYWRJbWFnZUlPUGlwZWxpbmVNb2R1bGUgZnJvbSAnLi9sb2FkSW1hZ2VJT1BpcGVsaW5lTW9kdWxlLmpzJztcbmltcG9ydCBsb2FkTWVzaElPUGlwZWxpbmVNb2R1bGUgZnJvbSAnLi9sb2FkTWVzaElPUGlwZWxpbmVNb2R1bGUuanMnO1xuaW1wb3J0IHJ1blBpcGVsaW5lIGZyb20gJy4vcnVuUGlwZWxpbmUuanMnO1xucmVnaXN0ZXJXZWJ3b3JrZXIoYXN5bmMgZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgbGV0IHBpcGVsaW5lTW9kdWxlID0gbnVsbDtcbiAgICBpZiAoaW5wdXQub3BlcmF0aW9uID09PSAncnVuUGlwZWxpbmUnKSB7XG4gICAgICAgIGNvbnN0IHBpcGVsaW5lQmFzZVVybCA9IHR5cGVvZiBpbnB1dC5jb25maWdbaW5wdXQucGlwZWxpbmVCYXNlVXJsXSA9PT0gJ3VuZGVmaW5lZCcgPyBpbnB1dC5waXBlbGluZUJhc2VVcmwgOiBpbnB1dC5jb25maWdbaW5wdXQucGlwZWxpbmVCYXNlVXJsXTtcbiAgICAgICAgcGlwZWxpbmVNb2R1bGUgPSBhd2FpdCBsb2FkUGlwZWxpbmVNb2R1bGUoaW5wdXQucGlwZWxpbmVQYXRoLCBwaXBlbGluZUJhc2VVcmwpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpbnB1dC5vcGVyYXRpb24gPT09ICdyZWFkSW1hZ2UnKSB7XG4gICAgICAgIHBpcGVsaW5lTW9kdWxlID0gYXdhaXQgbG9hZEltYWdlSU9QaXBlbGluZU1vZHVsZShpbnB1dCwgJy1yZWFkLWltYWdlJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlucHV0Lm9wZXJhdGlvbiA9PT0gJ3dyaXRlSW1hZ2UnKSB7XG4gICAgICAgIHBpcGVsaW5lTW9kdWxlID0gYXdhaXQgbG9hZEltYWdlSU9QaXBlbGluZU1vZHVsZShpbnB1dCwgJy13cml0ZS1pbWFnZScpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpbnB1dC5vcGVyYXRpb24gPT09ICdyZWFkTWVzaCcpIHtcbiAgICAgICAgcGlwZWxpbmVNb2R1bGUgPSBhd2FpdCBsb2FkTWVzaElPUGlwZWxpbmVNb2R1bGUoaW5wdXQsICctcmVhZC1tZXNoJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlucHV0Lm9wZXJhdGlvbiA9PT0gJ3dyaXRlTWVzaCcpIHtcbiAgICAgICAgcGlwZWxpbmVNb2R1bGUgPSBhd2FpdCBsb2FkTWVzaElPUGlwZWxpbmVNb2R1bGUoaW5wdXQsICctd3JpdGUtbWVzaCcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpbnB1dC5vcGVyYXRpb24gPT09ICdtZXNoVG9Qb2x5RGF0YScpIHtcbiAgICAgICAgcGlwZWxpbmVNb2R1bGUgPSBhd2FpdCBsb2FkUGlwZWxpbmVNb2R1bGUoJ21lc2gtdG8tcG9seWRhdGEnLCBpbnB1dC5jb25maWcubWVzaElPVXJsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaW5wdXQub3BlcmF0aW9uID09PSAncG9seURhdGFUb01lc2gnKSB7XG4gICAgICAgIHBpcGVsaW5lTW9kdWxlID0gYXdhaXQgbG9hZFBpcGVsaW5lTW9kdWxlKCdwb2x5ZGF0YS10by1tZXNoJywgaW5wdXQuY29uZmlnLm1lc2hJT1VybCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlucHV0Lm9wZXJhdGlvbiA9PT0gJ3JlYWRESUNPTUltYWdlU2VyaWVzJykge1xuICAgICAgICBwaXBlbGluZU1vZHVsZSA9IGF3YWl0IGxvYWRQaXBlbGluZU1vZHVsZSgncmVhZC1pbWFnZS1kaWNvbS1maWxlLXNlcmllcycsIGlucHV0LmNvbmZpZy5pbWFnZUlPVXJsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaW5wdXQub3BlcmF0aW9uID09PSAncmVhZERJQ09NVGFncycpIHtcbiAgICAgICAgcGlwZWxpbmVNb2R1bGUgPSBhd2FpdCBsb2FkUGlwZWxpbmVNb2R1bGUoJ3JlYWQtZGljb20tdGFncycsIGlucHV0LmNvbmZpZy5pbWFnZUlPVXJsKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB3b3JrZXIgb3BlcmF0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiBydW5QaXBlbGluZShwaXBlbGluZU1vZHVsZSwgaW5wdXQuYXJncywgaW5wdXQub3V0cHV0cywgaW5wdXQuaW5wdXRzKTtcbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/web-workers/pipeline.worker.js\\\\n\\\");\\n\\n/***/ })\\n\\n/******/ \\t});\\n/************************************************************************/\\n/******/ \\t// The module cache\\n/******/ \\tvar __webpack_module_cache__ = {};\\n/******/ \\t\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tvar cachedModule = __webpack_module_cache__[moduleId];\\n/******/ \\t\\tif (cachedModule !== undefined) {\\n/******/ \\t\\t\\tif (cachedModule.error !== undefined) throw cachedModule.error;\\n/******/ \\t\\t\\treturn cachedModule.exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = __webpack_module_cache__[moduleId] = {\\n/******/ \\t\\t\\t// no module.id needed\\n/******/ \\t\\t\\t// no module.loaded needed\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/ \\t\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\ttry {\\n/******/ \\t\\t\\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\\n/******/ \\t\\t} catch(e) {\\n/******/ \\t\\t\\tmodule.error = e;\\n/******/ \\t\\t\\tthrow e;\\n/******/ \\t\\t}\\n/******/ \\t\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/ \\t\\n/************************************************************************/\\n/******/ \\t/* webpack/runtime/define property getters */\\n/******/ \\t(() => {\\n/******/ \\t\\t// define getter functions for harmony exports\\n/******/ \\t\\t__webpack_require__.d = (exports, definition) => {\\n/******/ \\t\\t\\tfor(var key in definition) {\\n/******/ \\t\\t\\t\\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\\n/******/ \\t\\t\\t\\t\\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\\n/******/ \\t\\t\\t\\t}\\n/******/ \\t\\t\\t}\\n/******/ \\t\\t};\\n/******/ \\t})();\\n/******/ \\t\\n/******/ \\t/* webpack/runtime/hasOwnProperty shorthand */\\n/******/ \\t(() => {\\n/******/ \\t\\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\\n/******/ \\t})();\\n/******/ \\t\\n/******/ \\t/* webpack/runtime/make namespace object */\\n/******/ \\t(() => {\\n/******/ \\t\\t// define __esModule on exports\\n/******/ \\t\\t__webpack_require__.r = (exports) => {\\n/******/ \\t\\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t\\t}\\n/******/ \\t\\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t\\t};\\n/******/ \\t})();\\n/******/ \\t\\n/************************************************************************/\\n/******/ \\t\\n/******/ \\t// startup\\n/******/ \\t// Load entry module and return exports\\n/******/ \\t// This entry module can't be inlined because the eval-source-map devtool is used.\\n/******/ \\tvar __webpack_exports__ = __webpack_require__(\\\"./node_modules/itk-wasm/dist/web-workers/pipeline.worker.js\\\");\\n/******/ \\t\\n/******/ })()\\n;\", \"Worker\", undefined, undefined);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/itk-wasm/dist/web-workers/pipeline.worker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 		} catch(e) {
/******/ 			module.error = e;
/******/ 			throw e;
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	(() => {
/******/ 		__webpack_require__.hmrF = () => ("c370552ece6b7bb3791b." + __webpack_require__.h() + ".hot-update.json");
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("a86c40c6bed2674eeb2d")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	(() => {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		// eslint-disable-next-line no-unused-vars
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId) {
/******/ 				return trackBlockingPromise(require.e(chunkId));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				//inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results);
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							},
/******/ 							[])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								} else {
/******/ 									return setStatus("ready").then(function () {
/******/ 										return updatedModules;
/******/ 									});
/******/ 								}
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/importScripts chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "already loaded"
/******/ 		var installedChunks = __webpack_require__.hmrS_importScripts = __webpack_require__.hmrS_importScripts || {
/******/ 			"vendors-node_modules_itk-wasm_dist_web-workers_pipeline_worker_js": 1
/******/ 		};
/******/ 		
/******/ 		// no chunk install function needed
/******/ 		// no chunk loading
/******/ 		
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			var success = false;
/******/ 			self["webpackHotUpdateitk_vtk_viewer"] = (_, moreModules, runtime) => {
/******/ 				for(var moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						currentUpdate[moduleId] = moreModules[moduleId];
/******/ 						if(updatedModulesList) updatedModulesList.push(moduleId);
/******/ 					}
/******/ 				}
/******/ 				if(runtime) currentUpdateRuntime.push(runtime);
/******/ 				success = true;
/******/ 			};
/******/ 			// start update chunk loading
/******/ 			importScripts(__webpack_require__.p + __webpack_require__.hu(chunkId));
/******/ 			if(!success) throw new Error("Loading update chunk failed for unknown reason");
/******/ 		}
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.importScripsHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result;
/******/ 					if (newModuleFactory) {
/******/ 						result = getAffectedModuleEffects(moduleId);
/******/ 					} else {
/******/ 						result = {
/******/ 							type: "disposed",
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err2) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err2,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err2);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.importScrips = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.importScrips = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.importScripsHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = () => {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__("./node_modules/itk-wasm/dist/web-workers/pipeline.worker.js");
/******/ 	
/******/ })()
;